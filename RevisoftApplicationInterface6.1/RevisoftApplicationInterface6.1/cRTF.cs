using System;
using System.Collections.Generic;
using System.Xml;
using System.IO;
using System.Collections;

using System.Windows.Forms;
using System.Diagnostics;
using System.Runtime.InteropServices;

using DocumentFormat.OpenXml;
using DocumentFormat.OpenXml.Packaging;
using DocumentFormat.OpenXml.Wordprocessing;
using System.Text;

using System.Linq;
using System.Configuration;

using Ovml = DocumentFormat.OpenXml.Vml.Office;
using V = DocumentFormat.OpenXml.Vml;
using M = DocumentFormat.OpenXml.Math;
using W14 = DocumentFormat.OpenXml.Office2010.Word;
using W15 = DocumentFormat.OpenXml.Office2013.Word;
using SautinSoft.Document;
using System.Data;
using System.Windows.Data;
using SautinSoft.Document.MailMerging;

namespace RevisoftApplication
{

  public static class Docsettings
  {
    public static string defaultpath;
  }

  enum WdBorderType
  {
    wdBorderBottom = -3,  //A bottom border.
    wdBorderDiagonalDown = -7,    //A diagonal border starting in the top left corner.
    wdBorderDiagonalUp = -8,    // A diagonal border starting in the bottom left corner.
    wdBorderHorizontal = -5,    //Horizontal borders.
    wdBorderLeft = -2,  //A left border.
    wdBorderRight = -4, // A right border.
    wdBorderTop = -1,   //A top border.
    wdBorderVertical = -6 //Vertical borders.
  }
  enum WdLineStyle
  {
    wdLineStyleSingle = 1
  }

  enum WdOrientation
  {
    wdOrientLandscape = 1
  }


  class cDocNet
  {
    public bool AutoHyphenation;
    public Single PageSetupLeftMargin;
    public Single PageSetupRightMargin;
    public string PageSetupPaperSize;
    public WdOrientation PageSetupOrientation;
    public string testoprimapagfooter = "";
    public string testofooter = "";
    public string testoprimapagheader = "";

    public void FieldsUpdate(int counterFieldindex)
    {

      for (int i = 0; i < counterFieldindex; i++)
      {
        //MM   wrdDoc.Fields.Update();
      }
    }

    public void FieldsUpdate()
    {


    }

    public Single CentimetersToPoints(Single cm)
    {
      return 2;
    }

    public string Versione()
    {

      //MM  NON SERVE cerca la versione di word installata
      //MM      try
      //MM      {
      //MM               Microsoft.Office.Interop.Word.Application wrdApp2 = new Microsoft.Office.Interop.Word.Application();
      //MM               wVersione = wrdApp2.Application.Version.ToString().Substring(0, 2);
      //MM               Object oMissing2 = System.Reflection.Missing.Value;
      //MM               wrdApp2.Quit(ref oMissing2, ref oMissing2, ref oMissing2);
      //MM         }
      //MM             catch (Exception ex)
      //MM             {
      //MM               //ATTENZIONE OFFICE 365 NON RITORNA LA VERSIONE
      //MM              string log = ex.Message;
      //MM   }
      return "15";
    }
    public void SaveAs(string outFile, string inpFile, string format)
    {
      string fnameold = Path.GetFileName(outFile);
      string fname = Path.GetFileName(outFile);
      DocumentCore.Serial = "10022773750";
      DocumentCore dc = DocumentCore.Load(inpFile);


      foreach (char invalidchar in System.IO.Path.GetInvalidFileNameChars())
      {
        fname = fname.Replace(invalidchar, '_');
      }
      fname = outFile.Replace(fnameold, fname);
      try
      {
        // Create and add new TOC.

        dc.Sections[0].Blocks.Add(new TableOfEntries(dc, FieldType.TOC));
        if(PageSetupLeftMargin>0)
        {
         dc.Sections[0].PageSetup.PageMargins = new PageMargins()
            {
                Right = LengthUnitConverter.Convert(PageSetupLeftMargin, LengthUnit.Inch, LengthUnit.Point),
                Left = LengthUnitConverter.Convert(PageSetupRightMargin, LengthUnit.Centimeter, LengthUnit.Point)
            };

        }
        
           

        // Update TOC (TOC can be updated only after all document content is added).
        var toc = (TableOfEntries)dc.GetChildElements(true, ElementType.TableOfEntries).FirstOrDefault();
        toc.Update();
      }
      catch (Exception)
      {

      }


      // Update TOC's page numbers.
      // Page numbers are automatically updated in that case.
      dc.GetPaginator(new PaginatorOptions() { UpdateFields = true });

      if (format == "WdSaveFormat.wdFormatDocument")
        dc.Save(fname);
      else
        dc.Save(fname);

      ChangeHeaderFooter(fname);

      //    System.Diagnostics.Process.Start(new System.Diagnostics.ProcessStartInfo(inpFile) { UseShellExecute = true });
    }

    public void ChangeHeaderFooter(string docFile)
    {
      DocumentCore.Serial = "10022773750";
      DocumentCore dc = DocumentCore.Load(docFile);
      try
      {
        SautinSoft.Document.Paragraph parhf = new SautinSoft.Document.Paragraph(dc);
        parhf.Content.Start.Insert(this.testoprimapagheader, new CharacterFormat() { Size = 10.0 });
        parhf.ParagraphFormat.Alignment = SautinSoft.Document.HorizontalAlignment.Center;
        HeaderFooter headerFirst = new HeaderFooter(dc, SautinSoft.Document.HeaderFooterType.HeaderFirst);
        headerFirst.Blocks.Add(parhf);
        foreach (Section s in dc.Sections)
        {
          foreach (HeaderFooter hf in s.HeadersFooters)
          {
            if (hf.HeaderFooterType == SautinSoft.Document.HeaderFooterType.HeaderFirst)
            {
              s.HeadersFooters.Remove(hf);
              break;
            }
          }
        }

        dc.Sections[0].HeadersFooters.Add(headerFirst);


        // NON SERVE FOOTER
        dc.Save(docFile);
      }
      catch (Exception)
      {

      }


      return;


#pragma warning disable CS0162 // È stato rilevato codice non raggiungibile
      SautinSoft.Document.Paragraph parff = new SautinSoft.Document.Paragraph(dc);
#pragma warning restore CS0162 // È stato rilevato codice non raggiungibile
      parff.Content.Start.Insert(this.testoprimapagfooter, new CharacterFormat() { Size = 8.0 });
      parff.ParagraphFormat.Alignment = SautinSoft.Document.HorizontalAlignment.Center;
      HeaderFooter footerFirst = new HeaderFooter(dc, SautinSoft.Document.HeaderFooterType.FooterFirst);
      footerFirst.Blocks.Add(parff);

      foreach (Section s in dc.Sections)
      {
        foreach (HeaderFooter hf in s.HeadersFooters)
        {
          if (hf.HeaderFooterType == SautinSoft.Document.HeaderFooterType.FooterFirst)
          {
            s.HeadersFooters.Remove(hf);
            break;
          }
        }
      }
      dc.Sections[0].HeadersFooters.Add(footerFirst);



      SautinSoft.Document.Paragraph par = new SautinSoft.Document.Paragraph(dc);
      par.Content.Start.Insert(this.testofooter, new CharacterFormat() { Size = 8.0 });
      par.ParagraphFormat.Alignment = SautinSoft.Document.HorizontalAlignment.Center;
      HeaderFooter footer = new HeaderFooter(dc, SautinSoft.Document.HeaderFooterType.FooterDefault);
      footer.Blocks.Add(par);
      foreach (Section s in dc.Sections)
      {
        foreach (HeaderFooter hf in s.HeadersFooters)
        {

          if (hf.HeaderFooterType == SautinSoft.Document.HeaderFooterType.FooterDefault)
          {
            s.HeadersFooters.Remove(hf);
            break;
          }

        }
        s.HeadersFooters.Add(footer.Clone(true));
      }




    }

  }




  class RTFLib
  {

    public int id;
    public int idtree;
    public int idcliente;
    public int idsessione;

    private const string NEW_LINE = "\n";
    private const string NEW_LINE_CR = "\r\n";
    private string fontSize = " \\fs20 ";
    private List<string> rtf_text = new List<string>();
    private string rtf_text_TOC = " \\page\\pard\\keepn\\f0 \\fs30 INDICE\\fs20 \\par \n ";
    private string template_text = "";

    private string checkbox_Cheched = "\\'52";
    private string checkbox_UnCheched = "\\'a3";
    private string spazio = "\\'20";
    private string freccia_dx = "\\'F0";
    private string freccia_bassodx = "\\'C4";
    private string freccia_basso = "\\'F2";
    private string freccia_doppia = "\\'F3";

    public bool printall = false;
    public int printallrows = 40;

    private bool RischioGlobaleAlreadyPrinted = false;

    private string filename = "";
    private string font = "Cambria";

    private bool firsttitle = true;
    public bool Watermark = true;
    public bool TitoloVerbale = true;
    public bool TitoloPianificazione = false;
    public string TemplateFileCompletePath = "";
    public bool Fascicolo = false;

    private bool RiclassificatoTBD = false;
    private bool RiclassificatoAbbreviatoTBD = false;
    private bool IndiciTBD = false;
    private bool IndiciAbbreviatoTBD = false;
    private bool RiclassificatoPreliminariTBD = false;
    private bool IndiciPreliminariTBD = false;

    public bool StampaRelazioneGenerica = false;
    public bool StampaRelazioneBilancioeVigilanza = false;
    public bool StampaRelazioneBilancio = false;
    public bool StampaRelazioneVigilanza = false;
    public bool StampaTemporanea = false;
    public bool StampaLetteraIncarico = false;
    public bool StampaLetteraAttestazione = false;
    public bool StampaManagementLetter = false;
    public bool StampaCodiceEtico = false;

    public bool TabelleSenzaRigheVuote = true;
    public bool SenzaStampareTitoli = false;

    private bool RischioGlobaleTBD = false;

    public bool StampaDescrittiva = false;

    public bool checkTBD = true;

    public Hashtable htCliente = null;

    private bool afterpianificazione = false;

    private string _Cliente = "";
    private string _Sessione = "";
    private string _EsercizioAl = "";
    private string _CF = "";

    public string tipologiaBilancio = "";
    public string tipoBilancio = "";

    public string Utente = "";

    bool useWord = true;
    //bool useWord = false; // enrico

    public RTFLib()
    {
      if (freccia_dx.Equals("") || freccia_bassodx.Equals("") || freccia_basso.Equals("")
          || font.Equals("") || cell1.Equals("")) { }
      try
      {
        useWord = Properties.Settings.Default.UseWord;

      }
      catch (Exception)
      {


      }

    }



    public void SetFilename(string newvalue)
    {
      filename = newvalue;
    }

    private string ConvertInteger(string valore)
    {
      double dblValore = 0.0;

      double.TryParse(valore, out dblValore);

      if (dblValore == 0.0)
      {
        return "0";
      }
      else
      {
        return String.Format("{0:#,0}", dblValore);
      }
    }

    public void Open(Hashtable dati, string Cliente, string CodiceFiscale, string Sessione, string Titolo, bool Esercizio, bool TitoloInPrimaPagina, string idc)
    {
      _Cliente = Cliente;
      _Sessione = Sessione;
      _CF = CodiceFiscale;

      _EsercizioAl = (dati.Contains("EsercizioAl")) ? dati["EsercizioAl"].ToString() : "31/12";
      //      try
      //      {
      //  _EsercizioAl = ((new MasterFile()).GetAnagrafica(Convert.ToInt32(dati["Cliente"].ToString())))["EsercizioAl"].ToString();
      //}
      //catch (Exception ex)
      //      {
      //          string log = ex.Message;
      //          _EsercizioAl = "31/12";
      //      }


      //verifico presenza template
      FileInfo fi = new FileInfo(TemplateFileCompletePath);
      if (!fi.Exists)
      {
        App.ErrorLevel = App.ErrorTypes.Errore;
        RevisoftApplication.WindowGestioneMessaggi m = new WindowGestioneMessaggi();
        m.TipoMessaggioErrore = WindowGestioneMessaggi.TipologieMessaggiErrore.MancaPrintTemplate;
        m.VisualizzaMessaggio();
        return;
      }

      //creo template temporaneo
      filename = App.AppTempFolder + "\\" + Guid.NewGuid().ToString();

      TextReader tr = new StreamReader(TemplateFileCompletePath);
      template_text = tr.ReadToEnd();
      tr.Close();
      int inizio = template_text.IndexOf("@DL@");
      if (inizio == -1)
      {
        return;
      }

      rtf_text.Add(template_text.Substring(0, inizio) + fontSize);

      if (TitoloPianificazione)
      {
        rtf_text.Add("\\pard\\keepn\\b\\f0 \\qc \\fs40 " + Cliente + " \\fs20 \\b0 \\line \\par \n");

        rtf_text.Add("\\pard\\keepn\\b\\f0 \\line \\qc \\fs32 " + Titolo + " \\fs20 \\b0 \\line\\par \n");

        rtf_text.Add("\\pard\\keepn\\b\\f0 \\qc \\fs32 Periodo dal " + Sessione.Split('\n')[0] + " al " + Sessione.Split('\n')[1] + " \\fs20 \\b0 \\line\\line \\par \n");
      }

      if (TitoloInPrimaPagina && Watermark && !StampaRelazioneGenerica && !StampaLetteraIncarico && !StampaLetteraAttestazione && !StampaManagementLetter && !StampaCodiceEtico)
      {
        //rtf_text += "\\line\\line\\pard\\keepn\\b\\f0 \\qr " + "Azienda: " + Cliente + "\\b0 \\line\\line\\line \\par\n";

        /*if (Esercizio)
{
  rtf_text += "\\pard\\keepn\\b\\f0 \\qr " + "Esercizio di lavoro: " + Sessione + "\\b0 \\line\\line\\line \\par\n";
}
else
{
  rtf_text += "\\pard\\keepn\\b\\f0 \\qr " + "Sessione di lavoro: " + Sessione + "\\b0 \\line\\line\\line \\par\n";
}*/

        MasterFile mf = MasterFile.Create();
        XmlDataProviderManager _y = null;

        string FileRevisione = mf.GetRevisioneFromEsercizio(((dati.Count > 2) ? dati["Cliente"].ToString() : dati["ID"].ToString()), ((dati["anno"] != null) ? dati["anno"].ToString() : ((dati["Data"] != null) ? dati["Data"].ToString().Replace("01/01/", "").Replace("31/12/", "") : ((dati["DataNomina"] != null) ? dati["DataNomina"].ToString().Split('/')[2] : ""))));

        //if (FileRevisione != "" && (new FileInfo(FileRevisione)).Exists)
        if (!string.IsNullOrEmpty(FileRevisione))
        {
          _y = new XmlDataProviderManager(FileRevisione);
        }
        else
        {
          _y = null;
        }

        string RagioneSociale = "Dato Mancante: Compilare Carta di Lavoro 2.1.1";
        string Indirizzo = "";
        string REA = "";
        string CapitaleSociale = "Dato Mancante: Compilare Carta di Lavoro 2.1.5";
        cBusinessObjects.idcliente = int.Parse(idc);
        RagioneSociale = cBusinessObjects.GetRagioneSociale();
        Indirizzo = cBusinessObjects.GetIndirizzo();
        REA = cBusinessObjects.GetREA();
        CapitaleSociale = cBusinessObjects.GetCapitaleSociale();

        rtf_text.Add("\\pard\\keepn\\f0 \\line \\line \\line \\line \\line ");

        rtf_text.Add("\\trowd\\cellx9900 \\fs28\\qc\\b " + ((RagioneSociale != "") ? RagioneSociale : "Dato Mancante: Compilare Carta di Lavoro 2.1.1") + " \\b0\\fs24\\cell\\row");
        rtf_text.Add("\\trowd\\cellx9900 \\qc " + ((Indirizzo != "") ? Indirizzo : "") + " \\cell\\row");
        rtf_text.Add("\\trowd\\cellx9900 \\qc " + ((CapitaleSociale != "" && !CapitaleSociale.Contains("Dato Mancante")) ? CapitaleSociale : " \\fs28 \\b Dato Mancante: Compilare Carta di Lavoro 2.1.5 \\b0 \\fs24 ") + " \\cell\\row");
        rtf_text.Add("\\trowd\\clbrdrb\\brdrw10\\brdrs\\cellx9900 \\qc " + ((REA != "") ? REA : "") + " \\cell\\row");

        rtf_text.Add("\\par\n");

        //rtf_text += "\\pard\\keepn\\b\\f0 \\line \\line \\qc \\fs30 " + Titolo + " \\fs20 \\b0 \\line\\line\\line \\par \n";

        //rtf_text += "\\pard\\keepn\\b\\f0 \\qc \\fs40 " + Cliente + " \\fs20 \\b0 \\line\\line\\line \\par \n";

        /*MM sostituito con quello sotto
                rtf_text.Add("\\pard\\keepn\\b\\f0 \\ql \\fs20 \\line \\line \\line \\line \\line \\line \\line \\line \\line \\line "+
                  "\\line \\line \\line \\line \\line \\trowd\\cellx9900 \\fs36\\qc\\b FASCICOLO " +
                  ((dati.Count > 2) ? Titolo : "DELLE CARTE DI LAVORO DELLA REVISIONE") +
                  " \\b0\\fs24\\cell\\row \\line \\line \\trowd\\cellx9900 \\fs28\\qc\\b "
                  + ((Sessione.Contains(NEW_LINE))
                    ? Sessione.Replace(NEW_LINE, "/").Replace("/Incarico", "").Replace("/Riesame", "") : "ESERCIZIO " + Sessione) +
                  " \\b0\\fs24\\cell\\row \\line\\line \\line \\line \\line \\line \\line \\line \\line \\fs36 Revisore: " +
                  Utente + " \\fs20 \\b0 \\line\\line\\line \\page \\par \n");

        */
        rtf_text.Add("\\pard\\keepn\\b\\f0 \\ql \\fs20 \\line \\line \\line \\line \\line \\line \\line \\line \\line \\line " +
               "\\line \\line \\line \\line \\line \\trowd\\cellx9900 \\fs36\\qc\\b FASCICOLO " +
               ((dati.Count > 2) ? Titolo : "DELLE CARTE DI LAVORO DELLA REVISIONE") + "\\b0\\fs24\\cell\\row");

        rtf_text.Add("\\pard \\line \\line \\trowd\\cellx9900 \\fs28\\qc\\b "
               + ((Sessione.Contains(NEW_LINE))
                 ? Sessione.Replace(NEW_LINE, "/").Replace("/Incarico", "").Replace("/Riesame", "") : "ESERCIZIO " + Sessione));

        rtf_text.Add("\\pard \\line \\line \\line \\line \\trowd\\cellx9900 \\fs36\\qc\\b Revisore: " +
            Utente + "\\b0\\fs24\\cell\\row \\line \\line");
        rtf_text.Add("(##TOC##)");

      }

      if (StampaLetteraIncarico)
      {
        rtf_text.Add("\\pard\\keepn\\b\\f0 \\ql \\fs24 " + "Lettera di incarico per la revisione legale" + " \\b0 \\par\n");
        rtf_text.Add("\\line\\pard\\keepn\\i\\f0 \\ql \\fs24 " + "___(Indirizzo alla società)___ - ___(rappresentante legale)___" + " \\i0 \\par\n \\line ");
      }

      if (StampaCodiceEtico)
      {
        rtf_text.Add("\\pard\\keepn\\b\\f0 \\qc \\fs24 " + "Codice Etico" + " \\b0 \\par\n");
      }

      if (TitoloVerbale && !Watermark && !StampaRelazioneGenerica && !StampaTemporanea && !StampaLetteraIncarico && !StampaLetteraAttestazione && !StampaManagementLetter && !StampaCodiceEtico)
      {
        rtf_text.Add("\\line\\line\\pard\\keepn\\b\\f0 \\ql " + "VERBALE DI VERIFICA PERIODICA DEL ");

        string RevisoreSindacoUnico = "";

        if (dati.Contains("Composizione"))
        {
          switch ((App.TipoIncaricoComposizione)(Convert.ToInt32(dati["Composizione"].ToString())))
          {
            case App.TipoIncaricoComposizione.CollegioSindacale:
              rtf_text.Add("COLLEGIO SINDACALE");
              break;
            case App.TipoIncaricoComposizione.Revisore:
              rtf_text.Add("REVISORE");
              RevisoreSindacoUnico = "REVISORE";
              break;
            case App.TipoIncaricoComposizione.SindacoUnico:
              rtf_text.Add("SINDACO UNICO");
              RevisoreSindacoUnico = "SINDACO UNICO";
              break;
            default:
              break;
          }
        }

        rtf_text.Add(" \\b0 \\par\n");

        string riga = "";

        if (dati.Contains("Data"))
        {
          riga += " \\line \\line Sessione rientrante nel periodo pianificato: " + dati["Data"].ToString() + " ";
        }

        if (dati.Contains("Data"))
        {
          riga += " \\line \\line Data di competenza della sessione: " + dati["Data"].ToString() + " ";
        }

        if (dati.Contains("DataEsecuzione") && dati.Contains("Inizio"))
        {
          riga += " \\line \\line Inizio svolgimento della sessione il " + dati["DataEsecuzione"].ToString() + " alle ore " + dati["Inizio"].ToString();
        }

        //if ( dati.Contains( "Inizio" ) )
        //{
        //    riga += " \\line \\line Orario inizio seduta: " + dati["Inizio"].ToString() + " ";
        //}

        if (dati.Contains("Luogo"))
        {
          riga += " \\line \\line Luogo di svolgimento: " + dati["Luogo"].ToString() + " ";
        }

        riga += " \\line \\line Presenti alla verifica periodica disposta dalle vigenti norme di legge: \\line \\line ";

        if (dati.Contains("Composizione") && dati["Composizione"].ToString() == "0")
        {
          if (dati.Contains("Presidente") && dati["Presidente"].ToString() != "")
          {
            riga += "PRESIDENTE\\tab\\tab\\tab " + dati["Presidente"].ToString() + " \\line ";
          }

          if (dati.Contains("Sindaco1") && dati["Sindaco1"].ToString() != "")
          {
            riga += "SINDACO EFFETTIVO\\tab\\tab " + dati["Sindaco1"].ToString() + " \\line ";
          }

          if (dati.Contains("Sindaco2") && dati["Sindaco2"].ToString() != "")
          {
            riga += "SINDACO EFFETTIVO\\tab\\tab " + dati["Sindaco2"].ToString() + " \\line ";
          }
        }
        else
        {
          if (dati.Contains("Revisore") && dati["Revisore"].ToString() != "")
          {
            riga += RevisoreSindacoUnico + "\\tab\\tab\\tab " + dati["Revisore"].ToString() + " \\line ";
          }
        }

        if (dati.Contains("AssisitoDa") && dati["AssisitoDa"].ToString() != "")
        {
          riga += " \\line \\line Assiste alla verifica: " + dati["AssisitoDa"].ToString() + " \\line ";
        }

        riga += " \\line " + "Si procede alla verifica come di seguito indicato:" + " \\line ";

        rtf_text.Add("\\pard\\keepn\\f0 \\ql " + riga + " \\par");
      }
    }

    ArrayList TitoliInHeader = new ArrayList();

    public void AddTitleLetteraIncarico(string title, bool newpage)
    {
      rtf_text.Add("\\trowd\\clbrdrb\\brdrw10\\brdrs\\cellx8800 \\i \\ql " + title + "\\i0 \\cell\\row \\line");
    }

    bool verbaledacompletare = false;

    public void AddTitleDaCompletare()
    {
      rtf_text.Add("\\trowd\\clbrdrb\\brdrw10\\brdrs\\cellx8800 \\f0 \\i \\ql " + "Carte di Lavoro DA COMPLETARE" + "\\i0 \\cell\\row \\line");
      verbaledacompletare = true;
    }

    public void AddTitleLetteraAttestazione(string title, bool newpage)
    {
      rtf_text.Add("\\trowd\\clbrdrb\\brdrw10\\brdrs\\cellx8800 \\i \\ql " + title + "\\i0 \\cell\\row \\line");
    }

    bool alreadyset = false;

    public void AddTitle(string title, bool newpage)
    {
      string partial_rtf_text = "";

      if (title.Contains("95.100 "))
      {
        //partial_rtf_text += "\\line\\line \\pard \\b\\f0\\fs24 A) Relazione di revisione ai sensi dell\\rquote art. 14 del D. Lgs. 27 gennaio 2010, n. 39\\par \\line \\pard \\qj \\b0 L'organo di controllo ha svolto la revisione del bilancio in oggetto costituito dallo Stato Patrimoniale, dal Conto Economico" + ((tipologiaBilancio == "Ordinario" || tipologiaBilancio == "") ? ", dal Rendiconto Finanziario" : "") + " e dalla Nota Integrativa.\\par \\pard \\line \\line \\b Relazione sul bilancio \\b0 \\line \\line \\par";
        partial_rtf_text += "\\line\\line \\pard \\b\\f0\\fs24 A) Relazione del revisore indipendente ex art. 14 del D. Lgs. 27/01/2010, n. 39\\par \\line \\pard \\qc \\b0  \\b Relazione sulla revisione contabile del bilancio di esercizio \\b0 \\line \\line \\par";
      }

      if (title.Contains("95.300 "))
      {
        partial_rtf_text += " \\pard \\b\\f0\\fs24 B) Relazione sull\\rquote attivit\\'e0 di vigilanza ai sensi dell\\rquote art. 2429, 2\\'b0 comma, Cod. Civ.\\par \\line \\pard \\qj \\b0 Nel corso dell'esercizio l'attività dell'Organo di controllo è stata ispirata alle disposizioni di legge ed alle norme di comportamento del Collegio sindacale emanate dal Consiglio Nazionale dei Dottori Commercialisti e degli Esperti Contabili. \\line \\par";
      }

      if (title.Contains("95.306 ") || title.Contains("93.6 "))
      {
        partial_rtf_text += " \\pard \\b B1 - Attività di vigilanza ex art. 2403 e segg. Cod. Civ. \\b0\\par \\line \\line \\pard \\qj In adempimento ai doveri imposti dall'art. 2403 del Codice Civile, l'Organo di controllo ha svolto le seguenti attività di vigilanza.\\par \\line \\line";
      }

      if (title.Contains("95.311 ") || title.Contains("93.11 "))
      {
        partial_rtf_text += " \\pard \\b B2 - Bilancio \\b0\\par \\line";
      }

      if (alreadyset == true && (title.Contains("91.61 ") || title.Contains("91.61.11 ") || title.Contains("95.161 ") || title.Contains("95.161.11 ")))
      {
        return;
      }

      if (SenzaStampareTitoli == true)
      {
        return;
      }

      if (!newpage)
      {
        firsttitle = true;
      }

      //if (firsttitle)
      //{
      //    firsttitle = false;
      //}
      //else
      //{
      //    //andrea
      //    partial_rtf_text += Watermark ? "\\page" : "";
      //}

      if (Watermark && !StampaRelazioneGenerica && !StampaLetteraIncarico && !StampaLetteraAttestazione && !StampaManagementLetter && !StampaCodiceEtico)
      {
        if (useWord)
        {
          string wVersione = "-1";

          cDocNet wrdDoc = new cDocNet();
          wVersione = wrdDoc.Versione();

          if (Convert.ToInt32(wVersione) >= 14)
          {
            rtf_text_TOC += " \\trowd ";

            if (!title.Contains("."))
            {
              rtf_text_TOC += " \\clvertalc\\cellx10000 ";
            }
            else
            {
              rtf_text_TOC += " \\clvertalc\\cellx400\\clvertalc\\cellx10000 \\cell ";
            }

            rtf_text_TOC += "" + title + " \\cell\\row ";


            if (!TitoliInHeader.Contains("INDICE"))
            {
              TitoliInHeader.Add("INDICE");
            }

            if (!TitoliInHeader.Contains(title))
            {
              TitoliInHeader.Add(title);
            }
          }
        }
        else
        {
          rtf_text_TOC += " \\trowd ";

          if (!title.Contains("."))
          {
            rtf_text_TOC += " \\clvertalc\\cellx10000 ";
          }
          else
          {
            rtf_text_TOC += " \\clvertalc\\cellx400\\clvertalc\\cellx10000 \\cell ";
          }

          rtf_text_TOC += "" + title + " \\cell\\row ";


          if (!TitoliInHeader.Contains("INDICE"))
          {
            TitoliInHeader.Add("INDICE");
          }

          if (!TitoliInHeader.Contains(title))
          {
            TitoliInHeader.Add(title);
          }
        }
      }


      //partial_rtf_text += "\\pard\\keepn" + ((newpage && !firsttitle && !TitoloVerbale && !Fascicolo) ? "\\page" : "") + "\\b\\f0\\ql " + "{\\field{\\*\\fldinst HYPERLINK \"http://www.google.com/\"}{\\fldrslt " + title + "}}" + "\\b0 \\line \\par\n";
      //partial_rtf_text += "\\pard\\keepn" + ((newpage && !firsttitle && !TitoloVerbale && !Fascicolo) ? "\\page" : "") + "\\b\\f0\\ql " + "{\\rtlch\\fcs1 \\ab\\af0 \\ltrch\\fcs0 \\cs16\\insrsid1515977 " + title + "}{\\rtlch\\fcs1 \\ab\\af0 \\ltrch\\fcs0 \\cs16\\b\\insrsid1728082 }" + "\\b0 \\line \\par\n";
      if (!StampaRelazioneGenerica && !StampaLetteraIncarico && !StampaCodiceEtico && !StampaLetteraAttestazione && !StampaManagementLetter || title.Contains("91.61 ") || title.Contains("91.61.11 ") || title.Contains("95.161 ") || title.Contains("95.161.11 "))
      {
        if (alreadyset == false && (title.Contains("91.61 ") || title.Contains("91.61.11 ") || title.Contains("95.161 ") || title.Contains("95.161.11 ")))
        {
          title = "Relazione su altre disposizioni di legge e regolamentari";
          alreadyset = true;
        }

        partial_rtf_text += "\\pard\\keepn" + ((newpage && !firsttitle && !TitoloVerbale && !Fascicolo) ? "\\page" : "") + "\\b\\f0\\ql " + title + "\\b0 \\line \\par\n";
      }

      if (newpage && firsttitle && !StampaRelazioneGenerica && !StampaLetteraIncarico && !StampaLetteraAttestazione && !StampaManagementLetter && !StampaCodiceEtico)
      {
        firsttitle = false;
      }

      rtf_text.Add(partial_rtf_text);

    }

    public bool AddCheck(XmlNode nodeTree)
    {
      XmlNode nodeData = null;
      if (checkTBD)
      {
        switch (nodeTree.Attributes["ID"].Value)
        {
          case "139": //Riclassificato
          case "2016139": //Riclassificato
            if (!RiclassificatoPreliminariTBD)
            {
              return false;
            }
            break;
          case "206": //Riclassificato
            if (!RiclassificatoTBD)
            {
              return false;
            }
            break;
          case "219": //Riclassificato Abbreviato
            if (!RiclassificatoAbbreviatoTBD)
            {
              return false;
            }
            break;
          case "140": //Indici
          case "2016140": //Riclassificato
            if (!IndiciPreliminariTBD)
            {
              return false;
            }
            break;
          case "207": //Indici
            if (!IndiciTBD)
            {
              return false;
            }
            break;
          case "220": //Indici Abbreviato
            if (!IndiciAbbreviatoTBD)
            {
              return false;
            }
            break;
          case "22": //Rischio Globale
            if (!RischioGlobaleTBD)
            {
              return false;
            }
            break;
          case "202":
            if (nodeData.SelectNodes("/Dati//Dato[@ID='202']/Valore").Count < 1)
            {
              return false;
            }
            break;
          default:
            break;
        }
      }

      return true;
    }

    public bool PageToBeInserted = false;
    int counterFieldindex = 1;
    public bool itwasatext = false;

    public void Add(XmlNode nodeTree, string Cliente, string Tree, string Sessione, string nomefile)
    {


      idcliente = int.Parse(Cliente);
      idsessione = int.Parse(Sessione);
      idtree = int.Parse(Tree);


      itwasatext = false;

      if (checkTBD && Tree != "23")
      {
        switch (nodeTree.Attributes["ID"].Value)
        {
          case "139": //Riclassificato
          case "2016139": //Riclassificato
            if (!RiclassificatoPreliminariTBD && Tree != "4")
            {
              return;
            }
            break;
          case "206": //Riclassificato
            if (!RiclassificatoTBD && Tree != "4")
            {
              return;
            }
            break;
          case "219": //Riclassificato Abbreviato
            if (!RiclassificatoAbbreviatoTBD && Tree != "4")
            {
              return;
            }
            break;
          case "140": //Indici
          case "2016140": //Indici
            if (!IndiciPreliminariTBD && Tree != "4")
            {
              return;
            }
            break;
          case "207": //Indici
            if (!IndiciTBD && Tree != "4")
            {
              return;
            }
            break;
          case "220": //Indici Abbreviato
            if (!IndiciAbbreviatoTBD && Tree != "4")
            {
              return;
            }
            break;
          case "22": //Rischio Globale
            if (!RischioGlobaleTBD && Tree == "4")
            {
              return;
            }
            break;
          case "202": //MM2 cicli TO DO 
                      //  if (nodeData.SelectNodes("/Dati//Dato[@ID='202']/Valore").Count < 1)
                      //    {
                      //                 return;
                      //         break;
          default:
            break;
        }
      }

      //Titolo
      string StrToAdd = "";

      string partial_rtf_text = "";

      //if ( PageToBeInserted  ) //&& !Fascicolo
      //{
      //    PageToBeInserted = false;
      //    partial_rtf_text += " \\page ";
      //}

      string tmp_rtf_text_TOC = "";

      if (Watermark && !StampaRelazioneGenerica && !StampaLetteraIncarico && !StampaLetteraAttestazione && !StampaManagementLetter && !StampaCodiceEtico)
      {
        StrToAdd += "Carta di lavoro: ";

        string wVersione = "-1";
        if (useWord)
        {


          cDocNet wrdDoc = new cDocNet();
          wVersione = wrdDoc.Versione();

          if (Convert.ToInt32(wVersione) >= 14)
          {
            StrToAdd += "{\\bkmkstart titolo" + counterFieldindex.ToString() + "}{\\bkmkend titolo" + counterFieldindex.ToString() + "}";

            tmp_rtf_text_TOC += " \\trowd ";

            if (nodeTree.Attributes["Codice"].Value.Contains("."))
            {
              for (int i = 0; i < (nodeTree.Attributes["Codice"].Value.Split('.')).Length - 1; i++)
              {
                tmp_rtf_text_TOC += " \\clvertalc\\cellx" + ((i + 1) * 400).ToString() + " ";
              }
            }

            tmp_rtf_text_TOC += " \\clvertalc\\cellx9200\\clvertalc\\cellx10000 "; //\\clbrdrb\\brdrdot

            if (nodeTree.Attributes["Codice"].Value.Contains("."))
            {
              for (int i = 0; i < (nodeTree.Attributes["Codice"].Value.Split('.')).Length - 1; i++)
              {
                tmp_rtf_text_TOC += " \\cell ";
              }
            }

            tmp_rtf_text_TOC += nodeTree.Attributes["Codice"].Value + " " + nodeTree.Attributes["Titolo"].Value + " \\cell " + "pag. {\\field \\flddirty {\\*\\fldinst PAGEREF titolo" + counterFieldindex.ToString() + "}}" + " \\cell\\row ";
          }

        }
        else
        {
          StrToAdd += "{\\bkmkstart titolo" + counterFieldindex.ToString() + "}{\\bkmkend titolo" + counterFieldindex.ToString() + "}";

          tmp_rtf_text_TOC += " \\trowd ";

          if (nodeTree.Attributes["Codice"].Value.Contains("."))
          {
            for (int i = 0; i < (nodeTree.Attributes["Codice"].Value.Split('.')).Length - 1; i++)
            {
              tmp_rtf_text_TOC += " \\clvertalc\\cellx" + ((i + 1) * 400).ToString() + " ";
            }
          }

          tmp_rtf_text_TOC += " \\clvertalc\\cellx9200\\clvertalc\\cellx10000 "; //\\clbrdrb\\brdrdot

          if (nodeTree.Attributes["Codice"].Value.Contains("."))
          {
            for (int i = 0; i < (nodeTree.Attributes["Codice"].Value.Split('.')).Length - 1; i++)
            {
              tmp_rtf_text_TOC += " \\cell ";
            }
          }

          //tmp_rtf_text_TOC += nodeTree.Attributes["Codice"].Value + " " + nodeTree.Attributes["Titolo"].Value + " \\cell " + "pag. {\\field \\flddirty {\\*\\fldinst PAGEREF titolo" + counterFieldindex.ToString() + "}}" + " \\cell\\row ";    //riga di Enrico
          tmp_rtf_text_TOC += nodeTree.Attributes["Codice"].Value + " " + nodeTree.Attributes["Titolo"].Value + " \\cell \\cell\\row ";
        }
      }

      //Titolo
      string title_partial_rtf_text = "";

      if (!StampaRelazioneGenerica && !StampaLetteraIncarico && !StampaLetteraAttestazione && !StampaManagementLetter && !StampaCodiceEtico)
      {
        StrToAdd += "\\fs20 " + nodeTree.Attributes["Codice"].Value + " " + nodeTree.Attributes["Titolo"].Value + " \\fs20 ";

        title_partial_rtf_text += "\\pard\\keepn\\b\\f0 " + StrToAdd + "\\b0 \\line \\par\n";

      }

      //Istruzioni prima di tutto
      string note_partial_rtf_text = "";
      if (nodeTree.Attributes["Nota"] != null && StampaRelazioneGenerica == false && StampaLetteraIncarico == false && StampaLetteraAttestazione == false && StampaManagementLetter == false && StampaCodiceEtico == false)
      {
        string istruzione = nodeTree.Attributes["Nota"].Value;

        if (istruzione.Trim() != "" && istruzione.Contains("ASSERZIONI"))
        {
          int positionasserzioni = istruzione.IndexOf("ASSERZIONI");
          //int positionSTARTasserzioni = istruzione.IndexOf("\r\n", positionasserzioni);
          int positionSTARTasserzioni = istruzione.IndexOf(NEW_LINE, positionasserzioni);
          int positionENDasserzioni = istruzione.IndexOf("<P class=MsoNormal", positionSTARTasserzioni);

          istruzione = istruzione.Substring(positionSTARTasserzioni, positionENDasserzioni - positionSTARTasserzioni);

          //istruzione = istruzione.Replace("</P>", "  \\line ");
          //istruzione = istruzione.Replace("</BR>", "  \\line ");
          //istruzione = istruzione.Replace("</p>", "  \\line ");
          //istruzione = istruzione.Replace("</br>", "  \\line ");

          istruzione = istruzione.Replace("</P>", "  ");
          istruzione = istruzione.Replace("</BR>", "  ");
          istruzione = istruzione.Replace("</p>", "  ");
          istruzione = istruzione.Replace("</br>", " ");

          while (istruzione.IndexOf('<') != -1)
          {
            int inizio = istruzione.IndexOf('<');
            int fine = istruzione.IndexOf('>');

            if (inizio == -1 || fine == -1)
            {
              break;
            }
            else
            {
              istruzione = istruzione.Remove(inizio, fine - inizio + 1);
            }
          }

          istruzione = istruzione.Replace("–", "").Replace("·", "-").Replace("&egrave;", "è")
            .Replace("&agrave;", "à").Replace("&igrave;", "ì").Replace("&ograve;", "ò")
            .Replace("&ugrave;", "ù").Replace("&nbsp;", " ").Replace(NEW_LINE, "  \\line ");

          if (istruzione.Trim() != "")
          {
            note_partial_rtf_text += "\\pard\\keepn\\f0 \\fs20 \\trowd\\clbrdrl\\brdrw10\\brdrs\\clbrdrt\\brdrw10\\brdrs\\clbrdrb\\brdrw10\\brdrs\\cellx100\\clbrdrt\\brdrw10\\brdrs\\clbrdrr\\brdrw10\\brdrs\\clbrdrb\\brdrw10\\brdrs\\cellx9900 \\cell \\b ASSERZIONI \\b0 \\line" + istruzione + " \\cell\\row  \\fs20\\par";
          }
        }

        if (istruzione.Trim() != "" && (istruzione.Contains("legge 13/08/2010 n.136") || istruzione.Contains("Esiste indipendenza finanziaria qualora (S + C)/CT = = 5%")))
        {
          //istruzione = istruzione.Replace("</P>", "  \\line ");
          //istruzione = istruzione.Replace("</BR>", "  \\line ");
          //istruzione = istruzione.Replace("</p>", "  \\line ");
          //istruzione = istruzione.Replace("</br>", "  \\line ");

          istruzione = istruzione.Replace("</P>", "  ");
          istruzione = istruzione.Replace("</BR>", "  ");
          istruzione = istruzione.Replace("</p>", "  ");
          istruzione = istruzione.Replace("</br>", " ");

          while (istruzione.IndexOf('<') != -1)
          {
            int inizio = istruzione.IndexOf('<');
            int fine = istruzione.IndexOf('>');

            if (inizio == -1 || fine == -1)
            {
              break;
            }
            else
            {
              istruzione = istruzione.Remove(inizio, fine - inizio + 1);
            }
          }

          istruzione = istruzione.Replace("–", "").Replace("= =", "<=").Replace("&gt;", ">")
            .Replace("&lt;", "<").Replace("·", "-").Replace("&egrave;", "è").Replace("&agrave;", "à")
            .Replace("&igrave;", "ì").Replace("&ograve;", "ò").Replace("&ugrave;", "ù")
            .Replace("&nbsp;", " ").Replace(NEW_LINE, "  \\line ");

          if (istruzione.Trim() != "")
          {
            note_partial_rtf_text += "\\pard\\keepn\\f0 \\fs20 \\trowd\\clbrdrl\\brdrw10\\brdrs\\clbrdrt\\brdrw10\\brdrs\\clbrdrb\\brdrw10\\brdrs\\cellx100\\clbrdrt\\brdrw10\\brdrs\\clbrdrr\\brdrw10\\brdrs\\clbrdrb\\brdrw10\\brdrs\\cellx9900 \\cell " + istruzione + " \\cell\\row  \\fs20\\par";
          }
        }
      }

      //Contenuto
      string contenuto_partial_rtf_text = "";

      if ((nodeTree.Attributes["ID"].Value == "100013" && Tree == "26") || nodeTree.Attributes["ID"].Value == "100003" && Tree == "27")
      {
        contenuto_partial_rtf_text += AddPianificazione(nodeTree.Attributes["ID"].Value);
      }
      else
      {
        switch (nodeTree.Attributes["Tipologia"].Value)
        {
          case "Testo":
            if (nodeTree.Attributes["Titolo"].Value == "Discussioni del team" || nodeTree.Attributes["Titolo"].Value == "Discussioni tra sindaci")
            {
              contenuto_partial_rtf_text += AddDiscussione(nodeTree);
            }
            else
            {
              itwasatext = true;
              contenuto_partial_rtf_text += AddTesto(nodeTree);
            }
            break;
          case "Relazione: Testo proposto a Scelta Multipla":
            contenuto_partial_rtf_text += AddTestoProposto(nodeTree);
            break;
          case "Relazione: Testo proposto a Scelta Multipla non esclusiva":
            contenuto_partial_rtf_text += AddTestoPropostoNonEsclusivo(nodeTree);
            break;
          case "Relazione: Errori Rilevati":
            contenuto_partial_rtf_text += AddRelazioneErroriRilevati(nodeTree, nodeTree.Attributes["ID"].Value);
            break;
          case "Relazione: Destinatari e Bilancio":
            contenuto_partial_rtf_text += AddDestinatariBilancio(nodeTree, nodeTree.Attributes["ID"].Value);
            break;
          case "Tabella":
            contenuto_partial_rtf_text += AddTabella(nodeTree);
            break;
          case "Relazione: Luogo Data e Firma":
            contenuto_partial_rtf_text += LuogoEData(nodeTree, nodeTree.Attributes["ID"].Value);
            break;
          case "Tabella Replicabile":
            contenuto_partial_rtf_text += AddTabellaReplicabile(nodeTree);
            break;
          case "Check List con Risultato":
          case "Check List":
            contenuto_partial_rtf_text += AddCheckList(nodeTree);
            break;
          case "Check List +":
         case "Check List + 6_1":
            contenuto_partial_rtf_text += AddCheckListpiu(nodeTree);
            break;
          case "Nodo Multiplo":
          case "Nodo Multiplo Orizzontale":
            contenuto_partial_rtf_text += AddNodoMultiplo(nodeTree);
            break;
          case "Excel: Numeri Casuali":
            contenuto_partial_rtf_text += AddNumeriCasuali(nodeTree, nodeTree.Attributes["ID"].Value);
            break;
          case "Excel: Capitale Sociale":
            contenuto_partial_rtf_text += AddCapitaleSociale(nodeTree);
            break;
          case "Excel: Versamento imposte e contributi":
            contenuto_partial_rtf_text += AddVersamentoImposteContributi(nodeTree, nodeTree.Attributes["ID"].Value);
            break;
          case "Excel: Compensazioni":
            contenuto_partial_rtf_text += AddCompensazioni(nodeTree, nodeTree.Attributes["ID"].Value);
            break;
          case "Excel: Sospesi di Cassa":
            contenuto_partial_rtf_text += AddSospesidiCassa(nodeTree, nodeTree.Attributes["ID"].Value);
            break;
          case "Excel: Cassa Titoli":
            contenuto_partial_rtf_text += AddCassaTitoli(nodeTree, nodeTree.Attributes["ID"].Value);
            break;
          case "Excel: Cassa Assegni":
            contenuto_partial_rtf_text += AddCassaAssegni(nodeTree, nodeTree.Attributes["ID"].Value);
            break;
          case "Excel: Cassa Contante":
            contenuto_partial_rtf_text += AddCassaContante(nodeTree, nodeTree.Attributes["ID"].Value);
            break;
          case "Excel: Cassa Valori Bollati":
            contenuto_partial_rtf_text += AddCassaValoriBollati(nodeTree, nodeTree.Attributes["ID"].Value);
            break;
          case "Excel: Riconciliazioni Banche":
            contenuto_partial_rtf_text += AddRiconciliazioni(nodeTree, nodeTree.Attributes["ID"].Value);
            break;
          case "Excel: Materialità SP + CE":
            contenuto_partial_rtf_text += AddMaterialitaIpotesiUnificate(nodeTree, nodeTree.Attributes["ID"].Value, true); //AddMaterialitaIpotesi1(nodeTree,  nodeTree.Attributes["ID"].Value);
            break;
          case "Excel: Materialità SP e CE":
            contenuto_partial_rtf_text += AddMaterialitaIpotesi2(nodeTree, nodeTree.Attributes["ID"].Value);
            break;
          case "Excel: Materialità Personalizzata":
            contenuto_partial_rtf_text += AddMaterialitaIpotesiUnificate(nodeTree, nodeTree.Attributes["ID"].Value, false); //AddMaterialitaIpotesi3(nodeTree,  nodeTree.Attributes["ID"].Value);
            break;
          case "Excel: Affidamenti Bancari":
            contenuto_partial_rtf_text += AddAffidamenti(nodeTree, nodeTree.Attributes["ID"].Value);
            break;
          case "Excel: Errori Rilevati Riepilogo New":
            contenuto_partial_rtf_text += AddRiepilogoErroriRilevati(nodeTree, nodeTree.Attributes["ID"].Value);
            contenuto_partial_rtf_text += AddRiepilogoErroriRilevatiNN(nodeTree, nodeTree.Attributes["ID"].Value, nomefile);
            break;
          case "Excel: Errori Rilevati Riepilogo":
          case "Excel: Sommario Rettifiche":
            contenuto_partial_rtf_text += AddRiepilogoErroriRilevati(nodeTree, nodeTree.Attributes["ID"].Value);
            break;
          case "Excel: Errori Rilevati Riepilogo NN":
            contenuto_partial_rtf_text += AddRiepilogoErroriRilevatiNN(nodeTree, nodeTree.Attributes["ID"].Value, nomefile);
            break;
          case "Excel: Bilancio Riclassificato":
          case "Excel: Bilancio Abbreviato Riclassificato":
            contenuto_partial_rtf_text += AddBilancioRiclassificato(nodeTree, nodeTree.Attributes["ID"].Value);
            break;
          case "Dichiarazione_redditi_6_1":
            contenuto_partial_rtf_text += AddDichiarazione_redditi_6_1(nodeTree, nodeTree.Attributes["ID"].Value);
            break;
          case "Excel: Bilancio Indici":
            contenuto_partial_rtf_text += AddBilancioIndici(nodeTree, nodeTree.Attributes["ID"].Value);
            break;
          case "Excel: Bilancio Abbreviato Indici":
            contenuto_partial_rtf_text += AddBilancioAbbreviatoIndici(nodeTree, nodeTree.Attributes["ID"].Value);
            break;
          case "Excel: Dipendenza Finanziaria":
            contenuto_partial_rtf_text += AddDipendenzaFinanziaria(nodeTree);
            break;
          case "Excel: Pianificazione":
            contenuto_partial_rtf_text += AddPianificazione(nodeTree);
            break;
          case "Excel: PianificazioneNew":
            if (RischioGlobaleAlreadyPrinted != true)
            {
              contenuto_partial_rtf_text += AddRischioGlobale(nodeTree, nodeTree.Attributes["ID"].Value, false);
            }

            if (nodeTree.Attributes["ID"].Value == "274")
            {
              contenuto_partial_rtf_text += AddPianificazioneNewWithDetails(nodeTree, nodeTree.Attributes["ID"].Value);
            }
            else
            {
              contenuto_partial_rtf_text += AddPianificazioneNew(nodeTree, nodeTree.Attributes["ID"].Value);
            }
            break;
          case "Excel: Compensi e Risorse":
            contenuto_partial_rtf_text += AddCompensiERisorse(nodeTree);
            break;
          case "Excel: Tempi di Revisione":
            if (Tree == "28")
            {
              if (nodeTree.Attributes["ID"].Value == "168" || nodeTree.Attributes["ID"].Value == "169" || nodeTree.Attributes["ID"].Value == "171")
              {
                contenuto_partial_rtf_text += AddISQC_Incaricati(nodeTree, nodeTree.Attributes["ID"].Value);
              }
              else if (nodeTree.Attributes["ID"].Value == "186")
              {
                contenuto_partial_rtf_text += AddISQC_TempiLavoro_Riepilogo(nodeTree, nodeTree.Attributes["ID"].Value);
              }
              else
              {
                contenuto_partial_rtf_text += AddISQC_TempiLavoro(nodeTree, nodeTree.Attributes["ID"].Value);
              }
            }
            else
            {
              contenuto_partial_rtf_text += AddTempiRevisione(nodeTree);
            }
            break;
          case "Excel: Confronto Materialità":
            contenuto_partial_rtf_text += AddConfrontoMaterialita(nodeTree, nodeTree.Attributes["ID"].Value, nomefile);
            break;

          case "Excel: F24":
            contenuto_partial_rtf_text += AddF24(nodeTree, nodeTree.Attributes["ID"].Value);
            break;

          case "Excel: COGE":
            contenuto_partial_rtf_text += AddCOGE(nodeTree, nodeTree.Attributes["ID"].Value);
            break;

          case "Ritenute Lavoratori Autonomi":
            contenuto_partial_rtf_text += AddRLA(nodeTree, nodeTree.Attributes["ID"].Value);
            break;

          case "Excel: Uniemens":
            contenuto_partial_rtf_text += AddUniemens(nodeTree, nodeTree.Attributes["ID"].Value);
            break;

          case "Excel: Contributi Agenti":
            contenuto_partial_rtf_text += AddContributiAgenti(nodeTree, nodeTree.Attributes["ID"].Value);
            break;

          case "Excel: CUD":
            contenuto_partial_rtf_text += AddCUD(nodeTree, nodeTree.Attributes["ID"].Value);
            break;

          case "Excel: Rifiuti":
            contenuto_partial_rtf_text += AddRifiuti(nodeTree, nodeTree.Attributes["ID"].Value);//nodeTree.Attributes["ID"].Value);
            break;

          case "Excel: ScrittureMagazzino":
            contenuto_partial_rtf_text += AddScrittureMagazzino(nodeTree, nodeTree.Attributes["ID"].Value);//nodeTree.Attributes["ID"].Value);
            break;

          case "Excel":
            if (nodeTree.Attributes["ID"].Value == "327" && Tree == "4")
            {
              contenuto_partial_rtf_text += AddConsolidatoScope(nodeTree, nodeTree.Attributes["ID"].Value);
            }
            else if (nodeTree.Attributes["ID"].Value == "316" && Tree == "4")
            {
              contenuto_partial_rtf_text += AddConsolidatoReportistica(nodeTree, nodeTree.Attributes["ID"].Value);
            }
            else if (nodeTree.Attributes["ID"].Value == "315" && Tree == "4")
            {
              contenuto_partial_rtf_text += AddConsolidatoIstruzioni(nodeTree, nodeTree.Attributes["ID"].Value);
            }
            else if (nodeTree.Attributes["ID"].Value == "313" && Tree == "4")
            {
              contenuto_partial_rtf_text += ComponentiConsolidato(nodeTree, nodeTree.Attributes["ID"].Value);
            }
            else if (nodeTree.Attributes["ID"].Value == "202")
            {
              contenuto_partial_rtf_text += AddCicli(nodeTree, nodeTree.Attributes["ID"].Value);
            }
            else if (nodeTree.Attributes["ID"].Value == "22" && Tree == "1")
            {
              RischioGlobaleAlreadyPrinted = true;
              contenuto_partial_rtf_text += AddRischioGlobale(nodeTree, nodeTree.Attributes["ID"].Value, true);
            }
            else if ((nodeTree.Attributes["ID"].Value == "160" || nodeTree.Attributes["ID"].Value == "2016160") && Tree == "3")
            {
              contenuto_partial_rtf_text += AddLetteraIncarico_Personale(nodeTree, nodeTree.Attributes["ID"].Value);
            }
            else if ((nodeTree.Attributes["ID"].Value == "161" || nodeTree.Attributes["ID"].Value == "2016161") && Tree == "3")
            {
              contenuto_partial_rtf_text += AddLetteraIncarico_TempiCorrispettivi(nodeTree, nodeTree.Attributes["ID"].Value);
            }
            else if ((nodeTree.Attributes["ID"].Value == "162" || nodeTree.Attributes["ID"].Value == "2016162") && Tree == "3")
            {
              contenuto_partial_rtf_text += AddLetteraIncarico_Pagamenti(nodeTree, nodeTree.Attributes["ID"].Value);
            }
            break;
          default:
            break;
        }
      }

      //Osservazioni
      string osservazioni_partial_rtf_text = "";

      DataRow nodeDataosservazioni = null;
      DataTable datiosservazioni = cBusinessObjects.GetData(int.Parse(nodeTree.Attributes["ID"].Value), typeof(Osservazioni), idcliente, idsessione, idtree);
      foreach (DataRow dt in datiosservazioni.Rows)
      {
        nodeDataosservazioni = dt;
      }


      if (nodeDataosservazioni != null && nodeDataosservazioni["OsservazioniTxt"].ToString() != "")
      {
        string istruzione = nodeDataosservazioni["OsservazioniTxt"].ToString();

        if (istruzione.Trim() != "")
        {
          if (istruzione.Split('\n').Length > 12)
          {
            istruzione = istruzione.Replace(istruzione.Split('\n')[0] + "\n", "");
            istruzione = istruzione.Substring(0, istruzione.Length - 1);
            istruzione = istruzione.Replace("{\\f0 \\li0\\ri0\\sa0\\sb0\\fi0\\ql\\par}", "");
            istruzione = istruzione.Replace("\\fs21 ", "\\fs21\\f0 ");
            istruzione = istruzione.Replace("\\lang", "\\f0\\lang");
          }

          //else
          {
            istruzione = istruzione.Replace("{\\f0 \\li0\\ri0\\sa0\\sb0\\fi0\\ql\\par}", "").Replace("{\\f0 {\\ltrch }\\li0\\ri0\\sa0\\sb0\\fi0\\ql\\par}", "").Replace("{\\f0 {\\ltrch }\\li0\\ri0\\sa0\\sb0\\fi0\\ql\\par}", "").Replace("{\\f0 \\li0\\ri0\\sa0\\sb0\\fi0\\ql\\par}", "").Replace("{\\f0\\fcharset0 Segoe UI;}", "").Replace("\\f1", "\\f0").Replace("\\f2", "\\f0").Replace("\\f3", "\\f0").Replace("\\f4", "\\f0").Replace("\\f5", "\\f0").Replace("\\f6", "\\f0").Replace("{{\\pntext", "{\\f0{\\pntext").Replace("\\f1", "\\f0").Replace("\\f2", "\\f0").Replace("{\\f0\\fcharset0 Times New Roman;}{\\f0\\fcharset0 Tahoma;}", "{\\f0 Arial;\\f1 Wingdings 2;\\f2 Wingdings;}").Replace("\\f0 Wingdings 2", "\\f1 Wingdings 2").Replace("\\f0 Wingdings", "\\f2 Wingdings");
          }

          //istruzione = istruzione.Replace( "{{\\pntext", "{\\f0{\\pntext" ).Replace("{\\f0 {\\ltrch }\\li0\\ri0\\sa0\\sb0\\fi0\\ql\\par}", "").Replace("{\\f0 \\li0\\ri0\\sa0\\sb0\\fi0\\ql\\par}","").Replace("{\\f0\\fcharset0 Segoe UI;}","").Replace( "\\f1", "\\f0" ).Replace( "\\f2", "\\f0" ).Replace( "\\f3", "\\f0" ).Replace( "\\f4", "\\f0" ).Replace( "{\\f0\\fcharset0 Times New Roman;}{\\f0\\fcharset0 Tahoma;}", "{\\f0 Arial;\\f1 Wingdings 2;\\f2 Wingdings;}" ).Replace( "\\f0 Wingdings 2", "\\f1 Wingdings 2" ).Replace( "\\f0 Wingdings", "\\f2 Wingdings" );

          while (istruzione.Split('{').Length < istruzione.Split('}').Length)
          {
            istruzione = istruzione.Remove(istruzione.LastIndexOf("}"), 1);
          }


          istruzione = istruzione.Replace("\\fs14", "\\fs24");
          istruzione = istruzione.Replace("\\fs15", "\\fs24");
          istruzione = istruzione.Replace("\\fs16", "\\fs24");
          istruzione = istruzione.Replace("\\fs17", "\\fs24");
          istruzione = istruzione.Replace("\\fs18", "\\fs24");
          istruzione = istruzione.Replace("\\fs19", "\\fs24");
          istruzione = istruzione.Replace("\\fs22", "\\fs24");
          istruzione = istruzione.Replace("\\fs20", "\\fs24");
          istruzione = istruzione.Replace("\\ql", "\\qj");

          osservazioni_partial_rtf_text += "\\trowd\\cellx9900 \\fs24 \\qj \\i Osservazioni: \\i0 \\cell\\row \\fs24 \\qj " + istruzione + " \\cell\\row";

          //osservazioni_partial_rtf_text += "\\pard\\keepn\\f0 \\fs20 \\i Osservazioni: \\i0 \\line \\fs20 \\qj" + istruzione + " \\par";

        }
      }

      //Esecutore e/o reviewer
      string esecutore_partial_rtf_text = "";
      DataRow nodeDataEsecutore = null;
      DataTable datiEsecutore = cBusinessObjects.GetData(int.Parse(nodeTree.Attributes["ID"].Value), typeof(Esecutore_Reviewer), idcliente, idsessione, idtree);
      foreach (DataRow dt in datiEsecutore.Rows)
      {
        nodeDataEsecutore = dt;
      }


      if (nodeDataEsecutore != null && nodeDataEsecutore["Esecutore"].ToString() != "")
      {

        esecutore_partial_rtf_text += "\\pard\\keepn\\f0 \\fs20 \\b Esecutore: \\b0 " + nodeDataEsecutore["Esecutore"].ToString() + " \\fs20 \\line ";

      }

      if (nodeDataEsecutore != null && nodeDataEsecutore["Reviewer"].ToString() != "")
      {
        if (nodeDataEsecutore["Reviewer"].ToString() != "")
        {
          esecutore_partial_rtf_text += "\\pard\\keepn\\f0 \\fs20 \\b Reviewer: \\b0 " + nodeDataEsecutore["Reviewer"].ToString() + " \\fs20 \\line ";
        }
      }

      //Documenti associati
      string documenti_partial_rtf_text = "";


      if (StampaRelazioneGenerica == false && !StampaLetteraIncarico && !StampaLetteraAttestazione && !StampaManagementLetter && !StampaCodiceEtico)
      {
     
         DataTable  datidocumenti= cBusinessObjects.GetData(int.Parse(nodeTree.Attributes["ID"].Value), typeof(ArchivioDocumenti), idcliente, idsessione,idtree);
    
        bool firsttime = true;
     //   foreach (XmlNode item in xda.Document.SelectNodes("//DOCUMENTI//DOCUMENTO[@Cliente='" + Cliente + "'][@Tree='" + Tree + "'][@Sessione='" + Sessione + "'][@Nodo='" + nodeTree.Attributes["ID"].Value + "']"))
     
        foreach(DataRow item in datidocumenti.Rows)
        {
          if (firsttime)
          {
            documenti_partial_rtf_text += "\\pard\\keepn\\f0 \\fs20 \\i Documenti Associati: \\i0 \\fs20 \\line ";
            firsttime = false;
          }

          documenti_partial_rtf_text += "\t - " + ((item["Titolo"].ToString().Trim() == "") ? "" : item["Titolo"].ToString().Trim()) + ((item["Titolo"].ToString().Trim() == "" && item["Descrizione"].ToString().Trim() == "") ? "" : ": ") + ((item["Descrizione"].ToString().Trim() == "") ? "" : item["Descrizione"].ToString().Trim()) + "\\line";
        }

        if (!firsttime && !StampaRelazioneGenerica && !StampaLetteraIncarico && !StampaLetteraAttestazione && !StampaManagementLetter && !StampaCodiceEtico)
        {
          documenti_partial_rtf_text += "\\par";
        }
      }


      if (documenti_partial_rtf_text == "" && osservazioni_partial_rtf_text == "" && contenuto_partial_rtf_text == "" && note_partial_rtf_text == "")
      {
        rtf_text.Add("");
      }
      else
      {
        string contenutoreal = note_partial_rtf_text + contenuto_partial_rtf_text + osservazioni_partial_rtf_text + documenti_partial_rtf_text + esecutore_partial_rtf_text;

        if (StampaDescrittiva == true)
        {
          //Controllo se esiste testo per verbale
          contenutoreal = "";
          if (itwasatext == false)
          {
            /*                      //MM TODO TESTODASTAMPARE
                      if (nodeData.Attributes["TestoDaStampare"] != null)
                      {
                        string istruzione = nodeData.Attributes["TestoDaStampare"].Value;

                        if (istruzione.Trim() != "")
                        {
                          if (istruzione.Split('\n').Length > 12)
                          {
                            istruzione = istruzione.Replace(istruzione.Split('\n')[0] + "\n", "");
                            istruzione = istruzione.Substring(0, istruzione.Length - 1);
                            istruzione = istruzione.Replace("{\\f0 \\li0\\ri0\\sa0\\sb0\\fi0\\ql\\par}", "");
                            istruzione = istruzione.Replace("\\fs21 ", "\\fs21\\f0 ");
                            istruzione = istruzione.Replace("\\lang", "\\f0\\lang");
                          }
                          else
                          {
                            istruzione = istruzione.Replace("{\\f0 \\li0\\ri0\\sa0\\sb0\\fi0\\ql\\par}", "").Replace("{\\f0 {\\ltrch }\\li0\\ri0\\sa0\\sb0\\fi0\\ql\\par}", "").Replace("{\\f0 {\\ltrch }\\li0\\ri0\\sa0\\sb0\\fi0\\ql\\par}", "").Replace("{\\f0 \\li0\\ri0\\sa0\\sb0\\fi0\\ql\\par}", "").Replace("{\\f0\\fcharset0 Segoe UI;}", "").Replace("\\f1", "\\f0").Replace("\\f2", "\\f0").Replace("\\f3", "\\f0").Replace("\\f4", "\\f0").Replace("{{\\pntext", "{\\f0{\\pntext").Replace("\\f1", "\\f0").Replace("\\f2", "\\f0").Replace("{\\f0\\fcharset0 Times New Roman;}{\\f0\\fcharset0 Tahoma;}", "{\\f0 Arial;\\f1 Wingdings 2;\\f2 Wingdings;}").Replace("\\f0 Wingdings 2", "\\f1 Wingdings 2").Replace("\\f0 Wingdings", "\\f2 Wingdings");
                          }

                          //istruzione = istruzione.Replace( "{{\\pntext", "{\\f0{\\pntext" ).Replace("{\\f0 {\\ltrch }\\li0\\ri0\\sa0\\sb0\\fi0\\ql\\par}", "").Replace("{\\f0 \\li0\\ri0\\sa0\\sb0\\fi0\\ql\\par}","").Replace("{\\f0\\fcharset0 Segoe UI;}","").Replace( "\\f1", "\\f0" ).Replace( "\\f2", "\\f0" ).Replace( "\\f3", "\\f0" ).Replace( "\\f4", "\\f0" ).Replace( "{\\f0\\fcharset0 Times New Roman;}{\\f0\\fcharset0 Tahoma;}", "{\\f0 Arial;\\f1 Wingdings 2;\\f2 Wingdings;}" ).Replace( "\\f0 Wingdings 2", "\\f1 Wingdings 2" ).Replace( "\\f0 Wingdings", "\\f2 Wingdings" );

                          istruzione = istruzione.Replace("\\fs14", "\\fs24");
                          istruzione = istruzione.Replace("\\fs15", "\\fs24");
                          istruzione = istruzione.Replace("\\fs16", "\\fs24");
                          istruzione = istruzione.Replace("\\fs17", "\\fs24");
                          istruzione = istruzione.Replace("\\fs18", "\\fs24");
                          istruzione = istruzione.Replace("\\fs19", "\\fs24");
                          istruzione = istruzione.Replace("\\fs22", "\\fs24");
                          istruzione = istruzione.Replace("\\fs20", "\\fs24");
                          istruzione = istruzione.Replace("\\ql", "\\qj");

                          while (istruzione.Split('{').Length < istruzione.Split('}').Length)
                          {
                            istruzione = istruzione.Remove(istruzione.LastIndexOf("}"), 1);
                          }

                          contenutoreal += "\\trowd\\cellx9900 \\fs24 \\qj " + istruzione + " \\cell\\row";

                          //contenutoreal += "\\pard\\keepn\\f0 \\fs20 \\qj " + istruzione + " \\par";

                        }
                      }
          */
            if (contenutoreal == "")
            {
              if (nodeDataosservazioni != null && nodeDataosservazioni["OsservazioniTxt"].ToString() != "")
              {
                string istruzione = nodeDataosservazioni["OsservazioniTxt"].ToString().Trim();

                if (istruzione.Trim() != "")
                {
                  if (istruzione.Split('\n').Length > 12)
                  {
                    istruzione = istruzione.Replace(istruzione.Split('\n')[0] + "\n", "");
                    istruzione = istruzione.Substring(0, istruzione.Length - 1);
                    istruzione = istruzione.Replace("{\\f0 \\li0\\ri0\\sa0\\sb0\\fi0\\ql\\par}", "");
                    istruzione = istruzione.Replace("\\fs21 ", "\\fs21\\f0 ");
                    istruzione = istruzione.Replace("\\lang", "\\f0\\lang");
                  }
                  else
                  {
                    istruzione = istruzione.Replace("{\\f0 \\li0\\ri0\\sa0\\sb0\\fi0\\ql\\par}", "").Replace("{\\f0 {\\ltrch }\\li0\\ri0\\sa0\\sb0\\fi0\\ql\\par}", "").Replace("{\\f0 {\\ltrch }\\li0\\ri0\\sa0\\sb0\\fi0\\ql\\par}", "").Replace("{\\f0 \\li0\\ri0\\sa0\\sb0\\fi0\\ql\\par}", "").Replace("{\\f0\\fcharset0 Segoe UI;}", "").Replace("\\f1", "\\f0").Replace("\\f2", "\\f0").Replace("\\f3", "\\f0").Replace("\\f4", "\\f0").Replace("{{\\pntext", "{\\f0{\\pntext").Replace("\\f1", "\\f0").Replace("\\f2", "\\f0").Replace("{\\f0\\fcharset0 Times New Roman;}{\\f0\\fcharset0 Tahoma;}", "{\\f0 Arial;\\f1 Wingdings 2;\\f2 Wingdings;}").Replace("\\f0 Wingdings 2", "\\f1 Wingdings 2").Replace("\\f0 Wingdings", "\\f2 Wingdings");
                  }

                  //istruzione = istruzione.Replace( "{{\\pntext", "{\\f0{\\pntext" ).Replace("{\\f0 {\\ltrch }\\li0\\ri0\\sa0\\sb0\\fi0\\ql\\par}", "").Replace("{\\f0 \\li0\\ri0\\sa0\\sb0\\fi0\\ql\\par}","").Replace("{\\f0\\fcharset0 Segoe UI;}","").Replace( "\\f1", "\\f0" ).Replace( "\\f2", "\\f0" ).Replace( "\\f3", "\\f0" ).Replace( "\\f4", "\\f0" ).Replace( "{\\f0\\fcharset0 Times New Roman;}{\\f0\\fcharset0 Tahoma;}", "{\\f0 Arial;\\f1 Wingdings 2;\\f2 Wingdings;}" ).Replace( "\\f0 Wingdings 2", "\\f1 Wingdings 2" ).Replace( "\\f0 Wingdings", "\\f2 Wingdings" );

                  while (istruzione.Split('{').Length < istruzione.Split('}').Length)
                  {
                    istruzione = istruzione.Remove(istruzione.LastIndexOf("}"), 1);
                  }

                  istruzione = istruzione.Replace("\\fs14", "\\fs24");
                  istruzione = istruzione.Replace("\\fs15", "\\fs24");
                  istruzione = istruzione.Replace("\\fs16", "\\fs24");
                  istruzione = istruzione.Replace("\\fs17", "\\fs24");
                  istruzione = istruzione.Replace("\\fs18", "\\fs24");
                  istruzione = istruzione.Replace("\\fs19", "\\fs24");
                  istruzione = istruzione.Replace("\\fs22", "\\fs24");
                  istruzione = istruzione.Replace("\\fs20", "\\fs24");
                  istruzione = istruzione.Replace("\\ql", "\\qj");

                  contenutoreal += "\\trowd\\cellx9900 \\fs24 \\qj " + istruzione + " \\cell\\row";
                  //contenutoreal += "\\pard\\keepn\\f0 \\fs20 \\qj " + istruzione + " \\fs20 \\par";
                }
              }
            }
          }
          else
          {
            contenutoreal = contenuto_partial_rtf_text;
          }
        }

        //if ( contenutoreal == "")
        //{
        //    rtf_text += "";
        //    return;
        //}



        string staton = cBusinessObjects.GetStato(int.Parse(nodeTree.Attributes["ID"].Value), idcliente.ToString(), idsessione.ToString());

        if (verbaledacompletare == true && staton != "" && ((App.TipoTreeNodeStato)(Convert.ToInt32(staton))) == App.TipoTreeNodeStato.DaCompletare)
        {
          //TBD PRISC.. COntrollare stampa nodo singlolo perchè finisce nella stampa solo titolo
          partial_rtf_text += title_partial_rtf_text;
        }
        else
        {
                    partial_rtf_text += title_partial_rtf_text + contenutoreal;
        }

        rtf_text_TOC += tmp_rtf_text_TOC;
        counterFieldindex++;


        if (Watermark && !StampaRelazioneGenerica && !StampaLetteraIncarico && !StampaLetteraAttestazione && !StampaManagementLetter && !StampaCodiceEtico)
        {
          partial_rtf_text += " \\page ";
          ///PageToBeInserted = true;
        }

        if (printall)
        {
          partial_rtf_text += " \\page ";
        }

        rtf_text.Add(partial_rtf_text);
      }
    }

    #region Tabella Replicabile
    private string AddTabellaReplicabile(XmlNode nodeTree)
    {

      DataTable dati = cBusinessObjects.GetData(int.Parse(nodeTree.Attributes["ID"].Value), typeof(Tabella), idcliente, idsessione, idtree);

      bool esistealmenounatabella = false;
      string partial_rtf_text = "";


      ArrayList alTabs = new ArrayList();
      ArrayList alChildsToBeRemoved = new ArrayList();

      bool esisteDefault = false;

      if (printall)
      {
        return AddTabella(nodeTree);
      }
      foreach (DataRow item in dati.Rows)
      {

        if (item["Tab"].ToString() != "")
        {
          if (!alTabs.Contains(item["Tab"].ToString()))
          {
            alTabs.Add(item["Tab"].ToString());
          }
        }
        else
        {
          esisteDefault = true;
        }
      }

      if (esisteDefault)
      {
        if (nodeTree != null && nodeTree.Attributes["Tab"] != null)
        {
          partial_rtf_text += "\\pard\\keepn\\b\\f0 " + nodeTree.Attributes["Tab"].Value + ":\\b0 \\par\n";
        }

        partial_rtf_text += AddTabella(nodeTree, nodeTree.Attributes["Tab"].Value);
      }

      foreach (string tab in alTabs)
      {
        alChildsToBeRemoved.Clear();
        string partial_partial_rtf_text = "";
        partial_rtf_text += "\\pard\\keepn\\b\\f0 " + tab + ":\\b0 \\par\n";



        foreach (DataRow item in dati.Rows)
        {


          if (item["Tab"].ToString() == tab)
          {
            partial_partial_rtf_text = AddTabella(nodeTree, tab);
          }

          esistealmenounatabella = true;
        }



        partial_rtf_text += partial_partial_rtf_text;
      }

      if (esistealmenounatabella == true)
      {
        return partial_rtf_text;
      }
      else
      {
        return "";
      }
    }
    #endregion

    #region Luogo e Data
    private string LuogoEData(XmlNode nodeTree, string ID)
    {
      DataTable nodeData = cBusinessObjects.GetData(int.Parse(ID), typeof(LuogoDataFirma), idcliente, idsessione, idtree);
      DataRow nodenodo = null;
      string partial_rtf_text = "";
      foreach (DataRow dd in nodeData.Rows)
      {
        nodenodo = dd;
      }

      partial_rtf_text += "\\pard\\keep ";


      if (nodenodo != null && nodenodo["txtLuogo"].ToString() != "")
      {
        partial_rtf_text += nodenodo["txtLuogo"].ToString() + ", ";
      }

      if (nodenodo != null && nodenodo["txtData"].ToString() != "")
      {
        partial_rtf_text += nodenodo["txtData"].ToString();
      }

      partial_rtf_text += "\\pard\\bgdkdcross\\cfpat1\\shading59110\\tx2291\\par";

      partial_rtf_text += "\\line\\pard\\keep ";

      if (StampaRelazioneBilancio)
      {
        if (htCliente["OrganoDiRevisione"] != null && Convert.ToInt32(htCliente["OrganoDiRevisione"].ToString()) == 3)
        {
          partial_rtf_text += " \\b La Società di Revisione \\b0";
        }
        else
        {
          partial_rtf_text += " \\b Il Revisore \\b0";
        }

        if (htCliente["RevisoreAutonomo"] != null)
        {
          partial_rtf_text += " \\line  " + htCliente["RevisoreAutonomo"].ToString();
        }
      }
      else
      {
        if (htCliente["OrganoDiControllo"] != null && htCliente["OrganoDiControllo"].ToString() != "" && Convert.ToInt32(htCliente["OrganoDiControllo"].ToString()) == 1)
        {
          if (nodenodo != null && nodenodo["cmbFirma"].ToString() == "Il Collegio Sindacale")
          {
            partial_rtf_text += " \\b Il Collegio Sindacale \\b0 ";
            partial_rtf_text += " \\line Presidente: " + htCliente["Presidente"].ToString();
            if (htCliente["MembroEffettivo"].ToString() != "")
            {
              partial_rtf_text += " \\line Membro effettivo: " + htCliente["MembroEffettivo"].ToString();
            }

            if (htCliente["MembroEffettivo2"].ToString() != "")
            {
              partial_rtf_text += " \\line Membro effettivo: " + htCliente["MembroEffettivo2"].ToString();
            }
          }
          else if (nodenodo != null && nodenodo["cmbFirma"].ToString() == "I Sindaci")
          {
            partial_rtf_text += " \\b I Sindaci \\b0 ";
          }
          else
          {
            partial_rtf_text += " \\b Il Presidente del Collegio Sindacale \\b0 ";
            partial_rtf_text += " \\line  " + htCliente["Presidente"].ToString();
          }
        }
        else if (htCliente["OrganoDiControllo"] != null && htCliente["OrganoDiControllo"].ToString() != "" && Convert.ToInt32(htCliente["OrganoDiControllo"].ToString()) == 3)
        {
          partial_rtf_text += "";
        }
        else
        {
          partial_rtf_text += " \\b Il Sindaco Unico \\b0";
          partial_rtf_text += " \\line  " + ((htCliente["Presidente"] != null) ? htCliente["Presidente"].ToString() : "");
        }
      }

      partial_rtf_text += "\\pard\\bgdkdcross\\cfpat1\\shading59110\\tx2291\\par";

      return partial_rtf_text;
    }

    #endregion

    #region Tabella
    string inizioriga = "\\trowd\\trpaddl50\\trpaddt15\\trpaddr50\\trpaddb15\\trpaddfl3\\trpaddft3\\trpaddfr3\\trpaddfb3 ";
    string iniziorigaTP = "\\trowd\\trpaddl50\\trpaddt15\\trpaddr50\\trpaddb15\\trpaddfl3\\trpaddft3\\trpaddfr3\\trpaddfb3 \\fs20";
    string colore2 = "\\clcbpat2";
    string colore3 = "\\clcbpat3";
    string colore4 = "\\clcbpat4";
    string bordi = "\\clbrdrl\\brdrw10\\brdrs\\clbrdrt\\brdrw10\\brdrs\\clbrdrr\\brdrw10\\brdrs\\clbrdrb\\brdrw10\\brdrs"; //\\clpadt100
    string bordisxuprx = "\\clbrdrl\\brdrw10\\brdrs\\clbrdrt\\brdrw10\\brdrs\\clbrdrr\\brdrw10\\brdrs";
    string bordisxrx = "\\clbrdrl\\brdrw10\\brdrs\\clbrdrr\\brdrw10\\brdrs";
    string bordisxdwrx = "\\clbrdrl\\brdrw10\\brdrs\\clbrdrr\\brdrw10\\brdrs\\clbrdrb\\brdrw10\\brdrs";
    string bordodx = "\\clbrdrr\\brdrw10\\brdrs";
    string bordodown = "\\clbrdrb\\brdrw10\\brdrs";
    string cell1 = "\\clvertalc\\cellx4950";
    string cell1newreduced = "\\clvertalc\\cellx3000";
    string cell2 = "\\clvertalc\\cellx9900";
    string inizioriga2 = "\\pard\\intbl\\tx2291";
    string fineriga = "\\row ";
    string finerigaTP = "\\row \\fs20 ";

    private string AddTabella(XmlNode nodeTree, string tab = "")
    {

      DataTable dati = cBusinessObjects.GetData(int.Parse(nodeTree.Attributes["ID"].Value), typeof(Tabella), idcliente, idsessione, idtree);
      string partial_rtf_text = "";

      if (printall)
      {
        partial_rtf_text += "\\pard\\keep";

        partial_rtf_text += inizioriga + "\n" + colore2 + bordi + cell1newreduced + colore2 + bordi + cell2 + inizioriga2;

        partial_rtf_text += "\\fs16\\b \\qc Descrizione \\b0 \\fs20 \\cell";
        partial_rtf_text += "\\fs16\\b \\qc Dati \\b0 \\fs20 \\cell";

        partial_rtf_text += fineriga;

        int indexhere = 0;

        foreach (DataRow dtrow in dati.Rows)
        {
          partial_rtf_text += AddNodoTabella(dtrow, indexhere++);
        }

        for (int i = indexhere; i < printallrows - indexhere; i++)
        {
          partial_rtf_text += AddNodoTabella(null, i);
        }

        partial_rtf_text += "\\pard\\bgdkdcross\\cfpat1\\shading59110\\tx2291\\par";

        return partial_rtf_text;
      }

      //Check if tabella esiste davvero
      string partial_partial_rtf_text = "";
      int index = 0;
      if (tab != "")
      {

        for (int i = dati.Rows.Count - 1; i >= 0; i--)
        {
          DataRow dtrow = dati.Rows[i];
          if (tab != dtrow["Tab"].ToString())
            dtrow.Delete();
        }
        dati.AcceptChanges();
      }

      foreach (DataRow dtrow in dati.Rows)
      {

        partial_partial_rtf_text += AddNodoTabella(dtrow, index++);

      }


      if (partial_partial_rtf_text != "")
      {
        //INIZIO TABELLA
        partial_rtf_text += "\\pard\\keep";

        partial_rtf_text += inizioriga + "\n" + colore2 + bordi + cell1newreduced + colore2 + bordi + cell2 + inizioriga2;

        partial_rtf_text += "\\fs16\\b \\qc Descrizione \\b0 \\fs20 \\cell";
        partial_rtf_text += "\\fs16\\b \\qc Dati \\b0 \\fs20 \\cell";

        partial_rtf_text += fineriga;

        partial_rtf_text += partial_partial_rtf_text;

        partial_rtf_text += "\\pard\\bgdkdcross\\cfpat1\\shading59110\\tx2291\\par";

      }

      return partial_rtf_text;
    }

    private string AddNodoTabella(DataRow node, int index)
    {
      string partial_rtf_text = "";

      if (printall)
      {
        partial_rtf_text += inizioriga + "\n" + ((index % 1 == 0) ? colore3 : colore4) + bordi + cell1newreduced + ((index % 1 == 0) ? colore3 : colore4) + bordi + cell2 + inizioriga2;

        if (node == null)
        {
          partial_rtf_text += "\\ql \\cell";
          partial_rtf_text += "\\ql \\cell";
        }
        else
        {
          partial_rtf_text += "\\ql " + ((node["name"].ToString() != "") ? node["name"].ToString().Replace("\\", "/") : "") + " \\cell";
          partial_rtf_text += "\\ql  \\cell";

        }

        partial_rtf_text += fineriga;

        return partial_rtf_text;
      }

      if (TabelleSenzaRigheVuote == true)
      {
        if (node["value"].ToString().Replace("\\", "/").Trim() == "")
        {
          return partial_rtf_text;
        }
      }

      partial_rtf_text += inizioriga + "\n" + ((index % 1 == 0) ? colore3 : colore4) + bordi + cell1newreduced + ((index % 1 == 0) ? colore3 : colore4) + bordi + cell2 + inizioriga2;

      partial_rtf_text += "\\ql " + node["name"].ToString().Replace("\\", "/") + " \\cell";
      partial_rtf_text += "\\ql " + node["value"].ToString().Replace("\\", "/") + " \\cell";

      partial_rtf_text += fineriga;

      return partial_rtf_text;
    }

    #endregion

    #region Testo
    private string AddTesto(XmlNode nodeTree)
    {
      DataTable dati = cBusinessObjects.GetData(int.Parse(nodeTree.Attributes["ID"].Value), typeof(Testi), idcliente, idsessione, idtree);

      string partial_rtf_text = "";

      if (dati.Rows.Count == 0)
      {
        return partial_rtf_text;
      }
      DataRow item = null;
      foreach (DataRow dd in dati.Rows)//.SelectNodes("/Dati//Dato[@ID=" + nodeTree.Attributes["ID"].Value + "]/Valore"))
        {
                item = dd;
        }

      if(item!=null)
      {
        
          if (item["name"].ToString() != "" && (StampaRelazioneGenerica == true || StampaLetteraIncarico == true || StampaLetteraAttestazione == true || StampaManagementLetter == true || StampaCodiceEtico == true))
          {
            partial_rtf_text += "\\pard\\keepn\\f0\\i\\fs22 " + item["name"].ToString() + "\\fs10 \\i0 \\line \\par\n\\fs20";
          }

          string test = item["value"].ToString();
          string[] textsplit = test.Split('\n');

          for (int i = 0; i < textsplit.Length; i++)
          {
           if (StampaRelazioneGenerica || StampaLetteraIncarico == true || StampaLetteraAttestazione == true || StampaManagementLetter == true || StampaCodiceEtico == true)
            {
              textsplit[i] = textsplit[i].Replace("\\ql", "\\qj");
            }

            partial_rtf_text += "\\trowd\\cellx9000 \\qj" +textsplit[i]+" \\cell\\row";
       
          }
        /*

          if (test.Split('\n').Length > 12)
          {
            test = test.Replace(test.Split('\n')[0] + "\n", "");
            test = test.Substring(0, test.Length - 1);
            test = test.Replace("{\\f0 \\li0\\ri0\\sa0\\sb0\\fi0\\ql\\par}", "");
            test = test.Replace("\\fs21 ", "\\fs21\\f0 ");
            test = test.Replace("\\lang", "\\f0\\lang");
            test = test.Replace("\\f3", "");
          }
          else
          {
            test = test.Replace("{\\f0 \\li0\\ri0\\sa0\\sb0\\fi0\\ql\\par}", "").Replace("{\\f0 {\\ltrch }\\li0\\ri0\\sa0\\sb0\\fi0\\ql\\par}", "").Replace("{\\f0 {\\ltrch }\\li0\\ri0\\sa0\\sb0\\fi0\\ql\\par}", "").Replace("{\\f0 \\li0\\ri0\\sa0\\sb0\\fi0\\ql\\par}", "").Replace("{\\f0\\fcharset0 Segoe UI;}", "").Replace("\\f1", "\\f0").Replace("\\f2", "\\f0").Replace("\\f3", "\\f0").Replace("\\f4", "\\f0").Replace("{{\\pntext", "{\\f0{\\pntext").Replace("\\f1", "\\f0").Replace("\\f2", "\\f0").Replace("{\\f0\\fcharset0 Times New Roman;}{\\f0\\fcharset0 Tahoma;}", "{\\f0 Arial;\\f1 Wingdings 2;\\f2 Wingdings;}").Replace("\\f0 Wingdings 2", "\\f1 Wingdings 2").Replace("\\f0 Wingdings", "\\f2 Wingdings");
          }

        if (StampaRelazioneGenerica || StampaLetteraIncarico == true || StampaLetteraAttestazione == true || StampaManagementLetter == true || StampaCodiceEtico == true)
        {
          test = test.Replace("\\ql", "\\qj");
        }
        */
        partial_rtf_text += "\\pard\\keepn\\f0\\qj\\li1440\\ri1440 " + test + "\\line \\par\n";
      }


      while (partial_rtf_text.Split('{').Length < partial_rtf_text.Split('}').Length)
      {
        partial_rtf_text = partial_rtf_text.Remove(partial_rtf_text.LastIndexOf("}"), 1);
      }

      if (printall)
      {
        partial_rtf_text += "\\pard\\keepn\\f0\\qj\\li1440\\ri1440 ";

        for (int i = 0; i < printallrows; i++)
        {
          partial_rtf_text += " \\line ";
        }

        partial_rtf_text += "\\line \\par\n";
      }

      return partial_rtf_text;
    }
    #endregion

    #region Discussione
    private string AddDiscussione(XmlNode nodeTree)
    {
      DataTable dati = cBusinessObjects.GetData(int.Parse(nodeTree.Attributes["ID"].Value), typeof(DiscussioniTeam), idcliente, idsessione, idtree);

      string partial_rtf_text = "";

      foreach (DataRow item in dati.Rows)
      {

        if (!String.IsNullOrEmpty(item["data"].ToString()))
        {
          partial_rtf_text += "\\pard\\keepn\\f0\\i\\fs22 " + item["data"].ToString() + "\\fs10 \\i0 \\line \\par\n\\fs20";
        }

        if (item["name"] != null && !String.IsNullOrEmpty(item["name"].ToString()))
        {
          string test = item["name"].ToString();
          if (test.Split('\n').Length > 12)
          {
            test = test.Replace(test.Split('\n')[0] + "\n", "");
            test = test.Substring(0, test.Length - 1);
            test = test.Replace("{\\f0 \\li0\\ri0\\sa0\\sb0\\fi0\\ql\\par}", "");
            test = test.Replace("\\fs21 ", "\\fs21\\f0 ");
            test = test.Replace("\\lang", "\\f0\\lang");
            test = test.Replace("\\f3", "");
          }
          else
          {
            test = test.Replace("{\\f0 \\li0\\ri0\\sa0\\sb0\\fi0\\ql\\par}", "").Replace("{\\f0 {\\ltrch }\\li0\\ri0\\sa0\\sb0\\fi0\\ql\\par}", "").Replace("{\\f0 {\\ltrch }\\li0\\ri0\\sa0\\sb0\\fi0\\ql\\par}", "").Replace("{\\f0 \\li0\\ri0\\sa0\\sb0\\fi0\\ql\\par}", "").Replace("{\\f0\\fcharset0 Segoe UI;}", "").Replace("\\f1", "\\f0").Replace("\\f2", "\\f0").Replace("\\f3", "\\f0").Replace("\\f4", "\\f0").Replace("{{\\pntext", "{\\f0{\\pntext").Replace("\\f1", "\\f0").Replace("\\f2", "\\f0").Replace("{\\f0\\fcharset0 Times New Roman;}{\\f0\\fcharset0 Tahoma;}", "{\\f0 Arial;\\f1 Wingdings 2;\\f2 Wingdings;}").Replace("\\f0 Wingdings 2", "\\f1 Wingdings 2").Replace("\\f0 Wingdings", "\\f2 Wingdings");
          }

          partial_rtf_text += "\\pard\\keepn\\f0\\qj\\li1440\\ri1440 " + test + "\\line \\par\n";
        }

      }

      while (partial_rtf_text.Split('{').Length < partial_rtf_text.Split('}').Length)
      {
        partial_rtf_text = partial_rtf_text.Remove(partial_rtf_text.LastIndexOf("}"), 1);
      }

      return partial_rtf_text;
    }
    #endregion

    #region Testo Proposto


    private string AddTestoProposto(XmlNode nodeTree)
    {
      DataTable dati = cBusinessObjects.GetData(int.Parse(nodeTree.Attributes["ID"].Value), typeof(TestoPropostoMultiplo), idcliente, idsessione, idtree);

      string partial_rtf_text = "";

      if (StampaLetteraIncarico == true || StampaCodiceEtico == true)
      {
        switch (nodeTree.Attributes["ID"].Value)
        {
          case "2016151":
          case "2016152":
          case "151":
          case "152":
            partial_rtf_text += "\\trowd\\cellx8800 \\fs24 \\b \\ql " + nodeTree.Attributes["Titolo"].Value + "\\b0 \\cell\\row ";
            break;
          case "160":
          case "161":
          case "162":
          case "163":
          case "164":
          case "165":
          case "166":
          case "2016160":
          case "2016161":
          case "2016162":
          case "2016163":
          case "2016164":
          case "2016165":
          case "2016166":
            partial_rtf_text += "";
            break;
          default:
            partial_rtf_text += "\\trowd\\clbrdrb\\brdrw10\\brdrs\\cellx8800 \\fs24 \\i \\ql " + nodeTree.Attributes["Titolo"].Value + "\\i0 \\cell\\row ";
            break;
        }
      }

      if (StampaLetteraAttestazione == true || StampaManagementLetter == true)
      {
        switch (nodeTree.Attributes["ID"].Value)
        {
          case "271":
          case "272":
          case "273":
          case "274":
          case "275":
          case "276":
          case "277":
            partial_rtf_text += "\\trowd\\cellx8800 \\fs24  \\i \\ql " + nodeTree.Attributes["Titolo"].Value + "\\i0 \\cell\\row";
            break;
          case "262":
          case "263":
            //case "270":
            partial_rtf_text += "";
            break;
          default:
            partial_rtf_text += "\\trowd\\clbrdrb\\brdrw10\\brdrs\\cellx8800 \\fs24 \\i \\ql " + nodeTree.Attributes["Titolo"].Value + "\\i0 \\cell\\row";
            break;
        }
      }

      foreach (DataRow item in dati.Rows)
      {
        if (((item["strchecked"].ToString() == "true" && !item["value"].ToString().Contains("N/A")) || dati.Rows.Count <= 1))
        {
          //partial_rtf_text += "\\line\\pard\\keepn\\f0 " + item.Attributes["value"].Value + ":\\line " + item.Attributes["name"].Value + "\\line \\par\n";

          if (nodeTree.Attributes["Codice"].Value == "95.111" || nodeTree.Attributes["Codice"].Value == "91.11" || nodeTree.Attributes["Codice"].Value == "95.161" || nodeTree.Attributes["Codice"].Value == "91.61" || nodeTree.Attributes["Codice"].Value == "95.131" || nodeTree.Attributes["Codice"].Value == "91.31")
          {
            if (nodeTree.Attributes["Codice"].Value == "95.161" || nodeTree.Attributes["Codice"].Value == "91.61")
            {
              partial_rtf_text += "\\pard\\keepn \\b\\f0\\ql Relazione su altre disposizioni di legge e regolamentari \\b0  \\par";
            }

            partial_rtf_text += "\\pard\\keepn\\f0\\i\\fs24 " + nodeTree.Attributes["Titolo"].Value + "\\fs10 \\i0 \\par\\fs24";
          }
          else if (nodeTree.Attributes["Codice"].Value == "95.321" || nodeTree.Attributes["Codice"].Value == "93.21")
          {
            partial_rtf_text += "\\pard\\keepn\\f0\\b\\fs24 " + nodeTree.Attributes["Titolo"].Value + "\\fs10 \\b0  \\par\\fs24";
          }
          else
          {
            if (item["name"].ToString() != "" && item["name"].ToString()[0] != '(')
            {
              partial_rtf_text += "\\pard\\keepn\\f0\\i\\fs24 " + item["name"].ToString() + "\\fs10 \\i0 \\par\\fs24";
            }

          }

        partial_rtf_text += "\\pard\\keepn\\f0\\qj \\trowd\\cellx9000 \\qj  \\cell\\row\\par"; //.Replace("\\fs24", "\\fs20")

          string test = "";

          if (item["value"].ToString() != "")
          {
            test = "";
            string[] textsplit = item["value"].ToString().Split('\n');
/*
            for (int i = 0; i < textsplit.Length; i++)
            {
             if(textsplit[i]!=""  && cBusinessObjects.striptagsfromrtf(textsplit[i])!="")
             {
              textsplit[i] = textsplit[i].Replace("\\ql", "\\qj");
              test += "\\trowd\\cellx9000 \\qj" +textsplit[i]+" \\cell\\row";
             
             }
             
       
            }
            */
            test += "\\trowd\\cellx9000 \\qj" +item["value"].ToString()+" \\cell\\row";

           if (tipologiaBilancio == "Abbreviato")
              {
                test = test.Replace(", dal rendiconto finanziario", "").Replace(", unitamente alla relazione sulla gestione,", "");
              }
              else
              {
                test = test.Replace("\\b\\i", "").Replace("\\b\\i", "");
              }
            
              test = test.Replace("{\\f0 \\li0\\ri0\\sa0\\sb0\\fi0\\ql\\par}", "").Replace("{\\f0 {\\ltrch }\\li0\\ri0\\sa0\\sb0\\fi0\\ql\\par}", "").Replace("{\\f0 {\\ltrch }\\li0\\ri0\\sa0\\sb0\\fi0\\ql\\par}", "").Replace("{\\f0 \\li0\\ri0\\sa0\\sb0\\fi0\\ql\\par}", "").Replace("{\\f0\\fcharset0 Segoe UI;}", "").Replace("\\f1", "\\f0").Replace("\\f2", "\\f0").Replace("\\f3", "\\f0").Replace("\\f4", "\\f0").Replace("{{\\pntext", "{\\f0{\\pntext").Replace("\\f1", "\\f0").Replace("\\f2", "\\f0").Replace("{\\f0\\fcharset0 Times New Roman;}{\\f0\\fcharset0 Tahoma;}", "{\\f0 Arial;\\f1 Wingdings 2;\\f2 Wingdings;}").Replace("\\f0 Wingdings 2", "\\f1 Wingdings 2").Replace("\\f0 Wingdings", "\\f2 Wingdings").Replace("{\\f0\\fcharset0 Garamond;}", "").Replace("\\lang1040", "\\f0\\lang1040");
          
          }

          test = test.Replace("\\ql", "\\qj");

      //    partial_rtf_text += "\\pard\\keepn\\f0\\qj " + test + "\\par"; //.Replace("\\fs24", "\\fs20")
           partial_rtf_text +=  test; //.Replace("\\fs24", "\\fs20")

        }

      //  while (partial_rtf_text.Split('{').Length < partial_rtf_text.Split('}').Length)
      //  {
      //    partial_rtf_text = partial_rtf_text.Remove(partial_rtf_text.LastIndexOf("}"), 1);
      //  }

        //if (item.Attributes["ID"].Value == "95004")
        //{
        //    partial_rtf_text += " \\b Relazione sul bilancio \\b0 \\line \\line ";
        //}
      }

      while (partial_rtf_text.Split('{').Length < partial_rtf_text.Split('}').Length)
      {
        partial_rtf_text = partial_rtf_text.Remove(partial_rtf_text.LastIndexOf("}"), 1);
      }

      return partial_rtf_text.Replace("{\\f0 {\\ltrch }\\li0\\ri0\\sa0\\sb0\\fi0\\qj\\par}", "");

    }
    #endregion

    #region Testo Proposto Non Esclusivo
    private string AddTestoPropostoNonEsclusivo(XmlNode nodeTree)
    {

      string partial_rtf_text = "";
      DataTable dati = cBusinessObjects.GetData(int.Parse(nodeTree.Attributes["ID"].Value), typeof(TestoPropostoMultiplo), idcliente, idsessione, idtree);

      int indexhere = 0;

      foreach (DataRow item in dati.Rows)
      {
        if (((item["strchecked"].ToString() == "true") || indexhere == 0))
        {
          //partial_rtf_text += "\\line\\pard\\keepn\\f0 " + item.Attributes["value"].Value + ":\\line " + item.Attributes["name"].Value + "\\line \\par\n";

          if (item["name"].ToString() != "" && item["name"].ToString()[0] != '(')
          {
            partial_rtf_text += "\\pard\\keepn " + item["name"].ToString() + " \\par";
          }

          string test = "";

          if (item["value"].ToString() != "")
          {
            test = item["value"].ToString();
            if (test.Split('\n').Length > 12)
            {
              test = test.Replace(test.Split('\n')[0] + "\n", "");
              test = test.Substring(0, test.Length - 1);
              test = test.Replace("{\\f0 \\li0\\ri0\\sa0\\sb0\\fi0\\ql\\par}", "");
              test = test.Replace("\\fs21 ", "\\fs21\\f0 ");
              test = test.Replace("\\lang", "\\f0\\lang");
            }
            else
            {
              test = test.Replace("{\\f0 \\li0\\ri0\\sa0\\sb0\\fi0\\ql\\par}", "").Replace("{\\f0 {\\ltrch }\\li0\\ri0\\sa0\\sb0\\fi0\\ql\\par}", "").Replace("{\\f0 {\\ltrch }\\li0\\ri0\\sa0\\sb0\\fi0\\ql\\par}", "").Replace("{\\f0 \\li0\\ri0\\sa0\\sb0\\fi0\\ql\\par}", "").Replace("{\\f0\\fcharset0 Segoe UI;}", "").Replace("\\f1", "\\f0").Replace("\\f2", "\\f0").Replace("\\f3", "\\f0").Replace("\\f4", "\\f0").Replace("{{\\pntext", "{\\f0{\\pntext").Replace("\\f1", "\\f0").Replace("\\f2", "\\f0").Replace("{\\f0\\fcharset0 Times New Roman;}{\\f0\\fcharset0 Tahoma;}", "{\\f0 Arial;\\f1 Wingdings 2;\\f2 Wingdings;}").Replace("\\f0 Wingdings 2", "\\f1 Wingdings 2").Replace("\\f0 Wingdings", "\\f2 Wingdings");
            }
          }

          test = test.Replace("\\ql", "\\qj");

          partial_rtf_text += "\\pard\\keepn\\f0\\qj " + test + "\\par"; //.Replace( "\\fs24", "\\fs20" )
        }

        indexhere = indexhere + 1;
      }

      while (partial_rtf_text.Split('{').Length < partial_rtf_text.Split('}').Length)
      {
        partial_rtf_text = partial_rtf_text.Remove(partial_rtf_text.LastIndexOf("}"), 1);
      }

      return partial_rtf_text + " \\line ";
    }
    #endregion

    #region AddRelazioneErroriRilevati

    private string AddConsolidatoIstruzioni(XmlNode nodeTree, string ID)
    {

      string partial_rtf_text = "";

      DataTable datiunsorted = cBusinessObjects.GetData(int.Parse(ID), typeof(ConsolidatoIstruzioni));
      DataView dv = datiunsorted.DefaultView;
      dv.Sort = "riga";
      DataTable dati = dv.ToTable();
      int rownow = 0;
      foreach (DataRow nodenodo in dati.Rows)
      {
        //TITOLO
        partial_rtf_text += "\\pard\\keepn\\f0 \\qc " + nodenodo["titolo"].ToString() + "\\fs10 \\line \\par\n\\fs20";

        if (nodenodo["testo"].ToString() != "")
        {
          partial_rtf_text += "\\pard\\keepn\\f0\\qj ";

          partial_rtf_text += nodenodo["testo"].ToString().Replace("{\\f0 \\li0\\ri0\\sa0\\sb0\\fi0\\ql\\par}", "").Replace("{\\f0 {\\ltrch }\\li0\\ri0\\sa0\\sb0\\fi0\\ql\\par}", "").Replace("{{\\pntext", "{\\f0{\\pntext").Replace("\\f1", "\\f0").Replace("\\f2", "\\f0").Replace("{\\f0\\fcharset0 Times New Roman;}{\\f0\\fcharset0 Tahoma;}", "{\\f0 Arial;\\f1 Wingdings 2;\\f2 Wingdings;}").Replace("\\f0 Wingdings 2", "\\f1 Wingdings 2").Replace("\\f0 Wingdings", "\\f2 Wingdings").Replace("\\ql", "\\qj");

          partial_rtf_text += "\\par\n";
        }

        rownow++;
      }

      return partial_rtf_text;
    }


    private string AddConsolidatoReportistica(XmlNode nodeTree, string ID)
    {

      string partial_rtf_text = "";

      DataTable datiunsorted = cBusinessObjects.GetData(int.Parse(ID), typeof(ConsolidatoReportistica));
      DataView dv = datiunsorted.DefaultView;
      dv.Sort = "riga";
      DataTable dati = dv.ToTable();


      foreach (DataRow nodenodo in dati.Rows)
      {
        //TITOLO
        partial_rtf_text += "\\pard\\keepn\\f0 \\qc " + nodenodo["titolo"].ToString() + "\\fs10 \\line \\par\n\\fs20";

        //CHK
        if ((nodenodo["chk1"].ToString() != "" && nodenodo["chk1"].ToString() != "") || (nodenodo["chk2"].ToString() != "" && nodenodo["chk2"].ToString() != "") || (nodenodo["chk3"] != "" && nodenodo["chk3"].ToString() != ""))
        {
          partial_rtf_text += "\\pard\\keepn\\f0 ";
          if (nodenodo["chk1"] != null && nodenodo["chk1"].ToString() != "")
          {
            partial_rtf_text += " - " + nodenodo["chk1"].ToString() + " \\line ";
          }
          if (nodenodo["chk2"] != null && nodenodo["chk2"].ToString() != "")
          {
            partial_rtf_text += " - " + nodenodo["chk2"].ToString() + " \\line ";
          }
          if (nodenodo["chk3"] != null && nodenodo["chk3"].ToString() != "")
          {
            partial_rtf_text += " - " + nodenodo["chk3"].ToString() + " \\line ";
          }
          partial_rtf_text += "\\par\n";
        }

        if (nodenodo["testo"] != null && nodenodo["testo"].ToString() != "")
        {
          partial_rtf_text += "\\pard\\keepn\\f0\\qj ";

          partial_rtf_text += nodenodo["testo"].ToString().Replace("{\\f0 \\li0\\ri0\\sa0\\sb0\\fi0\\ql\\par}", "").Replace("{\\f0 {\\ltrch }\\li0\\ri0\\sa0\\sb0\\fi0\\ql\\par}", "").Replace("{{\\pntext", "{\\f0{\\pntext").Replace("\\f1", "\\f0").Replace("\\f2", "\\f0").Replace("{\\f0\\fcharset0 Times New Roman;}{\\f0\\fcharset0 Tahoma;}", "{\\f0 Arial;\\f1 Wingdings 2;\\f2 Wingdings;}").Replace("\\f0 Wingdings 2", "\\f1 Wingdings 2").Replace("\\f0 Wingdings", "\\f2 Wingdings").Replace("\\ql", "\\qj");

          partial_rtf_text += "\\par\n";
        }


      }

      return partial_rtf_text;
    }

    private string AddRelazioneErroriRilevati(XmlNode nodeTree, string ID)
    {
      DataTable dati = cBusinessObjects.GetData(int.Parse(nodeTree.Attributes["ID"].Value), typeof(Excel_ErroriRilevati), idcliente, idsessione, idtree);
      DataRow nodenodo = null;
      string partial_rtf_text = "";
      foreach (DataRow dt in dati.Rows)
      {
        nodenodo = dt;
      }
      if (nodenodo == null)
        return "";


      if (nodenodo["lista"] != null && nodenodo["lista"].ToString() != "")
      {
        bool atleastone = false;

        foreach (string itemDKey in nodenodo["lista"].ToString().Split('|'))
        {
          if (nodenodo["chkInserireRelazione_" + itemDKey].ToString() != "")
          {
            atleastone = true;
          }
        }

        if (atleastone)
        {
          partial_rtf_text += "\\pard\\keepn\\f0 \\i Rilievi su alcune voci di bilancio\\fs10 \\i0 \\line \\par\n\\fs20";
        }

        foreach (string itemDKey in nodenodo["lista"].ToString().Split('|'))
        {
          if (nodenodo["chkInserireRelazione_" + itemDKey].ToString() != "")
          {
            //TITOLO
            partial_rtf_text += "\\pard\\keepn\\f0 \\qc " + nodenodo["titolo_" + itemDKey].ToString() + "\\fs10 \\line \\par\n\\fs20";

            //Tabella
            partial_rtf_text += "\\pard\\keepn ";

            Hashtable Header = new Hashtable();
            Hashtable Colonne = new Hashtable();
            Hashtable Lunghezze = new Hashtable();
            Hashtable Tipologia = new Hashtable();

            Header.Add(1, "Importo Rettifica");
            Colonne.Add(1, "importo_" + itemDKey);
            Lunghezze.Add(1, 73);
            Tipologia.Add(1, TipologiaDato.DoubleNoDecimali);
            Header.Add(2, "Già su PN Es.Prec.");
            Colonne.Add(2, "importoAP_" + itemDKey);
            Lunghezze.Add(2, 73);
            Tipologia.Add(2, TipologiaDato.DoubleNoDecimali);
            Header.Add(3, "Importo Lordo PN attuale");
            Colonne.Add(3, "suPNattuale_" + itemDKey);
            Lunghezze.Add(3, 73);
            Tipologia.Add(3, TipologiaDato.DoubleNoDecimali);

            Header.Add(4, "Effetto Fiscale PN attuale");
            Colonne.Add(4, "impattofiscalePN_" + itemDKey);
            Lunghezze.Add(4, 73);
            Tipologia.Add(4, TipologiaDato.DoubleNoDecimali);

            Header.Add(5, "Importo Lordo CE attuale");
            Colonne.Add(5, "suutileattuale_" + itemDKey);
            Lunghezze.Add(5, 73);
            Tipologia.Add(5, TipologiaDato.DoubleNoDecimali);
            Header.Add(6, "Effetto Fiscale CE attuale");
            Colonne.Add(6, "impattofiscale_" + itemDKey);
            Lunghezze.Add(6, 73);
            Tipologia.Add(6, TipologiaDato.DoubleNoDecimali);

            partial_rtf_text += CreateTable(Header, Lunghezze, false, false, true);

            partial_rtf_text += AddNodoTable(nodenodo, 1, Colonne, Tipologia, Lunghezze, "x20");

            partial_rtf_text += "\\pard\\bgdkdcross\\cfpat1\\shading59110\\tx2291\\par";

            //CHK
            if (nodenodo["chk1_" + itemDKey].ToString() != "" || nodenodo["chk2_" + itemDKey].ToString() != "" || nodenodo["chk3_" + itemDKey].ToString() != "")
            {
              partial_rtf_text += "\\pard\\keepn\\f0 ";
              partial_rtf_text += "Il rilievo costituisce deviazione per: \\line ";
              if (nodenodo["chk1_" + itemDKey].ToString() != "")
              {
                partial_rtf_text += " - " + nodenodo["chk1_" + itemDKey].ToString() + " \\line ";
              }
              if (nodenodo["chk2_" + itemDKey].ToString() != "")
              {
                partial_rtf_text += " - " + nodenodo["chk2_" + itemDKey].ToString() + " \\line ";
              }
              if (nodenodo["chk3_" + itemDKey].ToString() != "")
              {
                partial_rtf_text += " - " + nodenodo["chk3_" + itemDKey].ToString() + " \\line ";
              }
              partial_rtf_text += "\\par\n";
            }

            if (nodenodo["testo_" + itemDKey].ToString() != "")
            {
              partial_rtf_text += "\\pard\\keepn\\f0\\qj ";

              partial_rtf_text += nodenodo["testo_" + itemDKey].ToString().Replace("{\\f0 \\li0\\ri0\\sa0\\sb0\\fi0\\ql\\par}", "").Replace("{\\f0 {\\ltrch }\\li0\\ri0\\sa0\\sb0\\fi0\\ql\\par}", "").Replace("{{\\pntext", "{\\f0{\\pntext").Replace("\\f1", "\\f0").Replace("\\f2", "\\f0").Replace("{\\f0\\fcharset0 Times New Roman;}{\\f0\\fcharset0 Tahoma;}", "{\\f0 Arial;\\f1 Wingdings 2;\\f2 Wingdings;}").Replace("\\f0 Wingdings 2", "\\f1 Wingdings 2").Replace("\\f0 Wingdings", "\\f2 Wingdings").Replace("\\ql", "\\qj");

              partial_rtf_text += "\\par\n";
            }
          }
        }
      }

      return partial_rtf_text;
    }
    #endregion

    #region Destinatari e Bilancio

    private string AddDestinatariBilancio(XmlNode nodeTree, string ID)
    {
      DataTable dati = cBusinessObjects.GetData(int.Parse(ID), typeof(DestinatariEBilancio), idcliente, idsessione, idtree);
      string partial_rtf_text = "";
      if (htCliente == null)
      {
        return partial_rtf_text;
      }

      DataRow nodenodo = null;
      foreach (DataRow dt in dati.Rows)
      {
        nodenodo = dt;
      }

      if (StampaManagementLetter && nodenodo["cmbDestinatari"].ToString() != "")
      {
        partial_rtf_text += "\\pard\\keepn\\b\\f0 \\ql \\fs24 " + nodenodo["cmbDestinatari"].ToString() + " \\b0 \\par\n \\line ";

        return partial_rtf_text;
      }

      if (StampaLetteraAttestazione)
      {
        if (htCliente["OrganoDiRevisione"] != null && htCliente["OrganoDiRevisione"].ToString() == "1")
        {
          if (htCliente["OrganoDiControllo"] != null && htCliente["OrganoDiControllo"].ToString() == "1")
          {
            partial_rtf_text += "\\pard\\keepn\\b\\f0 \\ql \\fs24 " + "Al Collegio sindacale" + " \\b0 \\par\n \\line ";
          }
          else if (htCliente["OrganoDiControllo"] != null && htCliente["OrganoDiControllo"].ToString() == "3")
          {
            partial_rtf_text += "";
          }
          else
          {
            partial_rtf_text += "\\pard\\keepn\\b\\f0 \\ql \\fs24 " + "Al Sindaco Unico" + " \\b0 \\par\n \\line ";
          }
        }
        else if (htCliente["OrganoDiRevisione"] != null && htCliente["OrganoDiRevisione"].ToString() == "2")
        {
          partial_rtf_text += "\\pard\\keepn\\b\\f0 \\ql \\fs24 " + "Al Revisore " + /*( ( htCliente["RevisoreAutonomo"] != null ) ? htCliente["RevisoreAutonomo"].ToString() : "" ) +*/ " \\b0 \\par\n \\line ";
        }
        else if (htCliente["OrganoDiRevisione"] != null && htCliente["OrganoDiRevisione"].ToString() == "3")
        {
          partial_rtf_text += "\\pard\\keepn\\b\\f0 \\ql \\fs24 " + "Alla Società di Revisione " + /*( ( htCliente["RevisoreAutonomo"] != null ) ? htCliente["RevisoreAutonomo"].ToString() : "" ) + */ " \\b0 \\par\n \\line ";
        }

        if (nodenodo["cmbBilancio"].ToString() != "")
        {
          string DataHere = "";

          if (_EsercizioAl.Length == 5)
          {
            DataHere = (Convert.ToInt32(_EsercizioAl.Substring(0, 2))).ToString();

            DataHere += " ";

            switch (_EsercizioAl.Substring(3, 2))
            {
              case "01":
                DataHere += "Gennaio";
                break;
              case "02":
                DataHere += "Febbraio";
                break;
              case "03":
                DataHere += "Marzo";
                break;
              case "04":
                DataHere += "Aprile";
                break;
              case "05":
                DataHere += "Maggio";
                break;
              case "06":
                DataHere += "Giugno";
                break;
              case "07":
                DataHere += "Luglio";
                break;
              case "08":
                DataHere += "Agosto";
                break;
              case "09":
                DataHere += "Settembre";
                break;
              case "10":
                DataHere += "Ottobre";
                break;
              case "11":
                DataHere += "Novembre";
                break;
              case "12":
                DataHere += "Dicembre";
                break;
              default:
                break;
            }

            DataHere += " ";

            DataHere += ((_Sessione.IndexOf("/") > 0) ? _Sessione.Substring(0, 2) + _Sessione.Substring(5, 2) : _Sessione);
          }
          else
          {
            DataHere += _EsercizioAl + "/" + ((_Sessione.IndexOf("/") > 0) ? _Sessione.Substring(0, 2) + _Sessione.Substring(5, 2) : _Sessione);
          }

          partial_rtf_text += "\\pard\\keepn\\f0 \\ql \\fs24 Bilancio riferito " + nodenodo["cmbBilancio"].ToString() + " chiuso al " + DataHere + " \\par \\line ";
        }

        return partial_rtf_text;
      }

      //TITOLO
      if (StampaRelazioneBilancio)
      {
        if (htCliente["OrganoDiRevisione"] != null && Convert.ToInt32(htCliente["OrganoDiRevisione"].ToString()) == 3)
        {
          partial_rtf_text += "\\trowd\\clbrdrb\\brdrw10\\brdrs\\cellx9000 \\fs28\\qc\\b RELAZIONE DELLA SOCIETA' DI REVISIONE INDIPENDENTE\\b0\\cell\\row";
        }
        else
        {
          partial_rtf_text += "\\trowd\\clbrdrb\\brdrw10\\brdrs\\cellx9000 \\fs28\\qc\\b RELAZIONE DEL REVISORE INDIPENDENTE\\b0\\cell\\row";
        }
      }
      else
      {
        if (htCliente["OrganoDiControllo"] != null && htCliente["OrganoDiControllo"].ToString() == "1")
        {
          partial_rtf_text += "\\trowd\\clbrdrb\\brdrw10\\brdrs\\cellx9000 \\fs28\\qc\\b RELAZIONE DEL COLLEGIO SINDACALE \\b0\\cell\\row";
        }
        else if (htCliente["OrganoDiControllo"] != null && htCliente["OrganoDiControllo"].ToString() == "3")
        {
          partial_rtf_text += "\\trowd\\clbrdrb\\brdrw10\\brdrs\\cellx9000 \\fs28\\qc\\b RELAZIONE \\b0\\cell\\row";
        }
        else
        {
          partial_rtf_text += "\\trowd\\clbrdrb\\brdrw10\\brdrs\\cellx9000 \\fs28\\qc\\b RELAZIONE DEL SINDACO UNICO \\b0\\cell\\row";
        }
      }

      if (StampaRelazioneBilancio)
      {
        partial_rtf_text += "\\pard\\keepn\\f0\\qc\\fs21 Incaricato delle funzioni di revisore legale (art.14 del D. Lgs. 27 Gennaio 2010 n°39)\\par\n";
      }

      if (StampaRelazioneVigilanza)
      {
        partial_rtf_text += "\\pard\\keepn\\f0\\qc\\fs24 Incaricato delle funzioni di vigilanza (art.2429, secondo comma Codice Civile)\\par\n";
      }

      if (StampaRelazioneBilancioeVigilanza)
      {
        partial_rtf_text += "\\pard\\keepn\\f0\\qc\\fs21 Incaricato delle funzioni di revisore legale (art.14 del D. Lgs. 27 Gennaio 2010 n°39) e di vigilanza (art.2429, secondo comma Codice Civile)\\par\n";
      }

      partial_rtf_text += "\\line";

      if (nodenodo != null && nodenodo["cmbDestinatari"].ToString() != "")
      {
        partial_rtf_text += "\\pard\\keepn\\f0\\ql\\fs24\\i All'Assemblea " + nodenodo["cmbDestinatari"].ToString() + " della \\i0 \\line \\par\n";
      }

      partial_rtf_text += "\\pard\\keepn\\f0 ";

      //con bordi
      //partial_rtf_text += "\\trowd\\clbrdrl\\brdrw10\\brdrs\\clbrdrt\\brdrw10\\brdrs\\clbrdrr\\brdrw10\\brdrs\\cellx10000 \\qc\\b " + ( ( nodenodo.Attributes["RagioneSociale"] != null ) ? nodenodo.Attributes["RagioneSociale"].Value : "" ) + " \\b0\\cell\\row";
      //partial_rtf_text += "\\trowd\\clbrdrl\\brdrw10\\brdrs\\clbrdrr\\brdrw10\\brdrs\\cellx10000 \\qc " + ( ( nodenodo.Attributes["Indirizzo"] != null ) ? nodenodo.Attributes["Indirizzo"].Value : "" ) + " \\cell\\row";
      //partial_rtf_text += "\\trowd\\clbrdrl\\brdrw10\\brdrs\\clbrdrr\\brdrw10\\brdrs\\cellx10000 \\qc " + ( ( nodenodo.Attributes["CapitaleSociale"] != null ) ? nodenodo.Attributes["CapitaleSociale"].Value : "" ) + " \\cell\\row";
      //partial_rtf_text += "\\trowd\\clbrdrl\\brdrw10\\brdrs\\clbrdrr\\brdrw10\\brdrs\\clbrdrb\\brdrw10\\brdrs\\cellx10000 \\qc " + ( ( nodenodo.Attributes["REA"] != null ) ? nodenodo.Attributes["REA"].Value : "" ) + " \\cell\\row";

      partial_rtf_text += "\\trowd\\cellx9000 \\fs28\\qc\\b " + ((nodenodo["RagioneSociale"] != null) ? nodenodo["RagioneSociale"].ToString() : "Dato Mancante: Compilare Carta di Lavoro 2.1.1") + " \\b0\\fs24\\cell\\row";
      partial_rtf_text += "\\trowd\\cellx9000 \\qc " + ((nodenodo["Indirizzo"] != null) ? nodenodo["Indirizzo"].ToString() : "") + " \\cell\\row";
      partial_rtf_text += "\\trowd\\cellx9000 \\qc " + ((nodenodo["CapitaleSociale"] != null && !nodenodo["CapitaleSociale"].ToString().Contains("Dato Mancante")) ? nodenodo["CapitaleSociale"].ToString() : " \\fs28 \\b Dato Mancante: Compilare Carta di Lavoro 2.1.5 \\b0 \\fs24 ") + " \\cell\\row";
      partial_rtf_text += "\\trowd\\clbrdrb\\brdrw10\\brdrs\\cellx9000 \\qc " + ((nodenodo["REA"] != null) ? nodenodo["REA"].ToString() : "") + " \\cell\\row";
      partial_rtf_text += "\\par\n";


      if (nodenodo["cmbBilancio"].ToString() != null)
      {
        partial_rtf_text += "\\pard\\keepn\\f0 ";

        //partial_rtf_text += "\\trowd\\clbrdrl\\brdrw10\\brdrs\\clbrdrt\\brdrw10\\brdrs\\clbrdrr\\brdrw10\\brdrs\\cellx9000 \\qc " + "Il bilancio oggetto della relazione è riferito " + nodenodo.Attributes["cmbBilancio"].Value + " chiuso al \\cell\\row";
        //partial_rtf_text += "\\trowd\\clbrdrl\\brdrw10\\brdrs\\clbrdrr\\brdrw10\\brdrs\\cellx9000 \\qc\\b " + "31 Dicembre " + _Sessione + " \\b0\\cell\\row";
        //partial_rtf_text += "\\trowd\\clbrdrl\\brdrw10\\brdrs\\clbrdrr\\brdrw10\\brdrs\\clbrdrb\\brdrw10\\brdrs\\cellx9000 \\qc " + "i dati del quale sono di seguito riassunti: " + " \\cell\\row";

        string DataHere = "";

        if (_EsercizioAl.Length == 5)
        {
          DataHere = (Convert.ToInt32(_EsercizioAl.Substring(0, 2))).ToString();

          DataHere += " ";

          switch (_EsercizioAl.Substring(3, 2))
          {
            case "01":
              DataHere += "Gennaio";
              break;
            case "02":
              DataHere += "Febbraio";
              break;
            case "03":
              DataHere += "Marzo";
              break;
            case "04":
              DataHere += "Aprile";
              break;
            case "05":
              DataHere += "Maggio";
              break;
            case "06":
              DataHere += "Giugno";
              break;
            case "07":
              DataHere += "Luglio";
              break;
            case "08":
              DataHere += "Agosto";
              break;
            case "09":
              DataHere += "Settembre";
              break;
            case "10":
              DataHere += "Ottobre";
              break;
            case "11":
              DataHere += "Novembre";
              break;
            case "12":
              DataHere += "Dicembre";
              break;
            default:
              break;
          }

          DataHere += " ";

          DataHere += ((_Sessione.IndexOf("/") > 0) ? _Sessione.Substring(0, 2) + _Sessione.Substring(5, 2) : _Sessione);
        }
        else
        {
          DataHere += _EsercizioAl + "/" + ((_Sessione.IndexOf("/") > 0) ? _Sessione.Substring(0, 2) + _Sessione.Substring(5, 2) : _Sessione);
        }

        if (ID == "2" && StampaRelazioneBilancio)
        {
          /* HACK: Aggiunto da Iuri per modifica 91.1 */
          partial_rtf_text += "\\trowd\\cellx9000 \\qc\\b Premesse \\b0\\cell\\row";
          partial_rtf_text += "\\trowd\\cellx9000 \\qj L’Organo di controllo, nell’esercizio in esame, ha svolto le funzioni previste dagli articoli 2403 e seguenti del Cod. Civ. \\cell\\row";
          partial_rtf_text += "\\trowd\\cellx9000 \\qj Nella presente relazione ogni riferimento al bilancio ed alla società, se non precisato diversamente, indica il bilancio oggetto della relazione e la società alla cui proprietà è rivolta la medesima relazione; il bilancio è costituito dallo stato patrimoniale, dal conto economico, dalla nota integrativa" + ((tipologiaBilancio == "Ordinario" || tipologiaBilancio == "") ? " e dal rendiconto finanziario" : "") + ".  \\cell\\row";
          /* Fine Aggiunto da Iuri per modifica 91.1 */

          partial_rtf_text += "\\trowd\\cellx9000 \\ql \\cell\\row";
        }


        if (ID == "102")
        {
          /* HACK: Aggiunto da Iuri per modifica 95.1 */
          partial_rtf_text += "\\trowd\\cellx9000 \\qc\\b Premesse \\b0\\cell\\row";
          partial_rtf_text += "\\trowd\\cellx9000 \\qj L’Organo di controllo, nell’esercizio in esame, ha svolto sia le funzioni previste dagli articoli 2403 e seguenti del Cod. Civ. che quelle previste dall’art. 2409 bis. \\cell\\row";
          partial_rtf_text += "\\trowd\\cellx9000 \\qj Nella presente relazione ogni riferimento al bilancio ed alla società, se non precisato diversamente, indica il bilancio oggetto della relazione e la società alla cui proprietà è rivolta la medesima relazione; il bilancio è costituito dallo stato patrimoniale, dal conto economico, dalla nota integrativa" + ((tipologiaBilancio == "Ordinario" || tipologiaBilancio == "") ? " e dal rendiconto finanziario" : "") + ".  \\cell\\row";
          /* Fine Aggiunto da Iuri per modifica 95.1 */

          partial_rtf_text += "\\trowd\\cellx9000 \\qj La presente relazione unitaria contiene: \\cell\\row";
          partial_rtf_text += "\\trowd\\cellx9000 \\qj   - nella sezione A) la Relazione di revisione ai sensi dell'art.14 del decreto legislativo 27 Gennaio 2010 n.39; \\cell\\row";
          partial_rtf_text += "\\trowd\\cellx9000 \\qj   - nella sezione B) la Relazione ai sensi dell'art.2429, comma 2, del Cod.Civ. \\cell\\row";

          partial_rtf_text += "\\trowd\\cellx9000 \\ql \\cell\\row";
        }

        if (nodeTree.Attributes["Codice"].Value == "93.1")
        {
          partial_rtf_text += "\\trowd\\cellx9000 \\qj " + "Il bilancio oggetto della presente relazione è composto dalla situazione patrimoniale, dal conto economico" + ((tipologiaBilancio == "Ordinario" || tipologiaBilancio == "") ? ", dal rendiconto finanziario" : "") + ", dalla nota integrativa ed è riferito " + nodenodo["cmbBilancio"].ToString() + " chiuso al \\cell\\row";
        }
        else
        {
          partial_rtf_text += "\\trowd\\cellx9000 \\qj " + "Oggetto della presente relazione è il bilancio della società suindicata, nei componenti previsti dalla forma adottata, riferito " + nodenodo["cmbBilancio"].ToString() + " chiuso al \\cell\\row";
        }

        partial_rtf_text += "\\trowd\\cellx9000 \\qc\\b " + DataHere + " \\b0\\cell\\row";
        partial_rtf_text += "\\trowd\\cellx9000 \\ql " + "i dati del quale sono di seguito riassunti: " + " \\cell\\row";
        partial_rtf_text += "\\par\n";
      }

      partial_rtf_text += "\\pard\\keepn\\f0 ";
      partial_rtf_text += "\\b STATO PATRIMONIALE \\b0";
      partial_rtf_text += "\\par\n";

      partial_rtf_text += "\\pard\\keepn\\f0 ";

      partial_rtf_text += inizioriga + "\\clbrdrl\\brdrw10\\brdrs\\clbrdrt\\brdrw10\\brdrs" + "\\cellx5000" + "\\clbrdrt\\brdrw10\\brdrs\\clbrdrr\\brdrw10\\brdrs" + "\\cellx9000" + " \\ql Attività \\cell \\qr " + nodenodo["txtAttivita"].ToString() + " \\cell" + fineriga;

      decimal val1 = 0;
      try
      {
        val1 = decimal.Parse(nodenodo["txtPassivita"].ToString());
      }
      catch (Exception)
      {
        val1 = 0;
      }

      decimal val2 = 0;
      try
      {
        val2 = decimal.Parse(nodenodo["txtPatrimonioNetto"].ToString());
      }
      catch (Exception)
      {
        val2 = 0;
      }

      string valstring = String.Format("{0:0,000,000}", val1 - val2);

      partial_rtf_text += inizioriga + "\\clbrdrl\\brdrw10\\brdrs\\cellx5000\\clbrdrr\\brdrw10\\brdrs\\cellx9000" + " \\ql Passività \\cell \\qr " + valstring + " \\cell" + fineriga;
      val1 = 0;
      try
      {
        val1 = decimal.Parse(nodenodo["txtPatrimonioNetto"].ToString());
      }
      catch (Exception)
      {
        val1 = 0;
      }

      val2 = 0;
      try
      {
        val2 = decimal.Parse(nodenodo["txtUtilePerditaPatrimoniale"].ToString());
      }
      catch (Exception)
      {
        val2 = 0;
      }

      valstring = String.Format("{0:0,000,000}", val1 - val2);

      partial_rtf_text += inizioriga + "\\clbrdrl\\brdrw10\\brdrs\\cellx5000\\clbrdrr\\brdrw10\\brdrs\\cellx9000" + " \\ql Patrimonio Netto \\cell \\qr " + valstring + " \\cell" + fineriga;


      partial_rtf_text += inizioriga + "\\clbrdrl\\brdrw10\\brdrs\\clbrdrb\\brdrw10\\brdrs\\cellx5000\\clbrdrr\\brdrw10\\brdrs\\clbrdrb\\brdrw10\\brdrs\\cellx9000" + " \\ql\\b Utile (Perdita) d'esercizio \\cell \\qr " + nodenodo["txtUtilePerditaPatrimoniale"].ToString() + " \\b0\\cell" + fineriga;

      partial_rtf_text += "\\par\n";

      partial_rtf_text += "\\pard\\keepn\\f0 ";
      partial_rtf_text += "\\b CONTO ECONOMICO \\b0";
      partial_rtf_text += "\\par\n";

      partial_rtf_text += "\\pard\\keepn\\f0 ";

      partial_rtf_text += inizioriga + "\\clbrdrl\\brdrw10\\brdrs\\clbrdrt\\brdrw10\\brdrs\\cellx5000\\clbrdrt\\brdrw10\\brdrs\\clbrdrr\\brdrw10\\brdrs\\cellx9000" + " \\ql Valore della produzione \\cell \\qr " + nodenodo["txtValoreProduzione"].ToString() + " \\cell" + fineriga;
      partial_rtf_text += inizioriga + "\\clbrdrl\\brdrw10\\brdrs\\cellx5000\\clbrdrr\\brdrw10\\brdrs\\cellx9000" + " \\ql Costi di produzione \\cell \\qr " + nodenodo["txtCostiProduzione"].ToString() + " \\cell" + fineriga;
      partial_rtf_text += inizioriga + "\\clbrdrl\\brdrw10\\brdrs\\cellx5000\\clbrdrr\\brdrw10\\brdrs\\cellx9000" + " \\ql Risultato gestione finanziaria \\cell \\qr " + nodenodo["txtRisultatoGestione"].ToString() + " \\cell" + fineriga;
      partial_rtf_text += inizioriga + "\\clbrdrl\\brdrw10\\brdrs\\cellx5000\\clbrdrr\\brdrw10\\brdrs\\cellx9000" + " \\ql Rettifiche di valore di attività finanziarie \\cell \\qr " + nodenodo["txtRettifiche"].ToString() + " \\cell" + fineriga;

      if (nodenodo["txtRisultatoExtragestione"].ToString() != "0")
      {
        partial_rtf_text += inizioriga + "\\clbrdrl\\brdrw10\\brdrs\\cellx5000\\clbrdrr\\brdrw10\\brdrs\\cellx9000" + " \\ql Risultato extragestione \\cell \\qr " + nodenodo["txtRisultatoExtragestione"].ToString() + " \\cell" + fineriga;
      }

      partial_rtf_text += inizioriga + "\\clbrdrl\\brdrw10\\brdrs\\cellx5000\\clbrdrr\\brdrw10\\brdrs\\cellx9000" + " \\ql Imposte a carico dell'esercizio \\cell \\qr " + nodenodo["txtImposte"].ToString() + " \\cell" + fineriga;
      partial_rtf_text += inizioriga + "\\clbrdrl\\brdrw10\\brdrs\\clbrdrb\\brdrw10\\brdrs\\cellx5000\\clbrdrr\\brdrw10\\brdrs\\clbrdrb\\brdrw10\\brdrs\\cellx9000" + " \\ql\\b Utile (Perdita) d'esercizio \\cell \\qr " + nodenodo["txtUtilePerditaEconomico"].ToString() + " \\b0\\cell" + fineriga;

      if (nodeTree.Attributes["Codice"].Value == "91.1")
      {

        partial_rtf_text += "\\line\\line \\pard \\qj \\b0 L'organo di controllo ha svolto la revisione del bilancio in oggetto costituito dallo Stato Patrimoniale, dal Conto Economico" + ((tipologiaBilancio == "Ordinario" || tipologiaBilancio == "") ? ", dal Rendiconto Finanziario" : "") + " e dalla Nota Integrativa.\\par \\pard \\line \\b Relazione sul bilancio \\b0 \\line \\par";
      }

      if (nodeTree.Attributes["Codice"].Value == "93.1")
      {
        partial_rtf_text += "\\line \\line \\pard \\qj \\b0 Nel corso dell'esercizio l'attività dell'Organo di controllo è stata ispirata alle disposizioni di legge ed alle norme di comportamento del Collegio sindacale emanate dal Consiglio Nazionale dei Dottori Commercialisti e degli Esperti Contabili. \\line \\par";
      }

      partial_rtf_text += "\\line\n";

      return partial_rtf_text;
    }

    #endregion

    #region Check List
    string colore1 = "\\clcbpat3";

    string cell1cl = "\\cellx500";
    string cell2cl = "\\cellx7700";
    string cell3cl = "\\cellx8000";
    string cell4cl = "\\cellx8400";
    string cell5cl = "\\cellx8700";
    string cell6cl = "\\cellx9200";
    string cell7cl = "\\cellx9500";
    string cell8cl = "\\cellx11000";

    private string AddCheckList(XmlNode nodeTree)
    {
      DataTable dati = cBusinessObjects.GetData(int.Parse(nodeTree.Attributes["ID"].Value), typeof(CheckList), idcliente, idsessione, idtree);
      string partial_rtf_text = "";

      if (dati.Rows.Count > 0)
      {
        partial_rtf_text += "\\pard\\keep";

        foreach (DataRow dtrow in dati.Rows)
        {
          partial_rtf_text += AddNodoCheckList(dtrow);
        }

        partial_rtf_text += "\\line\\pard\\bgdkdcross\\cfpat1\\shading59110\\tx2291\\par";

        //if ( nodeData.Attributes["risultato"] != null && nodeData.Attributes["risultato"].Value != "" )
        //{
        //    partial_rtf_text += "\\pard\\keepn\\f0\\b \\trowd\\clbrdrl\\brdrw10\\brdrs\\clbrdrt\\brdrw10\\brdrs\\clbrdrr\\brdrw10\\brdrs\\clbrdrb\\brdrw10\\brdrs\\cellx10000 " + nodeData.Attributes["risultato"].Value + "\\b0 \\cell\\row \\par\n";
        //}
      }

      return partial_rtf_text;
    }

    private string AddNodoCheckList(DataRow node)
    {
      string partial_rtf_text = "";

      if (node["Codice"].ToString() == "")
      {
        return partial_rtf_text;
      }

      partial_rtf_text += inizioriga + "\n" + colore1 + cell1cl + colore1 + cell2cl + colore1 + cell3cl + colore1 + cell4cl + colore1 + cell5cl + colore1 + cell6cl + colore1 + cell7cl + colore1 + cell8cl + inizioriga2;

      partial_rtf_text += " " + node["Codice"].ToString() + "\\cell";

      string testcella2 = "";

      if (node["Nota"].ToString() != "" && node["Nota"].ToString().Trim() != "")
      {
        testcella2 = node["name"].ToString() + " \\line \\line \\i " +
          "Nota: " + node["Nota"].ToString().Trim().Replace(NEW_LINE, "  \\line ") + " \\i0 \\line ";
      }
      else
      {
        testcella2 = node["name"].ToString() + " \\par ";
      }

      if (node["name"].ToString() == "")
      {
        partial_rtf_text += " \\cell";
        partial_rtf_text += " \\cell";
        partial_rtf_text += " \\cell";
        partial_rtf_text += " \\cell";
        partial_rtf_text += " \\cell";
        partial_rtf_text += " \\cell";
        partial_rtf_text += " \\cell";
      }
      else
      {
        partial_rtf_text += "\\ql " + testcella2 + "\\cell \\ql ";

        if (printall)
        {
          partial_rtf_text += "\\f1 " + checkbox_UnCheched + "\\f0\\cell";

          partial_rtf_text += " " + "Si" + "\\cell";

          partial_rtf_text += "\\f1 " + checkbox_UnCheched + "\\f0\\cell";

          partial_rtf_text += " " + "No" + "\\cell";

          partial_rtf_text += "\\f1 " + checkbox_UnCheched + "\\f0\\cell";

          partial_rtf_text += " " + "N/A" + "\\cell";
        }
        else
        {
          partial_rtf_text += "\\f1 " + ((node["value"].ToString() == "Si") ? checkbox_Cheched : checkbox_UnCheched) + "\\f0\\cell";

          partial_rtf_text += " " + "Si" + "\\cell";

          partial_rtf_text += "\\f1 " + ((node["value"].ToString() == "No") ? checkbox_Cheched : checkbox_UnCheched) + "\\f0\\cell";

          partial_rtf_text += " " + "No" + "\\cell";

          partial_rtf_text += "\\f1 " + ((node["value"].ToString() == "NA" || node["value"].ToString() == "") ? checkbox_Cheched : checkbox_UnCheched) + "\\f0\\cell";

          partial_rtf_text += " " + "N/A" + "\\cell";
        }
      }


      partial_rtf_text += fineriga;

      return partial_rtf_text;
    }

    #endregion

    #region Check List +

    //Hashtable ht_RowstoBeMerged = new Hashtable();
    //Hashtable ht_CellsToBeMerged = new Hashtable();

    string cell1clp = "\\clvertalc\\cellx500";
    string cell2clp = "\\clvertalc\\cellx800";
    string cell3clp = "\\clvertalc\\cellx3540";
    string cell4clp = "\\clvertalc\\cellx3840";
    string cell5clp = "\\clvertalc\\cellx6580";
    string cell6clp = "\\clvertalc\\cellx6880";
    string cell7clp = "\\clvertalc\\cellx9620";
    string cell8clp = "\\clvertalc\\cellx9920";

    private string AddCheckListpiu(XmlNode nodeTree)
    {
      DataTable dati = cBusinessObjects.GetData(int.Parse(nodeTree.Attributes["ID"].Value), typeof(CheckListPlus), idcliente, idsessione, idtree);
      string partial_rtf_text = "";

      partial_rtf_text += "\\pard\\keep";

      foreach (DataRow dtrow in dati.Rows)
      {
        partial_rtf_text += AddNodoCheckListpiu(dtrow);
      }

      partial_rtf_text += "\\line\\pard\\bgdkdcross\\cfpat1\\shading59110\\tx2291\\par ";
      if (!TitoloVerbale && !Fascicolo)
      {
        partial_rtf_text += " \\page";
      }

      return partial_rtf_text;
    }

    private string AddNodoCheckListpiu(DataRow node)
    {
      string partial_rtf_text = "";

      partial_rtf_text += inizioriga + "\n" + colore1 + cell1clp + colore1 + cell8clp + inizioriga2;

      partial_rtf_text += "\\line " + node["Codice"].ToString() + "\\cell";
      partial_rtf_text += "\\line " + node["name"].ToString() + "\\cell";

      partial_rtf_text += fineriga;

      partial_rtf_text += inizioriga + "\n" + colore1 + cell1clp + colore1 + cell2clp + colore1 + cell3clp + colore1 + cell4clp + colore1 + cell5clp + colore1 + cell6clp + colore1 + cell7clp + colore1 + cell8clp + inizioriga2;

      partial_rtf_text += " \\cell";

      partial_rtf_text += "\\f1" + ((node["value"].ToString() == "Si") ? checkbox_Cheched : checkbox_UnCheched) + "\\f0\\cell";

      partial_rtf_text += " " + "Alto" + "\\cell";

      partial_rtf_text += "\\f1" + ((node["value"].ToString() == "No") ? checkbox_Cheched : checkbox_UnCheched) + "\\f0\\cell";

      partial_rtf_text += " " + "Medio" + "\\cell";

      partial_rtf_text += "\\f1" + ((node["value"].ToString() == "NA" || node["value"].ToString() == "") ? checkbox_Cheched : checkbox_UnCheched) + "\\f0\\cell";

      partial_rtf_text += " " + "Basso" + "\\cell";

      partial_rtf_text += " \\cell";

      partial_rtf_text += fineriga;

      partial_rtf_text += inizioriga + "\n" + colore1 + cell1clp + colore1 + cell3clp + colore1 + cell5clp + colore1 + cell7clp + inizioriga2;

      partial_rtf_text += " \\cell";

      partial_rtf_text += " " + node["opzione1"].ToString() + "\\cell";

      partial_rtf_text += " " + node["opzione2"].ToString() + "\\cell";

      partial_rtf_text += " " + node["opzione3"].ToString() + "\\cell";

      partial_rtf_text += fineriga;

      if (node["Nota"] != null && node["Nota"].ToString().Trim() != "")
      {
        partial_rtf_text += inizioriga + "\n" + colore1 + cell1clp + colore1 + cell8clp + inizioriga2;

        partial_rtf_text += "\\line " + "\\cell";
        partial_rtf_text += "\\line \\i " + "Nota: " +
          node["Nota"].ToString().Trim().Replace(NEW_LINE, "  \\line ") + " \\i0 \\cell";

        partial_rtf_text += fineriga;
      }

      partial_rtf_text += "{\\pard \\brdrb \\brdrs\\brdrw10\\brsp20 {\\fs4\\~}\\par \\pard}";

      return partial_rtf_text;
    }

    #endregion

    #region Pianificazione

    string cell1clpp = "\\clvertalc\\cellx3000";
    string cell2clpp = "\\clvertalc\\cellx4500";
    string cell3clpp = "\\clvertalc\\cellx6000";
    string cell4clpp = "\\clvertalc\\cellx7500";
    string cell5clpp = "\\clvertalc\\cellx9900";

    private string AddPianificazione(XmlNode nodeTree)
    {
      DataTable dati = cBusinessObjects.GetData(int.Parse(nodeTree.Attributes["ID"].Value), typeof(Pianificazione), idcliente, idsessione, idtree);

      string partial_rtf_text = "";

      partial_rtf_text += "\\pard\\keep";

      partial_rtf_text += " \\b Definizione dell'intensità di revisione per ogni voce di bilancio \\b0 \\line \\line";

      partial_rtf_text += "\\par";

      partial_rtf_text += "\\pard\\keep";

      partial_rtf_text += inizioriga + "\n" + colore1 + cell1clpp + colore1 + cell4clpp + colore1 + cell5clpp + inizioriga2;

      partial_rtf_text += " \\qc " + "VOCI DI BILANCIO" + "\\cell";

      partial_rtf_text += " \\qc " + "INTENSITA' DI REVISIONE" + "\\cell";

      partial_rtf_text += " \\qc " + "Esecutore della revisione" + "\\cell";

      partial_rtf_text += fineriga;

      partial_rtf_text += inizioriga + "\n" + colore1 + cell1clpp + colore1 + cell2clpp + colore1 + cell3clpp + colore1 + cell4clpp + colore1 + cell5clpp + inizioriga2;

      partial_rtf_text += " \\line " + "\\cell";

      partial_rtf_text += " \\qc " + "ALTA" + "\\cell";

      partial_rtf_text += " \\qc " + "BASSA" + "\\cell";

      partial_rtf_text += " \\qc " + "N/A" + "\\cell";

      partial_rtf_text += " \\qc " + "della voce specifica" + "\\cell";

      partial_rtf_text += fineriga;

      foreach (DataRow dtrow in dati.Rows)
      {

        partial_rtf_text += AddNodoPianificazionet(dtrow);
      }

      partial_rtf_text += "\\line\\pard\\bgdkdcross\\cfpat1\\shading59110\\tx2291\\par";

      partial_rtf_text += "\\line";

      partial_rtf_text += "\\pard\\keep";

      partial_rtf_text += " \\b Considerazioni che hanno determinato le scelte di pianificazione \\b0 \\line \\line ";
      //MM DADEFINIRE
      //   partial_rtf_text += ((nodeData.Attributes["Testo"] != null)
      //     ? nodeData.Attributes["Testo"].Value.Replace(NEW_LINE, " \\line ") : "");

      partial_rtf_text += "\\par \\line";

      return partial_rtf_text;
    }

    private string AddNodoPianificazionet(DataRow node)
    {
      string partial_rtf_text = "";

      partial_rtf_text += inizioriga + "\n" + colore1 + cell1clpp + colore1 + cell2clpp + colore1 + cell3clpp + colore1 + cell4clpp + colore1 + cell5clpp + inizioriga2;

      partial_rtf_text += " \\ql " + node["Titolo"].ToString() + " \\line \\cell";

      partial_rtf_text += " \\f1 \\qc " + ((node["Valore"].ToString() == "Alta") ? checkbox_Cheched : checkbox_UnCheched) + "\\f0\\cell";

      partial_rtf_text += " \\f1 \\qc " + ((node["Valore"].ToString() == "Bassa") ? checkbox_Cheched : checkbox_UnCheched) + "\\f0\\cell";

      partial_rtf_text += " \\f1 \\qc " + ((node["Valore"].ToString() == "NA" || node["Valore"].ToString() == "") ? checkbox_Cheched : checkbox_UnCheched) + "\\f0\\cell";

      partial_rtf_text += "  \\ql " + node["Esecutore"].ToString() + "\\cell";

      partial_rtf_text += fineriga;

      if (node["Nota"].ToString() != "" && node["Nota"].ToString().Trim() != "")
      {
        partial_rtf_text += inizioriga + "\n" + colore1 + cell5clpp + inizioriga2;

        partial_rtf_text += " \\ql \\b Nota: \\b0 \\i" +
          node["Nota"].ToString().Trim().Replace(NEW_LINE, " \\line ") +
          " \\i0 \\line \\line \\cell ";

        partial_rtf_text += fineriga;
      }

      return partial_rtf_text;
    }

    #endregion

    #region PianificazioneNew

    string cell1clppNew = "\\clvertalc\\cellx1000";
    string cell2clppNew = "\\clvertalc\\cellx4500";
    string cell2clppNewbis = "\\clvertalc\\cellx3800";
    string cell2clppNewbis2 = "\\clvertalc\\cellx4500";
    string cell2clppNewbis3 = "\\clvertalc\\cellx3000";
    string cell3clppNew = "\\clvertalc\\cellx4800";

    string cell4clppNew = "\\clvertalc\\cellx5100";
    string cell5clppNew = "\\clvertalc\\cellx5400";
    string cell6clppNew = "\\clvertalc\\cellx5700";
    string cell7clppNew = "\\clvertalc\\cellx6000";
    string cell8clppNew = "\\clvertalc\\cellx6300";
    string cell9clppNew = "\\clvertalc\\cellx6600";
    string cell10clppNew = "\\clvertalc\\cellx6900";
    string cell11clppNew = "\\clvertalc\\cellx9900";

    string cell4bisclppNew = "\\clvertalc\\cellx6000";
    string cell4bisbisclppNew = "\\clvertalc\\cellx6300";
    string cell5bisclppNew = "\\clvertalc\\cellx6600";
    string cell6bisclppNew = "\\clvertalc\\cellx6900";
    string cell7bisclppNew = "\\clvertalc\\cellx7200";
    string cell8bisclppNew = "\\clvertalc\\cellx7500";
    string cell9bisclppNew = "\\clvertalc\\cellx7800";
    string cell10bisclppNew = "\\clvertalc\\cellx8100";
    string cell11bisclppNew = "\\clvertalc\\cellx9900";

    string cell1clppNewDetails = "\\clvertalc\\cellx4000";
    string cell2clppNewDetails = "\\clvertalc\\cellx5200";
    string cell3clppNewDetails = "\\clvertalc\\cellx5600";
    string cell4clppNewDetails = "\\clvertalc\\cellx6000";
    string cell5clppNewDetails = "\\clvertalc\\cellx6800";
    string cell6clppNewDetails = "\\clvertalc\\cellx7200";
    string cell7clppNewDetails = "\\clvertalc\\cellx7500";
    string cell8clppNewDetails = "\\clvertalc\\cellx7800";
    string cell9clppNewDetails = "\\clvertalc\\cellx8100";
    string cell10clppNewDetails = "\\clvertalc\\cellx8400";
    string cell11clppNewDetails = "\\clvertalc\\cellx8700";
    string cell12clppNewDetails = "\\clvertalc\\cellx9000";
    string cell13clppNewDetails = "\\clvertalc\\cellx9900";

    private string AddPianificazioneNewWithDetails(XmlNode nodeTree, string ID)
    {


      DataTable datiN = cBusinessObjects.GetData(int.Parse(ID), typeof(PianificazioneNewWD_Node),idcliente,idsessione,1);
      DataTable datiV = cBusinessObjects.GetData(int.Parse(ID), typeof(PianificazioneNewWD_Valore),idcliente,idsessione,1);
           // mette a posto bug delle colonne invertite
           
                bool NotenumericoRealR = true;
                bool NotenumericoNumber = true;
                bool notatrovata = false;
                 int n;
                 foreach (DataRow dd in datiV.Rows)
                 {
                    if(dd["NoteRealRow"].ToString()!="")
                    {
                       notatrovata = true;
                       NotenumericoRealR= int.TryParse(dd["NoteRealRow"].ToString(), out n);
                       NotenumericoNumber= int.TryParse(dd["NoteNumber"].ToString(), out n);
                    }
                    
                    if ( !NotenumericoRealR ||  !NotenumericoNumber )
                        break;
                 }

                 if(notatrovata &&  ( !NotenumericoRealR ||  !NotenumericoNumber ))
                 {
                 
                    foreach (DataRow dd in datiV.Rows)
                    { 
                        string tempNoteRealRow=dd["NoteRealRow"].ToString();
                        string tempNoteNumber=dd["NoteNumber"].ToString();
                        string tempNote=dd["Note"].ToString();

                        if(!NotenumericoRealR )
                        {
                           dd["Note"] = tempNoteRealRow;
                           dd["NoteRealRow"] = tempNote;
                        }
                        if(!NotenumericoNumber )
                        {
                           dd["Note"] = tempNoteNumber;
                           dd["NoteNumber"] = tempNote;
                        }
                        tempNoteRealRow=dd["NoteRealRow"].ToString();
                        tempNoteNumber=dd["NoteNumber"].ToString();
                        int NoteNumberInt = 0;
                        int NoteRealRowInt = 0;
                        int.TryParse(tempNoteRealRow, out NoteRealRowInt);
                        int.TryParse(tempNoteNumber, out NoteNumberInt);
                        if(NoteNumberInt>NoteRealRowInt)
                        {
                           dd["NoteRealRow"] = tempNoteNumber;
                           dd["NoteNumber"] = tempNoteRealRow;
                        }
                    }

                    datiV.AcceptChanges();
                    cBusinessObjects.SaveData(int.Parse(ID), datiV, typeof(PianificazioneNewWD_Valore));
                 }
 
      DataTable datiVRighe = cBusinessObjects.GetData(int.Parse(ID), typeof(PianificazioneNewWD_ValoreRighe),idcliente,idsessione,1);
      

    
      string partial_rtf_text = "";

      partial_rtf_text += "\\pard\\keep";

      if (datiN.Rows.Count > 0) // (nodeData.Attributes["PianificazioneNewSingle"] != null)
      {
        if (true) // || strPianificazioneNewSingle == "Estesa")
        {
          afterpianificazione = true;


          string partial_rtf_text2 = "";

          partial_rtf_text2 += "\\par";

          partial_rtf_text2 += "\\pard\\keep";

          //partial_rtf_text2 += " \\b Legenda Evidenze: A \\b0 = Esame Fisico \\b B \\b0 = Conferma \\b C \\b0 = Documentazione \\b D \\b0 = Procedura di analisi comparativa \\b E \\b0 = Indagine \\b F \\b0 = Ripetizione \\b G \\b0 = Osservazione diretta  \\line ";
          partial_rtf_text2 += " \\b Legenda Evidenze: A \\b0 = Ispezione \\b B \\b0 = Osservazione \\b C \\b0 = Conferma esterna \\b D \\b0 = Ricalcolo \\b E \\b0 = Riesecuzione \\b F \\b0 = Procedure di analisi comparativa \\b G \\b0 = Indagine  \\line ";
          partial_rtf_text2 += " \\b ET \\b0 = Errore Trascurabile \\b MO \\b0 = Materialità Operativa \\line ";

          partial_rtf_text2 += " \\line \\pard\\keep";

          string partial_rtf_text2_Valuenode = "";

          string partial_rtf_text2_Notenode = "";

          foreach (DataRow item in datiN.Rows)
          {
          
            foreach (DataRow item2 in datiV.Rows)
            {
          
              if (item2["Codice"].ToString() != item["Voce"].ToString())
                continue;
               
              partial_rtf_text2_Valuenode += inizioriga + "\n" + colore1 + cell1clppNewDetails + colore1 + cell2clppNewDetails + colore1 + cell3clppNewDetails + colore1 + cell4clppNewDetails + colore1 + cell5clppNewDetails + colore1 + cell6clppNewDetails + colore1 + cell7clppNewDetails + colore1 + cell8clppNewDetails + colore1 + cell9clppNewDetails + colore1 + cell10clppNewDetails + colore1 + cell11clppNewDetails + colore1 + cell12clppNewDetails + colore1 + cell13clppNewDetails + inizioriga2;

              partial_rtf_text2_Valuenode += " \\ql " + ((item2["Titolo"].ToString() == "") ? "" : ((item2["Titolo"].ToString() == "Totale") ? item2["Tipo"].ToString() : item2["Titolo"].ToString())) + " \\cell";
              partial_rtf_text2_Valuenode += " \\qr " + ((item2["EA"].ToString() == "") ? "" : item2["EA"].ToString()) + " \\cell";
              partial_rtf_text2_Valuenode += " \\f1 \\qc " + ((item2["ET"].ToString() == "") ? "" : ((item2["ET"].ToString() == "True") ? checkbox_Cheched : checkbox_UnCheched)) + "\\f0\\cell";
              partial_rtf_text2_Valuenode += " \\f1 \\qc " + ((item2["MO"].ToString() == "") ? "" : ((item2["MO"].ToString() == "True") ? checkbox_Cheched : checkbox_UnCheched)) + "\\f0\\cell";

              partial_rtf_text2_Valuenode += " \\qc " + ((item2["CONTROLLO"].ToString() == "") ? "" : ((item2["CONTROLLO"].ToString() == "True") ? "SI" : ((item2["CONTROLLO"].ToString() == "False") ? "NO" : "?"))) + "\\cell";

              partial_rtf_text2_Valuenode += " \\f1 \\qc " + ((item2["EsameFisico"].ToString() == "") ? "" : ((item2["EsameFisico"].ToString() == "X") ? "" : ((item2["EsameFisico"].ToString() == "True") ? checkbox_Cheched : checkbox_UnCheched))) + "\\f0\\cell";
              partial_rtf_text2_Valuenode += " \\f1 \\qc " + ((item2["Ispezione"].ToString() == "") ? "" : ((item2["Ispezione"].ToString() == "X") ? "" : ((item2["Ispezione"].ToString() == "True") ? checkbox_Cheched : checkbox_UnCheched))) + "\\f0\\cell";
              partial_rtf_text2_Valuenode += " \\f1 \\qc " + ((item2["Indagine"].ToString() == "") ? "" : ((item2["Indagine"].ToString() == "X") ? "" : ((item2["Indagine"].ToString() == "True") ? checkbox_Cheched : checkbox_UnCheched))) + "\\f0\\cell";
              partial_rtf_text2_Valuenode += " \\f1 \\qc " + ((item2["Osservazione"].ToString() == "") ? "" : ((item2["Osservazione"].ToString() == "X") ? "" : ((item2["Osservazione"].ToString() == "True") ? checkbox_Cheched : checkbox_UnCheched))) + "\\f0\\cell";
              partial_rtf_text2_Valuenode += " \\f1 \\qc " + ((item2["Ricalcolo"].ToString() == "") ? "" : ((item2["Ricalcolo"].ToString() == "X") ? "" : ((item2["Ricalcolo"].ToString() == "True") ? checkbox_Cheched : checkbox_UnCheched))) + "\\f0\\cell";
              partial_rtf_text2_Valuenode += " \\f1 \\qc " + ((item2["Riesecuzione"].ToString() == "") ? "" : ((item2["Riesecuzione"].ToString() == "X") ? "" : ((item2["Riesecuzione"].ToString() == "True") ? checkbox_Cheched : checkbox_UnCheched))) + "\\f0\\cell";
              partial_rtf_text2_Valuenode += " \\f1 \\qc " + ((item2["Conferma"].ToString() == "") ? "" : ((item2["Conferma"].ToString() == "X") ? "" : ((item2["Conferma"].ToString() == "True") ? checkbox_Cheched : checkbox_UnCheched))) + "\\f0\\cell";


              partial_rtf_text2_Valuenode += " \\qc " + ((item2["NoteNumber"].ToString() == "") ? "" : item2["NoteNumber"].ToString()) + " \\cell";

              partial_rtf_text2_Valuenode += fineriga;
            
              foreach (DataRow dt in datiVRighe.Rows)
              {
                if (dt["ID"].ToString() != item2["ID"].ToString())
                  continue;



                partial_rtf_text2_Valuenode += inizioriga + "\n" + colore2 + cell1clppNewDetails + colore2 + cell2clppNewDetails + colore1 + cell3clppNewDetails + colore1 + cell4clppNewDetails + colore1 + cell5clppNewDetails + colore1 + cell6clppNewDetails + colore1 + cell7clppNewDetails + colore1 + cell8clppNewDetails + colore1 + cell9clppNewDetails + colore1 + cell10clppNewDetails + colore1 + cell11clppNewDetails + colore1 + cell12clppNewDetails + colore1 + cell13clppNewDetails + inizioriga2;

                partial_rtf_text2_Valuenode += " \\ql " + ((dt["Codice"].ToString() == "") ? "" : dt["Codice"].ToString()) + " - " + ((dt["Titolo"].ToString() == "") ? "" : item2["Titolo"].ToString()) + " \\cell";
                partial_rtf_text2_Valuenode += " \\qr " + ((dt["EA"].ToString() == "") ? "" : ConvertNumberNoDecimal(dt["EA"].ToString())) + " \\cell";
                partial_rtf_text2_Valuenode += " \\f1 \\qc " + "" + "\\f0\\cell";
                partial_rtf_text2_Valuenode += " \\f1 \\qc " + "" + "\\f0\\cell";

                partial_rtf_text2_Valuenode += " \\qc " + "" + "\\cell";

                partial_rtf_text2_Valuenode += " \\f1 \\qc " + "" + "\\f0\\cell";
                partial_rtf_text2_Valuenode += " \\f1 \\qc " + "" + "\\f0\\cell";
                partial_rtf_text2_Valuenode += " \\f1 \\qc " + "" + "\\f0\\cell";
                partial_rtf_text2_Valuenode += " \\f1 \\qc " + "" + "\\f0\\cell";
                partial_rtf_text2_Valuenode += " \\f1 \\qc " + "" + "\\f0\\cell";
                partial_rtf_text2_Valuenode += " \\f1 \\qc " + "" + "\\f0\\cell";
                partial_rtf_text2_Valuenode += " \\f1 \\qc " + "" + "\\f0\\cell";


                partial_rtf_text2_Valuenode += " \\ql " + "" + " \\cell";

                partial_rtf_text2_Valuenode += fineriga;

              }
             

              if (item2["NoteNumber"].ToString() != "")
              {
                partial_rtf_text2_Notenode += " \\b " + ((item2["NoteNumber"].ToString() == "") ? "" : item2["NoteNumber"].ToString()) + ": \\b0 " + ((item2["Note"].ToString() == "") ? "" : item2["Note"].ToString()) + " \\line ";

              }

            }

          

            partial_rtf_text2 += "\\par";

            partial_rtf_text2 += " \\b " + item["Voce"].ToString() + " - " + item["Titolo"].ToString() + " \\b0 \\line ";

            partial_rtf_text2 += " \\pard\\keep";

            if (item["Esecutore"].ToString() != "" && item["Esecutore"].ToString() != "")
            {
              partial_rtf_text2 += "\\par";

              partial_rtf_text2 += " Esecutore: " + item["Esecutore"].ToString() + " \\line ";

              partial_rtf_text2 += " \\pard\\keep";
            }

            if (item["Nota"].ToString() != "" && item["Nota"].ToString() != "")
            {
              partial_rtf_text2 += "\\par";

              partial_rtf_text2 += " Note: " + item["Nota"].ToString() + " \\line ";

              partial_rtf_text2 += " \\pard\\keep";
            }

            if (item["cmbRI"].ToString() != "" && item["cmbRI"].ToString() != "")
            {
              partial_rtf_text2 += "\\par";

              string riscelto = "Non Selezionato";

              switch (item["cmbRI"].ToString())
              {
                case "MA":
                  riscelto = "Molto Alto";
                  break;
                case "A":
                  riscelto = "Alto";
                  break;
                case "M":
                  riscelto = "Medio";
                  break;
                case "B":
                  riscelto = "Basso";
                  break;
                case "MB":
                  riscelto = "Molto Basso";
                  break;
                case "PV":
                  riscelto = "Procedure di Validità";
                  break;
                default:
                case "NA":
                  riscelto = "Non Applicabile";
                  break;
              }

              partial_rtf_text2 += " Rischio di individuazione scelto: " + riscelto + " \\line ";

              partial_rtf_text2 += " \\pard\\keep";
            }

        
            partial_rtf_text2 += "\\par";

            partial_rtf_text2 += "\\pard\\keep";

            partial_rtf_text2 += inizioriga + "\n" + colore1 + cell1clppNewDetails + colore1 + cell2clppNewDetails + colore1 + cell4clppNewDetails + colore1 + cell5clppNewDetails + colore1 + cell12clppNewDetails + colore1 + cell13clppNewDetails + inizioriga2;

            partial_rtf_text2 += " \\qc " + "VOCI DI BILANCIO" + "\\cell";

            partial_rtf_text2 += " \\qc " + "VALORE" + "\\cell";

            partial_rtf_text2 += " \\qc " + "INF A" + "\\cell";

            partial_rtf_text2 += " \\qc " + "CONT" + "\\cell";

            partial_rtf_text2 += " \\qc " + "EVIDENZE" + "\\cell";

            partial_rtf_text2 += " \\qc " + "NOTE" + "\\cell";

            partial_rtf_text2 += fineriga;

            partial_rtf_text2 += inizioriga + "\n" + colore1 + cell1clppNewDetails + colore1 + cell2clppNewDetails + colore1 + cell3clppNewDetails + colore1 + cell4clppNewDetails + colore1 + cell5clppNewDetails + colore1 + cell6clppNewDetails + colore1 + cell7clppNewDetails + colore1 + cell8clppNewDetails + colore1 + cell9clppNewDetails + colore1 + cell10clppNewDetails + colore1 + cell11clppNewDetails + colore1 + cell12clppNewDetails + colore1 + cell13clppNewDetails + inizioriga2;

            partial_rtf_text2 += " \\qc \\line " + "" + "\\line \\cell";
            partial_rtf_text2 += " \\qc \\line " + "" + "\\line \\cell";
            partial_rtf_text2 += " \\qc \\line " + "ET" + "\\line \\cell";
            partial_rtf_text2 += " \\qc \\line " + "MO" + "\\line \\cell";

            partial_rtf_text2 += " \\qc \\line " + "ROLLO" + "\\line \\cell";

            partial_rtf_text2 += " \\qc \\line " + "A" + "\\line \\cell";
            partial_rtf_text2 += " \\qc \\line " + "B" + "\\line \\cell";
            partial_rtf_text2 += " \\qc \\line " + "C" + "\\line \\cell";
            partial_rtf_text2 += " \\qc \\line " + "D" + "\\line \\cell";
            partial_rtf_text2 += " \\qc \\line " + "E" + "\\line \\cell";
            partial_rtf_text2 += " \\qc \\line " + "F" + "\\line \\cell";
            partial_rtf_text2 += " \\qc \\line " + "G" + "\\line \\cell";

            partial_rtf_text2 += " \\qc \\line " + "" + "\\line \\cell";

            partial_rtf_text2 += fineriga;

            partial_rtf_text2 += partial_rtf_text2_Valuenode;
     partial_rtf_text2 += "\\line\\pard\\bgdkdcross\\cfpat1\\shading59110\\tx2291\\par";
            partial_rtf_text2 += "\\line\\par";

            partial_rtf_text2 += "\\pard\\keep";

            partial_rtf_text2 += partial_rtf_text2_Notenode;
            partial_rtf_text2 += "\\line\\pard\\bgdkdcross\\cfpat1\\shading59110\\tx2291\\par";  
            partial_rtf_text2 += "\\line\\par";

            partial_rtf_text2 += "\\pard\\keep";

            partial_rtf_text2_Valuenode = "";
            partial_rtf_text2_Notenode = "";

            //  if (nodeTree.Attributes["Codice"].ToString().Contains(item["Voce"].ToString()))
            //  {
            //  partial_rtf_text += partial_rtf_text2;
            //    break;
            //          }
            // else
            //              {
            //             partial_rtf_text2 = "";
            //          }

           partial_rtf_text2 += "\\line\\pard\\bgdkdcross\\cfpat1\\shading59110\\tx2291\\par";

            partial_rtf_text2 += "\\line";

            partial_rtf_text2 += "\\pard\\keep";
          }

          partial_rtf_text += partial_rtf_text2;

        }
        else
        {
          ;
        }
      }
      else
      {
        #region materialità

        string ID_Materialità_1 = "77";
        string ID_Materialità_2 = "78";
        string ID_Materialità_3 = "199";

        bool Materialità_1 = false;
        bool Materialità_2 = false;
        bool Materialità_3 = false;


        DataTable tmpNode = null;
        //DataRow tmpNodeRow = null;

        DataTable tmpNode_true = null;
        string idsessionedatimaterialita = cBusinessObjects.CercaSessione("Conclusione", "Revisione", idsessione.ToString(), cBusinessObjects.idcliente);



        tmpNode = cBusinessObjects.GetData(int.Parse(ID_Materialità_1), typeof(Excel_LimiteMaterialitaSPCE), idcliente, int.Parse(idsessionedatimaterialita), 1);

        string statomat = "";
        DataTable statom = cBusinessObjects.GetData(int.Parse(ID_Materialità_1), typeof(StatoNodi), idcliente, int.Parse(idsessionedatimaterialita), 1);
        foreach (DataRow dd in statom.Rows)
        {
          statomat = dd["Stato"].ToString().Trim();
        }

        if (tmpNode.Rows.Count > 0 && statomat != "" && ((App.TipoTreeNodeStato)(Convert.ToInt32(statomat))) == App.TipoTreeNodeStato.Completato)
        {
          Materialità_1 = true;
          tmpNode_true = tmpNode;
        }

        tmpNode = cBusinessObjects.GetData(int.Parse(ID_Materialità_2), typeof(Excel_LimiteMaterialitaSPCE), idcliente, int.Parse(idsessionedatimaterialita), 1);

        statomat = "";
        statom = cBusinessObjects.GetData(int.Parse(ID_Materialità_2), typeof(StatoNodi), idcliente, int.Parse(idsessionedatimaterialita), 1);
        foreach (DataRow dd in statom.Rows)
        {
          statomat = dd["Stato"].ToString().Trim();
        }

        if (tmpNode.Rows.Count > 0 && statomat != "" && ((App.TipoTreeNodeStato)(Convert.ToInt32(statomat))) == App.TipoTreeNodeStato.Completato)
        {
          Materialità_2 = true;
          tmpNode_true = tmpNode;
        }

        tmpNode = cBusinessObjects.GetData(int.Parse(ID_Materialità_3), typeof(Excel_LimiteMaterialitaSPCE), idcliente, int.Parse(idsessionedatimaterialita), 1);

        statomat = "";
        statom = cBusinessObjects.GetData(int.Parse(ID_Materialità_3), typeof(StatoNodi), idcliente, int.Parse(idsessionedatimaterialita), 1);
        foreach (DataRow dd in statom.Rows)
        {
          statomat = dd["Stato"].ToString().Trim();
        }

        if (tmpNode.Rows.Count > 0 && statomat != "" && ((App.TipoTreeNodeStato)(Convert.ToInt32(statomat))) == App.TipoTreeNodeStato.Completato)
        {
          Materialità_3 = true;
          tmpNode_true = tmpNode;
        }




        if (tmpNode_true != null)
        {
          partial_rtf_text += "\\pard\\bgdkdcross\\cfpat1\\shading59110\\tx2291\\par";


          partial_rtf_text += "\\pard\\keep";

          partial_rtf_text += iniziorigaTP + "\n" + colore3 + cell4m + ((Materialità_1) ? "" : bordi + colore3 + cell5m) + bordi + colore3 + cell6m + inizioriga2;

          partial_rtf_text += " \\ql \\fs20 \\b Richiamo Materialità Bilancio \\fs20 \\b0\\cell";
          if (Materialità_1)
          {
            partial_rtf_text += " \\qc \\fs16 \\b S.P. e C.E. \\b0\\cell";
          }
          else
          {
            partial_rtf_text += " \\qc \\fs16 S.P. \\b0\\cell";
            partial_rtf_text += " \\qc \\fs16 C.E. \\b0\\cell";
          }

          partial_rtf_text += finerigaTP;

          partial_rtf_text += iniziorigaTP + "\n" + bordi + colore3 + cell4m + ((Materialità_1) ? "" : bordi + colore3 + cell5m) + bordi + colore3 + cell6m + inizioriga2;

          partial_rtf_text += " \\ql \\fs20 Materialità totale \\fs20 \\b0\\cell";

          if (Materialità_1)
          {
            partial_rtf_text += " \\qc \\fs16 " + ((getvalmat(tmpNode, "txt7BILANCIO") == "") ? "" : getvalmat(tmpNode, "txt7BILANCIO")) + " \\b0\\cell";
          }
          else if (Materialità_2)
          {
            partial_rtf_text += " \\qc \\fs16 " + ((getvalmat(tmpNode, "txt7_2spBILANCIO") == "") ? "" : getvalmat(tmpNode, "txt7_2spBILANCIO")) + " \\b0\\cell";
            partial_rtf_text += " \\qc \\fs16 " + ((getvalmat(tmpNode, "txt7_2ceBILANCIO") == "") ? "" : getvalmat(tmpNode, "txt7_2ceBILANCIO")) + " \\b0\\cell";
          }
          else
          {
            partial_rtf_text += " \\qc \\fs16 " + ((getvalmat(tmpNode, "txt7_3spBILANCIO") == "") ? "" : getvalmat(tmpNode, "txt7_3spBILANCIO")) + " \\b0\\cell";
            partial_rtf_text += " \\qc \\fs16 " + ((getvalmat(tmpNode, "txt7_3ceBILANCIO") == "") ? "" : getvalmat(tmpNode, "txt7_3ceBILANCIO")) + " \\b0\\cell";
          }

          partial_rtf_text += finerigaTP;

          partial_rtf_text += " \\ql \\fs20 Errore Trascurabile \\fs20 \\b0\\cell";

          if (Materialità_1)
          {
            partial_rtf_text += " \\qc \\fs16 " + ((getvalmat(tmpNode, "txt9BILANCIO") == "") ? "" : getvalmat(tmpNode, "txt9BILANCIO")) + " \\b0\\cell";
          }
          else if (Materialità_2)
          {
            partial_rtf_text += " \\qc \\fs16 " + ((getvalmat(tmpNode, "txt9_2spBILANCIO") == "") ? "" : getvalmat(tmpNode, "txt9_2spBILANCIO")) + " \\b0\\cell";
            partial_rtf_text += " \\qc \\fs16 " + ((getvalmat(tmpNode, "txt9_2ceBILANCIO") == "") ? "" : getvalmat(tmpNode, "txt9_2ceBILANCIO")) + " \\b0\\cell";
          }
          else
          {
            partial_rtf_text += " \\qc \\fs16 " + ((getvalmat(tmpNode, "txt9_3spBILANCIO") == "") ? "" : getvalmat(tmpNode, "txt9_3spBILANCIO")) + " \\b0\\cell";
            partial_rtf_text += " \\qc \\fs16 " + ((getvalmat(tmpNode, "txt9_3ceBILANCIO") == "") ? "" : getvalmat(tmpNode, "txt9_3ceBILANCIO")) + " \\b0\\cell";
          }

          partial_rtf_text += finerigaTP;

          partial_rtf_text += " \\ql \\fs20 Materialità Operativa \\fs20 \\b0\\cell";

          if (Materialità_1)
          {
            partial_rtf_text += " \\qc \\fs16 " + ((getvalmat(tmpNode, "txt12BILANCIO") == "") ? "" : getvalmat(tmpNode, "txt12BILANCIO")) + " \\b0\\cell";
          }
          else if (Materialità_2)
          {
            partial_rtf_text += " \\qc \\fs16 " + ((getvalmat(tmpNode, "txt12_2spBILANCIO") == "") ? "" : getvalmat(tmpNode, "txt12_2spBILANCIO")) + " \\b0\\cell";
            partial_rtf_text += " \\qc \\fs16 " + ((getvalmat(tmpNode, "txt12_2ceBILANCIO") == "") ? "" : getvalmat(tmpNode, "txt12_2ceBILANCIO")) + " \\b0\\cell";
          }
          else
          {
            partial_rtf_text += " \\qc \\fs16 " + ((getvalmat(tmpNode, "txt12_3spBILANCIO") == "") ? "" : getvalmat(tmpNode, "txt12_3spBILANCIO")) + " \\b0\\cell";
            partial_rtf_text += " \\qc \\fs16 " + ((getvalmat(tmpNode, "txt12_3ceBILANCIO") == "") ? "" : getvalmat(tmpNode, "txt12_3ceBILANCIO")) + " \\b0\\cell";
          }

          partial_rtf_text += finerigaTP;

          //partial_rtf_text += iniziorigaTP + "\n" + colore3 + cell3m + colore3 + cell4m + colore2 + bordi + cell6m + inizioriga2;

          //partial_rtf_text += " \\ql \\fs20 MATERIALITA' - MEDIA fra minimi e massimi \\fs20 \\b0\\cell";
          //partial_rtf_text += " \\qc  \\b0\\cell";
          //partial_rtf_text += " \\qc \\fs16 " + ((nodenodo.Attributes["txt7_2spBILANCIO"].ToString()=="") ? "" : nodenodo.Attributes["txt7_2spBILANCIO"].ToString()) + " \\b0\\cell";

          //partial_rtf_text += finerigaTP;

          //partial_rtf_text += iniziorigaTP + "\n" + colore3 + cell3m + colore2 + bordi + cell4m + colore2 + bordi + cell6m + inizioriga2;

          //partial_rtf_text += " \\ql \\fs20 ERRORE TOLLERABILE \\fs20 \\b0\\cell";
          //partial_rtf_text += " \\qc " + ((nodenodo.Attributes["txt8_2spBILANCIO"].ToString()=="") ? "" : nodenodo.Attributes["txt8_2spBILANCIO"].ToString()) + " \\b0\\cell";
          //partial_rtf_text += " \\qc \\fs16 " + ((nodenodo.Attributes["txt9_2spBILANCIO"].ToString()=="") ? "" : nodenodo.Attributes["txt9_2spBILANCIO"].ToString()) + " \\b0\\cell";

          //partial_rtf_text += finerigaTP;

          //partial_rtf_text += iniziorigaTP + "\n" + colore2 + cell3m + colore2 + bordi + cell4m + colore2 + bordi + cell6m + inizioriga2;

          //partial_rtf_text += " \\ql \\fs20 Materialità Operativa  \\fs20 \\b0\\cell";
          //partial_rtf_text += " \\qc " + ((nodenodo.Attributes["txt10_2spBILANCIO"].ToString()=="") ? "" : nodenodo.Attributes["txt10_2spBILANCIO"].ToString()) + " \\b0\\cell";
          //partial_rtf_text += " \\qc \\fs16 " + ((nodenodo.Attributes["txt12_2spBILANCIO"].ToString()=="") ? "" : nodenodo.Attributes["txt12_2spBILANCIO"].ToString()) + " \\b0\\cell";

          //partial_rtf_text += finerigaTP;

          partial_rtf_text += "\\line\\pard\\bgdkdcross\\cfpat1\\shading59110\\tx2291\\par";
        }

        #endregion

        partial_rtf_text += "\\pard\\bgdkdcross\\cfpat1\\shading59110\\tx2291\\par";

        partial_rtf_text += inizioriga + "\n" + colore1 + cell13clppNewDetails + inizioriga2;

        partial_rtf_text += " \\b \\fs24 \\qc Definizione dell'intensità di revisione per ogni voce di bilancio \\fs20 \\b0 \\line " + "\\cell";

        partial_rtf_text += fineriga;

        partial_rtf_text += inizioriga + "\n" + colore1 + bordisxuprx + cell13clppNewDetails + inizioriga2;

        //partial_rtf_text += " \\b Legenda Evidenze: A \\b0 = Esame Fisico \\b B \\b0 = Conferma \\b C \\b0 = Documentazione \\b D \\b0 = Procedura di analisi comparativa \\b E \\b0 = Indagine \\b F \\b0 = Ripetizione \\b G \\b0 = Osservazione diretta" + "\\cell";
        partial_rtf_text += " \\b Legenda Evidenze: A \\b0 = Ispezione \\b B \\b0 = Osservazione \\b C \\b0 = Conferma esterna \\b D \\b0 = Ricalcolo \\b E \\b0 = Riesecuzione \\b F \\b0 = Procedure di analisi comparativa \\b G \\b0 = Indagine  " + "\\cell";

        partial_rtf_text += fineriga;

        partial_rtf_text += inizioriga + "\n" + colore1 + bordisxdwrx + cell13clppNewDetails + inizioriga2;

        partial_rtf_text += " \\qc \\b ET \\b0 = Errore Trascurabile \\b MO \\b0 = Materialità Operativa" + "\\cell";

        partial_rtf_text += fineriga;

        partial_rtf_text += " \\pard\\keep";

        string partial_rtf_text_Valuenode = "";
        string partial_rtf_text_Notenode = "";

        bool atleastone = false;

        foreach (DataRow item in datiN.Rows)
        {
          foreach (DataRow item2 in datiV.Rows)
          {
            //  if (item2["ToBePrinted"].ToString()=="")
            //   {
            //              continue;
            //          }
            if (item2["Codice"].ToString() != item["Voce"].ToString())
              continue;
            atleastone = true;

            partial_rtf_text_Valuenode += inizioriga + "\n" + colore1 + cell1clppNewDetails + colore1 + cell2clppNewDetails + colore1 + cell3clppNewDetails + colore1 + cell4clppNewDetails + colore1 + cell5clppNewDetails + colore1 + cell6clppNewDetails + colore1 + cell7clppNewDetails + colore1 + cell8clppNewDetails + colore1 + cell9clppNewDetails + colore1 + cell10clppNewDetails + colore1 + cell11clppNewDetails + colore1 + cell12clppNewDetails + colore1 + cell13clppNewDetails + inizioriga2;

            partial_rtf_text_Valuenode += " \\ql " + ((item2["Titolo"].ToString() == "") ? "" : ((item2["Titolo"].ToString() == "Totale") ? (" \\b " + item2["Tipo"].ToString() + " \\b0 ") : item2["Titolo"].ToString())) + " \\cell";
            partial_rtf_text_Valuenode += " \\qr " + ((item2["EA"].ToString() == "") ? "" : item2["EA"].ToString()) + " \\cell";
            partial_rtf_text_Valuenode += " \\f1 \\qc " + ((item2["ET"].ToString() == "") ? "" : ((item2["ET"].ToString() == "True") ? checkbox_Cheched : checkbox_UnCheched)) + "\\f0\\cell";
            partial_rtf_text_Valuenode += " \\f1 \\qc " + ((item2["MO"].ToString() == "") ? "" : ((item2["MO"].ToString() == "True") ? checkbox_Cheched : checkbox_UnCheched)) + "\\f0\\cell";

            partial_rtf_text_Valuenode += " \\qc " + ((item2["CONTROLLO"].ToString() == "") ? "" : ((item2["CONTROLLO"].ToString() == "True") ? "SI" : ((item2["CONTROLLO"].ToString() == "False") ? "NO" : "?"))) + "\\cell";

            partial_rtf_text_Valuenode += " \\f1 \\qc " + ((item2["EsameFisico"].ToString() == "") ? "" : ((item2["EsameFisico"].ToString() == "X") ? "" : ((item2["EsameFisico"].ToString() == "True") ? checkbox_Cheched : checkbox_UnCheched))) + "\\f0\\cell";
            partial_rtf_text_Valuenode += " \\f1 \\qc " + ((item2["Ispezione"].ToString() == "") ? "" : ((item2["Ispezione"].ToString() == "X") ? "" : ((item2["Ispezione"].ToString() == "True") ? checkbox_Cheched : checkbox_UnCheched))) + "\\f0\\cell";
            partial_rtf_text_Valuenode += " \\f1 \\qc " + ((item2["Indagine"].ToString() == "") ? "" : ((item2["Indagine"].ToString() == "X") ? "" : ((item2["Indagine"].ToString() == "True") ? checkbox_Cheched : checkbox_UnCheched))) + "\\f0\\cell";
            partial_rtf_text_Valuenode += " \\f1 \\qc " + ((item2["Osservazione"].ToString() == "") ? "" : ((item2["Osservazione"].ToString() == "X") ? "" : ((item2["Osservazione"].ToString() == "True") ? checkbox_Cheched : checkbox_UnCheched))) + "\\f0\\cell";
            partial_rtf_text_Valuenode += " \\f1 \\qc " + ((item2["Ricalcolo"].ToString() == "") ? "" : ((item2["Ricalcolo"].ToString() == "X") ? "" : ((item2["Ricalcolo"].ToString() == "True") ? checkbox_Cheched : checkbox_UnCheched))) + "\\f0\\cell";
            partial_rtf_text_Valuenode += " \\f1 \\qc " + ((item2["Riesecuzione"].ToString() == "") ? "" : ((item2["Riesecuzione"].ToString() == "X") ? "" : ((item2["Riesecuzione"].ToString() == "True") ? checkbox_Cheched : checkbox_UnCheched))) + "\\f0\\cell";
            partial_rtf_text_Valuenode += " \\f1 \\qc " + ((item2["Conferma"].ToString() == "") ? "" : ((item2["Conferma"].ToString() == "X") ? "" : ((item2["Conferma"].ToString() == "True") ? checkbox_Cheched : checkbox_UnCheched))) + "\\f0\\cell";


            partial_rtf_text_Valuenode += " \\qc " + ((item2["NoteNumber"].ToString() == "") ? "" : item2["NoteNumber"].ToString()) + " \\cell";

            partial_rtf_text_Valuenode += fineriga;

            foreach (DataRow dt in datiVRighe.Rows)
            {
              if (dt["ID"].ToString() != item2["ID"].ToString())
                continue;


              partial_rtf_text_Valuenode += inizioriga + "\n" + colore2 + cell1clppNewDetails + colore2 + cell2clppNewDetails + colore1 + cell3clppNewDetails + colore1 + cell4clppNewDetails + colore1 + cell5clppNewDetails + colore1 + cell6clppNewDetails + colore1 + cell7clppNewDetails + colore1 + cell8clppNewDetails + colore1 + cell9clppNewDetails + colore1 + cell10clppNewDetails + colore1 + cell11clppNewDetails + colore1 + cell12clppNewDetails + colore1 + cell13clppNewDetails + inizioriga2;

              partial_rtf_text_Valuenode += " \\ql       " + ((dt["Codice"].ToString() == "") ? "" : dt["Codice"].ToString()) + " - " + ((dt["Titolo"].ToString() == "") ? "" : dt["Titolo"].ToString()) + " \\cell";
              partial_rtf_text_Valuenode += " \\qr " + ((dt["EA"].ToString() == "") ? "" : ConvertNumberNoDecimal(dt["EA"].ToString())) + " \\cell";
              partial_rtf_text_Valuenode += " \\f1 \\qc " + "" + "\\f0\\cell";
              partial_rtf_text_Valuenode += " \\f1 \\qc " + "" + "\\f0\\cell";

              partial_rtf_text_Valuenode += " \\qc " + "" + "\\cell";

              partial_rtf_text_Valuenode += " \\f1 \\qc " + "" + "\\f0\\cell";
              partial_rtf_text_Valuenode += " \\f1 \\qc " + "" + "\\f0\\cell";
              partial_rtf_text_Valuenode += " \\f1 \\qc " + "" + "\\f0\\cell";
              partial_rtf_text_Valuenode += " \\f1 \\qc " + "" + "\\f0\\cell";
              partial_rtf_text_Valuenode += " \\f1 \\qc " + "" + "\\f0\\cell";
              partial_rtf_text_Valuenode += " \\f1 \\qc " + "" + "\\f0\\cell";
              partial_rtf_text_Valuenode += " \\f1 \\qc " + "" + "\\f0\\cell";


              partial_rtf_text_Valuenode += " \\ql " + "" + " \\cell";

              partial_rtf_text_Valuenode += fineriga;

            }

            if (item2["NoteNumber"].ToString() != "")
            {
              partial_rtf_text_Notenode += " \\b " + ((item2["NoteNumber"].ToString() == "") ? "" : item2["NoteNumber"].ToString()) + ": \\b0 " + ((item2["Note"].ToString() == "") ? "" : item2["Note"].ToString()) + " \\line ";

            }
          }
          partial_rtf_text += "\\line\\pard\\bgdkdcross\\cfpat1\\shading59110\\tx2291\\par";

          partial_rtf_text += " \\b " + item["Voce"].ToString() + " - " + item["Titolo"].ToString() + " \\b0 \\line ";

          partial_rtf_text += "\\par";

          if (item["Esecutore"].ToString() != "" && item["Esecutore"].ToString() != "")
          {
            partial_rtf_text += " \\pard\\keep";

            partial_rtf_text += " \\b Esecutore: \\b0 " + item["Esecutore"].ToString() + " \\line ";

            partial_rtf_text += "\\par";
          }

          if (item["Nota"].ToString() != "" && item["Nota"].ToString() != "")
          {
            partial_rtf_text += " \\pard\\keep";

            partial_rtf_text += " \\b Note: \\b0 " + item["Nota"].ToString() + " \\line ";

            partial_rtf_text += "\\par";
          }

          if (item["cmbRI_Proposto"].ToString() != "" && item["cmbRI_Proposto"].ToString() != "")
          {
            partial_rtf_text += " \\pard\\keep";

            string riscelto = "Non Selezionato";

            switch (item["cmbRI_Proposto"].ToString())
            {
              case "MA":
                riscelto = "Molto Alto";
                break;
              case "A":
                riscelto = "Alto";
                break;
              case "M":
                riscelto = "Medio";
                break;
              case "B":
                riscelto = "Basso";
                break;
              case "MB":
                riscelto = "Molto Basso";
                break;
              case "PV":
                riscelto = "Procedure di Validità";
                break;
              case "NA":
                riscelto = "Non Applicabile";
                break;
              default:
                riscelto = item["cmbRI_Proposto"].ToString();
                break;
            }

            partial_rtf_text += " \\b Rischio di individuazione proposto: \\b0 " + riscelto + " \\line ";

            partial_rtf_text += "\\par";
          }

          if (item["cmbRI"].ToString() != "" && item["cmbRI"].ToString() != "")
          {
            partial_rtf_text += " \\pard\\keep";

            string riscelto = "Non Selezionato";

            switch (item["cmbRI"].ToString())
            {
              case "MA":
                riscelto = "Molto Alto";
                break;
              case "A":
                riscelto = "Alto";
                break;
              case "M":
                riscelto = "Medio";
                break;
              case "B":
                riscelto = "Basso";
                break;
              case "MB":
                riscelto = "Molto Basso";
                break;
              case "PV":
                riscelto = "Procedure di Validità";
                break;
              default:
              case "NA":
                riscelto = "Non Applicabile";
                break;
            }

            partial_rtf_text += " \\b Rischio di individuazione scelto: \\b0 " + riscelto + " \\line ";

            partial_rtf_text += "\\par";
          }


          partial_rtf_text += "\\pard\\bgdkdcross\\cfpat1\\shading59110\\tx2291\\par";

          partial_rtf_text += inizioriga + "\n" + colore1 + cell1clppNewDetails + colore1 + cell2clppNewDetails + colore1 + cell4clppNewDetails + colore1 + cell5clppNewDetails + colore1 + cell12clppNewDetails + colore1 + cell13clppNewDetails + inizioriga2;

          partial_rtf_text += " \\qc " + "VOCI DI BILANCIO" + "\\cell";

          partial_rtf_text += " \\qc " + "VALORE" + "\\cell";

          partial_rtf_text += " \\qc " + "INF A" + "\\cell";

          partial_rtf_text += " \\qc " + "CONT" + "\\cell";

          partial_rtf_text += " \\qc " + "EVIDENZE" + "\\cell";

          partial_rtf_text += " \\qc " + "NOTE" + "\\cell";

          partial_rtf_text += fineriga;

          partial_rtf_text += inizioriga + "\n" + colore1 + cell1clppNewDetails + colore1 + cell2clppNewDetails + colore1 + cell3clppNewDetails + colore1 + cell4clppNewDetails + colore1 + cell5clppNewDetails + colore1 + cell6clppNewDetails + colore1 + cell7clppNewDetails + colore1 + cell8clppNewDetails + colore1 + cell9clppNewDetails + colore1 + cell10clppNewDetails + colore1 + cell11clppNewDetails + colore1 + cell12clppNewDetails + colore1 + cell13clppNewDetails + inizioriga2;

          partial_rtf_text += " \\qc " + "" + " \\cell";
          partial_rtf_text += " \\qc " + "" + " \\cell";
          partial_rtf_text += " \\qc " + "ET" + " \\cell";
          partial_rtf_text += " \\qc " + "MO" + " \\cell";

          partial_rtf_text += " \\qc " + "ROLLO" + " \\cell";

          partial_rtf_text += " \\qc " + "A" + " \\cell";
          partial_rtf_text += " \\qc " + "B" + " \\cell";
          partial_rtf_text += " \\qc " + "C" + " \\cell";
          partial_rtf_text += " \\qc " + "D" + " \\cell";
          partial_rtf_text += " \\qc " + "E" + " \\cell";
          partial_rtf_text += " \\qc " + "F" + " \\cell";
          partial_rtf_text += " \\qc " + "G" + " \\cell";

          partial_rtf_text += " \\qc " + "" + " \\cell";

          partial_rtf_text += fineriga;

          partial_rtf_text += partial_rtf_text_Valuenode;

          partial_rtf_text += " \\pard\\keep";

          if (partial_rtf_text_Notenode != "")
          {
            partial_rtf_text += " \\line \\b Note: \\b0 ";
            partial_rtf_text += " \\line";
            partial_rtf_text += partial_rtf_text_Notenode;
          }

          partial_rtf_text += "\\pard\\bgdkdcross\\cfpat1\\shading59110\\tx2291\\par";

          partial_rtf_text += inizioriga + "\n" + colore1 + bordodown + cell13clppNewDetails + inizioriga2;

          partial_rtf_text += " \\qc " + "" + " \\cell";

          partial_rtf_text += fineriga;

          partial_rtf_text += " \\pard\\keep";

          partial_rtf_text_Valuenode = "";
          partial_rtf_text_Notenode = "";
          atleastone = false;



        }



        partial_rtf_text += "\\line\\pard\\bgdkdcross\\cfpat1\\shading59110\\tx2291\\par";

        partial_rtf_text += "\\line";
      }

      //partial_rtf_text += " \\b Considerazioni che hanno determinato le scelte di pianificazione \\b0 \\line \\line ";

      //partial_rtf_text += ((nodeData.Attributes["Testo"] != null) ? nodeData.Attributes["Testo"].ToString().Replace( "\r\n", " \\line " ) : "");

      //partial_rtf_text += "\\par \\line";

      return partial_rtf_text;
    }

    private string AddPianificazioneNew(XmlNode nodeTree, string ID)
    {
      string idsessionerevisione = "";
      string partial_rtf_text = "";

     
  
   

      partial_rtf_text += "\\pard\\keep";
 
       if (idtree!=1)  // STAMPO DALLA 3.4.x
       {
       
        idsessionerevisione = cBusinessObjects.CercaSessione("Bilancio", "Revisione", idsessione.ToString(), cBusinessObjects.idcliente);
     
        // 2.10.5 pianificazione estesa = 274
        DataTable datiN = cBusinessObjects.GetData(274, typeof(PianificazioneNewWD_Node), idcliente, int.Parse(idsessionerevisione),1);
        DataTable datiV = cBusinessObjects.GetData(274, typeof(PianificazioneNewWD_Valore), idcliente, int.Parse(idsessionerevisione),1);
                // mette a posto bug delle colonne invertite
           
                bool NotenumericoRealR = true;
                bool NotenumericoNumber = true;
                bool notatrovata = false;
                 int n;
                 foreach (DataRow dd in datiV.Rows)
                 {
                    if(dd["NoteRealRow"].ToString()!="")
                    {
                       notatrovata = true;
                       NotenumericoRealR= int.TryParse(dd["NoteRealRow"].ToString(), out n);
                       NotenumericoNumber= int.TryParse(dd["NoteNumber"].ToString(), out n);
                    }
                    
                    if ( !NotenumericoRealR ||  !NotenumericoNumber )
                        break;
                 }

                 if(notatrovata &&  ( !NotenumericoRealR ||  !NotenumericoNumber ))
                 {
                 
                    foreach (DataRow dd in datiV.Rows)
                    { 
                        string tempNoteRealRow=dd["NoteRealRow"].ToString();
                        string tempNoteNumber=dd["NoteNumber"].ToString();
                        string tempNote=dd["Note"].ToString();

                        if(!NotenumericoRealR )
                        {
                           dd["Note"] = tempNoteRealRow;
                           dd["NoteRealRow"] = tempNote;
                        }
                        if(!NotenumericoNumber )
                        {
                           dd["Note"] = tempNoteNumber;
                           dd["NoteNumber"] = tempNote;
                        }
                        tempNoteRealRow=dd["NoteRealRow"].ToString();
                        tempNoteNumber=dd["NoteNumber"].ToString();
                        int NoteNumberInt = 0;
                        int NoteRealRowInt = 0;
                        int.TryParse(tempNoteRealRow, out NoteRealRowInt);
                        int.TryParse(tempNoteNumber, out NoteNumberInt);
                        if(NoteNumberInt>NoteRealRowInt)
                        {
                           dd["NoteRealRow"] = tempNoteNumber;
                           dd["NoteNumber"] = tempNoteRealRow;
                        }
                    }

                    datiV.AcceptChanges();
                    cBusinessObjects.SaveData(274, datiV, typeof(PianificazioneNewWD_Valore));
                 }
 
        DataTable datiVRighe = cBusinessObjects.GetData(274, typeof(PianificazioneNewWD_ValoreRighe), idcliente, int.Parse(idsessionerevisione),1);


       if (datiN.Rows.Count == 0)  // RIDOTTA
            {
                 
                        afterpianificazione = true;
                
                       
                        partial_rtf_text += "\\pard\\bgdkdcross\\cfpat1\\shading59110\\tx2291\\par";

                        //partial_rtf_text += " \\b Legenda Evidenze: A \\b0 = Esame Fisico \\b B \\b0 = Conferma \\b C \\b0 = Documentazione \\b D \\b0 = Procedura di analisi comparativa \\b E \\b0 = Indagine \\b F \\b0 = Ripetizione \\b G \\b0 = Osservazione diretta  \\line ";
                        partial_rtf_text += " \\b Legenda Evidenze: A \\b0 = Esame Fisico \\b B \\b0 = Conferma \\b C \\b0 = Documentazione \\b D \\b0 = Procedura di analisi comparativa \\b E \\b0 = Indagine \\b F \\b0 = Ripetizione \\b G \\b0 = Osservazione diretta  \\line ";

                        partial_rtf_text += " \\line \\pard\\keep";
                  
                        DataTable datiPianificazioneNewSingle = cBusinessObjects.GetData(int.Parse(nodeTree.Attributes["ID"].Value), typeof(PianificazioneNewSingolo), idcliente, idsessione,4);
    
                        if (datiPianificazioneNewSingle.Rows.Count > 0) // E.B. se nodeData.ChildNodes.Count==0 --> foreach solleva eccezione
                        {
                            foreach (DataRow item in datiPianificazioneNewSingle.Rows)
                            {

                                if (item["Voce"].ToString().Trim() != nodeTree.Attributes["Codice"].Value.ToString().Trim())
                                {
                                    continue;
                                }
                               partial_rtf_text += inizioriga + "\n" + colore1 + cell2clppNewbis3 + colore1  + cell3clppNew + colore1 + cell4bisclppNew + colore1 + cell4bisbisclppNew + colore1 + cell5bisclppNew + colore1 + cell6bisclppNew + colore1 + cell7bisclppNew + colore1 + cell8bisclppNew + colore1 + cell9bisclppNew + colore1 + cell10bisclppNew + colore1 + cell11bisclppNew + inizioriga2;

                              partial_rtf_text += " \\qc \\cell";

                              partial_rtf_text += " \\qc \\cell";

                              partial_rtf_text += " \\qc \\cell";

                              partial_rtf_text += " \\qc " + "A" + " \\cell";
                              partial_rtf_text += " \\qc " + "B" + " \\cell";
                              partial_rtf_text += " \\qc " + "C" + " \\cell";
                              partial_rtf_text += " \\qc " + "D" + " \\cell";
                              partial_rtf_text += " \\qc " + "E" + " \\cell";
                              partial_rtf_text += " \\qc " + "F" + " \\cell";
                              partial_rtf_text += " \\qc " + "G" + " \\cell";

                              partial_rtf_text += " \\qc \\cell";

                              partial_rtf_text += fineriga;

                              partial_rtf_text += AddNodoPianificazioneSingleNew(item);

                              partial_rtf_text += fineriga;

                            }
                            
                      
                              partial_rtf_text += "\\line\\pard\\bgdkdcross\\cfpat1\\shading59110\\tx2291\\par";

                              partial_rtf_text += "\\line";
   
                              partial_rtf_text += "\\pard\\keep";
                        }

                    
            }
            else
            {
                 afterpianificazione = true;


          string partial_rtf_text2 = "";

          partial_rtf_text2 += "\\par";

          partial_rtf_text2 += "\\pard\\keep";

          //partial_rtf_text2 += " \\b Legenda Evidenze: A \\b0 = Esame Fisico \\b B \\b0 = Conferma \\b C \\b0 = Documentazione \\b D \\b0 = Procedura di analisi comparativa \\b E \\b0 = Indagine \\b F \\b0 = Ripetizione \\b G \\b0 = Osservazione diretta  \\line ";
          partial_rtf_text2 += " \\b Legenda Evidenze: A \\b0 = Ispezione \\b B \\b0 = Osservazione \\b C \\b0 = Conferma esterna \\b D \\b0 = Ricalcolo \\b E \\b0 = Riesecuzione \\b F \\b0 = Procedure di analisi comparativa \\b G \\b0 = Indagine  \\line ";
          partial_rtf_text2 += " \\b ET \\b0 = Errore Trascurabile \\b MO \\b0 = Materialità Operativa \\line ";

          partial_rtf_text2 += " \\line \\pard\\keep";

          string partial_rtf_text2_Valuenode = "";

          string partial_rtf_text2_Notenode = "";

          foreach (DataRow item in datiN.Rows)
          {
           if (item["Voce"].ToString().Trim() != nodeTree.Attributes["Codice"].Value.ToString().Trim())
                {
                    partial_rtf_text2_Valuenode = "";
                    partial_rtf_text2_Notenode = "";
                    continue;
                }
            foreach (DataRow item2 in datiV.Rows)
            {
              if (item2["Codice"].ToString() != item["Voce"].ToString())
                continue;

              partial_rtf_text2_Valuenode += inizioriga + "\n" + colore1 + cell1clppNewDetails + colore1 + cell2clppNewDetails + colore1 + cell3clppNewDetails + colore1 + cell4clppNewDetails + colore1 + cell5clppNewDetails + colore1 + cell6clppNewDetails + colore1 + cell7clppNewDetails + colore1 + cell8clppNewDetails + colore1 + cell9clppNewDetails + colore1 + cell10clppNewDetails + colore1 + cell11clppNewDetails + colore1 + cell12clppNewDetails + colore1 + cell13clppNewDetails + inizioriga2;

              partial_rtf_text2_Valuenode += " \\ql " + ((item2["Titolo"].ToString() == "") ? "" : ((item2["Titolo"].ToString() == "Totale") ? item2["Tipo"].ToString() : item2["Titolo"].ToString())) + " \\cell";
              partial_rtf_text2_Valuenode += " \\qr " + ((item2["EA"].ToString() == "") ? "" : item2["EA"].ToString()) + " \\cell";
              partial_rtf_text2_Valuenode += " \\f1 \\qc " + ((item2["ET"].ToString() == "") ? "" : ((item2["ET"].ToString() == "True") ? checkbox_Cheched : checkbox_UnCheched)) + "\\f0\\cell";
              partial_rtf_text2_Valuenode += " \\f1 \\qc " + ((item2["MO"].ToString() == "") ? "" : ((item2["MO"].ToString() == "True") ? checkbox_Cheched : checkbox_UnCheched)) + "\\f0\\cell";

              partial_rtf_text2_Valuenode += " \\qc " + ((item2["CONTROLLO"].ToString() == "") ? "" : ((item2["CONTROLLO"].ToString() == "True") ? "SI" : ((item2["CONTROLLO"].ToString() == "False") ? "NO" : "?"))) + "\\cell";

              partial_rtf_text2_Valuenode += " \\f1 \\qc " + ((item2["EsameFisico"].ToString() == "") ? "" : ((item2["EsameFisico"].ToString() == "X") ? "" : ((item2["EsameFisico"].ToString() == "True") ? checkbox_Cheched : checkbox_UnCheched))) + "\\f0\\cell";
              partial_rtf_text2_Valuenode += " \\f1 \\qc " + ((item2["Ispezione"].ToString() == "") ? "" : ((item2["Ispezione"].ToString() == "X") ? "" : ((item2["Ispezione"].ToString() == "True") ? checkbox_Cheched : checkbox_UnCheched))) + "\\f0\\cell";
              partial_rtf_text2_Valuenode += " \\f1 \\qc " + ((item2["Indagine"].ToString() == "") ? "" : ((item2["Indagine"].ToString() == "X") ? "" : ((item2["Indagine"].ToString() == "True") ? checkbox_Cheched : checkbox_UnCheched))) + "\\f0\\cell";
              partial_rtf_text2_Valuenode += " \\f1 \\qc " + ((item2["Osservazione"].ToString() == "") ? "" : ((item2["Osservazione"].ToString() == "X") ? "" : ((item2["Osservazione"].ToString() == "True") ? checkbox_Cheched : checkbox_UnCheched))) + "\\f0\\cell";
              partial_rtf_text2_Valuenode += " \\f1 \\qc " + ((item2["Ricalcolo"].ToString() == "") ? "" : ((item2["Ricalcolo"].ToString() == "X") ? "" : ((item2["Ricalcolo"].ToString() == "True") ? checkbox_Cheched : checkbox_UnCheched))) + "\\f0\\cell";
              partial_rtf_text2_Valuenode += " \\f1 \\qc " + ((item2["Riesecuzione"].ToString() == "") ? "" : ((item2["Riesecuzione"].ToString() == "X") ? "" : ((item2["Riesecuzione"].ToString() == "True") ? checkbox_Cheched : checkbox_UnCheched))) + "\\f0\\cell";
              partial_rtf_text2_Valuenode += " \\f1 \\qc " + ((item2["Conferma"].ToString() == "") ? "" : ((item2["Conferma"].ToString() == "X") ? "" : ((item2["Conferma"].ToString() == "True") ? checkbox_Cheched : checkbox_UnCheched))) + "\\f0\\cell";


              partial_rtf_text2_Valuenode += " \\qc " + ((item2["NoteNumber"].ToString() == "") ? "" : item2["NoteNumber"].ToString()) + " \\cell";

              partial_rtf_text2_Valuenode += fineriga;

              foreach (DataRow dt in datiVRighe.Rows)
              {
                if (dt["ID"].ToString() != item2["ID"].ToString())
                  continue;



                partial_rtf_text2_Valuenode += inizioriga + "\n" + colore2 + cell1clppNewDetails + colore2 + cell2clppNewDetails + colore1 + cell3clppNewDetails + colore1 + cell4clppNewDetails + colore1 + cell5clppNewDetails + colore1 + cell6clppNewDetails + colore1 + cell7clppNewDetails + colore1 + cell8clppNewDetails + colore1 + cell9clppNewDetails + colore1 + cell10clppNewDetails + colore1 + cell11clppNewDetails + colore1 + cell12clppNewDetails + colore1 + cell13clppNewDetails + inizioriga2;

                partial_rtf_text2_Valuenode += " \\ql       " + ((dt["Codice"].ToString() == "") ? "" : dt["Codice"].ToString()) + " - " + ((dt["Titolo"].ToString() == "") ? "" : item2["Titolo"].ToString()) + " \\cell";
                partial_rtf_text2_Valuenode += " \\qr " + ((dt["EA"].ToString() == "") ? "" : ConvertNumberNoDecimal(dt["EA"].ToString())) + " \\cell";
                partial_rtf_text2_Valuenode += " \\f1 \\qc " + "" + "\\f0\\cell";
                partial_rtf_text2_Valuenode += " \\f1 \\qc " + "" + "\\f0\\cell";

                partial_rtf_text2_Valuenode += " \\qc " + "" + "\\cell";

                partial_rtf_text2_Valuenode += " \\f1 \\qc " + "" + "\\f0\\cell";
                partial_rtf_text2_Valuenode += " \\f1 \\qc " + "" + "\\f0\\cell";
                partial_rtf_text2_Valuenode += " \\f1 \\qc " + "" + "\\f0\\cell";
                partial_rtf_text2_Valuenode += " \\f1 \\qc " + "" + "\\f0\\cell";
                partial_rtf_text2_Valuenode += " \\f1 \\qc " + "" + "\\f0\\cell";
                partial_rtf_text2_Valuenode += " \\f1 \\qc " + "" + "\\f0\\cell";
                partial_rtf_text2_Valuenode += " \\f1 \\qc " + "" + "\\f0\\cell";


                partial_rtf_text2_Valuenode += " \\ql " + "" + " \\cell";

                partial_rtf_text2_Valuenode += fineriga;

              }


              if (item2["NoteNumber"].ToString() != "")
              {
                partial_rtf_text2_Notenode += " \\b " + ((item2["NoteNumber"].ToString() == "") ? "" : item2["NoteNumber"].ToString()) + ": \\b0 " + ((item2["Note"].ToString() == "") ? "" : item2["Note"].ToString()) + " \\line ";

              }

            }



            partial_rtf_text2 += "\\par";

            partial_rtf_text2 += " \\b " + item["Voce"].ToString() + " - " + item["Titolo"].ToString() + " \\b0 \\line ";

            partial_rtf_text2 += " \\pard\\keep";

            if (item["Esecutore"].ToString() != "" && item["Esecutore"].ToString() != "")
            {
              partial_rtf_text2 += "\\par";

              partial_rtf_text2 += " Esecutore: " + item["Esecutore"].ToString() + " \\line ";

              partial_rtf_text2 += " \\pard\\keep";
            }

            if (item["Nota"].ToString() != "" && item["Nota"].ToString() != "")
            {
              partial_rtf_text2 += "\\par";

              partial_rtf_text2 += " Note: " + item["Nota"].ToString() + " \\line ";

              partial_rtf_text2 += " \\pard\\keep";
            }

            if (item["cmbRI"].ToString() != "" && item["cmbRI"].ToString() != "")
            {
              partial_rtf_text2 += "\\par";

              string riscelto = "Non Selezionato";

              switch (item["cmbRI"].ToString())
              {
                case "MA":
                  riscelto = "Molto Alto";
                  break;
                case "A":
                  riscelto = "Alto";
                  break;
                case "M":
                  riscelto = "Medio";
                  break;
                case "B":
                  riscelto = "Basso";
                  break;
                case "MB":
                  riscelto = "Molto Basso";
                  break;
                case "PV":
                  riscelto = "Procedure di Validità";
                  break;
                default:
                case "NA":
                  riscelto = "Non Applicabile";
                  break;
              }

              partial_rtf_text2 += " Rischio di individuazione scelto: " + riscelto + " \\line ";

              partial_rtf_text2 += " \\pard\\keep";
            }

            partial_rtf_text2 += "\\par";

            partial_rtf_text2 += "\\pard\\keep";

            partial_rtf_text2 += inizioriga + "\n" + colore1 + cell1clppNewDetails + colore1 + cell2clppNewDetails + colore1 + cell4clppNewDetails + colore1 + cell5clppNewDetails + colore1 + cell12clppNewDetails + colore1 + cell13clppNewDetails + inizioriga2;

            partial_rtf_text2 += " \\qc " + "VOCI DI BILANCIO" + "\\cell";

            partial_rtf_text2 += " \\qc " + "VALORE" + "\\cell";

            partial_rtf_text2 += " \\qc " + "INF A" + "\\cell";

            partial_rtf_text2 += " \\qc " + "CONT" + "\\cell";

            partial_rtf_text2 += " \\qc " + "EVIDENZE" + "\\cell";

            partial_rtf_text2 += " \\qc " + "NOTE" + "\\cell";

            partial_rtf_text2 += fineriga;

            partial_rtf_text2 += inizioriga + "\n" + colore1 + cell1clppNewDetails + colore1 + cell2clppNewDetails + colore1 + cell3clppNewDetails + colore1 + cell4clppNewDetails + colore1 + cell5clppNewDetails + colore1 + cell6clppNewDetails + colore1 + cell7clppNewDetails + colore1 + cell8clppNewDetails + colore1 + cell9clppNewDetails + colore1 + cell10clppNewDetails + colore1 + cell11clppNewDetails + colore1 + cell12clppNewDetails + colore1 + cell13clppNewDetails + inizioriga2;

            partial_rtf_text2 += " \\qc \\line " + "" + "\\line \\cell";
            partial_rtf_text2 += " \\qc \\line " + "" + "\\line \\cell";
            partial_rtf_text2 += " \\qc \\line " + "ET" + "\\line \\cell";
            partial_rtf_text2 += " \\qc \\line " + "MO" + "\\line \\cell";

            partial_rtf_text2 += " \\qc \\line " + "ROLLO" + "\\line \\cell";

            partial_rtf_text2 += " \\qc \\line " + "A" + "\\line \\cell";
            partial_rtf_text2 += " \\qc \\line " + "B" + "\\line \\cell";
            partial_rtf_text2 += " \\qc \\line " + "C" + "\\line \\cell";
            partial_rtf_text2 += " \\qc \\line " + "D" + "\\line \\cell";
            partial_rtf_text2 += " \\qc \\line " + "E" + "\\line \\cell";
            partial_rtf_text2 += " \\qc \\line " + "F" + "\\line \\cell";
            partial_rtf_text2 += " \\qc \\line " + "G" + "\\line \\cell";

            partial_rtf_text2 += " \\qc \\line " + "" + "\\line \\cell";

            partial_rtf_text2 += fineriga;

            partial_rtf_text2 += partial_rtf_text2_Valuenode;
            partial_rtf_text2 += "\\line\\pard\\bgdkdcross\\cfpat1\\shading59110\\tx2291\\par";
            partial_rtf_text2 += "\\par";

            partial_rtf_text2 += "\\pard\\keep";
           
            partial_rtf_text2 += partial_rtf_text2_Notenode;
               partial_rtf_text2 += "\\line\\pard\\bgdkdcross\\cfpat1\\shading59110\\tx2291\\par";
            partial_rtf_text2 += "\\par";

            partial_rtf_text2 += "\\pard\\keep";

            partial_rtf_text2_Valuenode = "";
            partial_rtf_text2_Notenode = "";

            //  if (nodeTree.Attributes["Codice"].ToString().Contains(item["Voce"].ToString()))
            //  {
            //  partial_rtf_text += partial_rtf_text2;
            //    break;
            //          }
            // else
            //              {
            //             partial_rtf_text2 = "";
            //          }

            partial_rtf_text2 += "\\line\\pard\\bgdkdcross\\cfpat1\\shading59110\\tx2291\\par";

            partial_rtf_text2 += "\\line";

            partial_rtf_text2 += "\\pard\\keep";
          }

          partial_rtf_text += partial_rtf_text2;
    

            }
      }
      else
      {
        #region materialità

        string ID_Materialità_1 = "77";
        string ID_Materialità_2 = "78";
        string ID_Materialità_3 = "199";
        string IDPianificazione = "246";

        bool Materialità_1 = false;
        bool Materialità_2 = false;
        bool Materialità_3 = false;

        DataTable tmpNode = null;
        //DataRow tmpNodeRow = null;

        DataTable tmpNode_true = null;
        string idsessionedatimaterialita = cBusinessObjects.CercaSessione("Conclusione", "Revisione", idsessione.ToString(), cBusinessObjects.idcliente);

        if (idsessionedatimaterialita != "-1")
        {

          tmpNode = cBusinessObjects.GetData(int.Parse(ID_Materialità_1), typeof(Excel_LimiteMaterialitaSPCE), idcliente, int.Parse(idsessionedatimaterialita), 1);

          string statomat = "";
          DataTable statom = cBusinessObjects.GetData(int.Parse(ID_Materialità_1), typeof(StatoNodi), idcliente, int.Parse(idsessionedatimaterialita), 1);
          foreach (DataRow dd in statom.Rows)
          {
            statomat = dd["Stato"].ToString().Trim();
          }

          if (tmpNode.Rows.Count > 0 && statomat != "" && ((App.TipoTreeNodeStato)(Convert.ToInt32(statomat))) == App.TipoTreeNodeStato.Completato)
          {
            Materialità_1 = true;
            tmpNode_true = tmpNode;
          }

          tmpNode = cBusinessObjects.GetData(int.Parse(ID_Materialità_2), typeof(Excel_LimiteMaterialitaSPCE), idcliente, int.Parse(idsessionedatimaterialita), 1);

          statomat = "";
          statom = cBusinessObjects.GetData(int.Parse(ID_Materialità_2), typeof(StatoNodi), idcliente, int.Parse(idsessionedatimaterialita), 1);
          foreach (DataRow dd in statom.Rows)
          {
            statomat = dd["Stato"].ToString().Trim();
          }

          if (tmpNode.Rows.Count > 0 && statomat != "" && ((App.TipoTreeNodeStato)(Convert.ToInt32(statomat))) == App.TipoTreeNodeStato.Completato)
          {
            Materialità_2 = true;
            tmpNode_true = tmpNode;
          }

          tmpNode = cBusinessObjects.GetData(int.Parse(ID_Materialità_3), typeof(Excel_LimiteMaterialitaSPCE), idcliente, int.Parse(idsessionedatimaterialita), 1);

          statomat = "";
          statom = cBusinessObjects.GetData(int.Parse(ID_Materialità_3), typeof(StatoNodi), idcliente, int.Parse(idsessionedatimaterialita), 1);
          foreach (DataRow dd in statom.Rows)
          {
            statomat = dd["Stato"].ToString().Trim();
          }

          if (tmpNode.Rows.Count > 0 && statomat != "" && ((App.TipoTreeNodeStato)(Convert.ToInt32(statomat))) == App.TipoTreeNodeStato.Completato)
          {
            Materialità_3 = true;
            tmpNode_true = tmpNode;
          }


        }

        if (tmpNode_true != null)
        {
          partial_rtf_text += "\\line\\pard\\bgdkdcross\\cfpat1\\shading59110\\tx2291\\par";

          partial_rtf_text += "\\pard\\keep";

          partial_rtf_text += iniziorigaTP + "\n" + colore3 + cell4m + ((Materialità_1) ? "" : bordi + colore3 + cell5m) + bordi + colore3 + cell6m + inizioriga2;

          partial_rtf_text += " \\ql \\fs20 Richiamo Materialità Pianificata \\fs20 \\b0\\cell";
          if (Materialità_1)
          {
            partial_rtf_text += " \\qc \\fs16 S.P. e C.E. \\b0\\cell";
          }
          else
          {
            partial_rtf_text += " \\qc \\fs16 S.P. \\b0\\cell";
            partial_rtf_text += " \\qc \\fs16 C.E. \\b0\\cell";
          }

          partial_rtf_text += finerigaTP;

          partial_rtf_text += iniziorigaTP + "\n" + bordi + colore3 + cell4m + ((Materialità_1) ? "" : bordi + colore3 + cell5m) + bordi + colore3 + cell6m + inizioriga2;

          partial_rtf_text += " \\ql \\fs20 Materialità totale \\fs20 \\b0\\cell";

          if (Materialità_1)
          {
            partial_rtf_text += " \\qc \\fs16 " + ((getvalmat(tmpNode, "txt7") == "") ? "" : getvalmat(tmpNode, "txt7")) + " \\b0\\cell";
          }
          else if (Materialità_2)
          {
            partial_rtf_text += " \\qc \\fs16 " + ((getvalmat(tmpNode, "txt7_2sp") == "") ? "" : getvalmat(tmpNode, "txt7_2sp")) + " \\b0\\cell";
            partial_rtf_text += " \\qc \\fs16 " + ((getvalmat(tmpNode, "txt7_2ce") == "") ? "" : getvalmat(tmpNode, "txt7_2ce")) + " \\b0\\cell";
          }
          else
          {
            partial_rtf_text += " \\qc \\fs16 " + ((getvalmat(tmpNode, "txt7_3sp") == "") ? "" : getvalmat(tmpNode, "txt7_3sp")) + " \\b0\\cell";
            partial_rtf_text += " \\qc \\fs16 " + ((getvalmat(tmpNode, "txt7_3ce") == "") ? "" : getvalmat(tmpNode, "txt7_3ce")) + " \\b0\\cell";
          }

          partial_rtf_text += finerigaTP;

          partial_rtf_text += " \\ql \\fs20 Errore Trascurabile \\fs20 \\b0\\cell";

          if (Materialità_1)
          {
            partial_rtf_text += " \\qc \\fs16 " + ((getvalmat(tmpNode, "txt9") == "") ? "" : getvalmat(tmpNode, "txt9")) + " \\b0\\cell";
          }
          else if (Materialità_2)
          {
            partial_rtf_text += " \\qc \\fs16 " + ((getvalmat(tmpNode, "txt9_2sp") == "") ? "" : getvalmat(tmpNode, "txt9_2sp")) + " \\b0\\cell";
            partial_rtf_text += " \\qc \\fs16 " + ((getvalmat(tmpNode, "txt9_2ce") == "") ? "" : getvalmat(tmpNode, "txt9_2ce")) + " \\b0\\cell";
          }
          else
          {
            partial_rtf_text += " \\qc \\fs16 " + ((getvalmat(tmpNode, "txt9_3sp") == "") ? "" : getvalmat(tmpNode, "txt9_3sp")) + " \\b0\\cell";
            partial_rtf_text += " \\qc \\fs16 " + ((getvalmat(tmpNode, "txt9_3ce") == "") ? "" : getvalmat(tmpNode, "txt9_3ce")) + " \\b0\\cell";
          }

          partial_rtf_text += finerigaTP;

          partial_rtf_text += " \\ql \\fs20 Materialità Operativa \\fs20 \\b0\\cell";

          if (Materialità_1)
          {
            partial_rtf_text += " \\qc \\fs16 " + ((getvalmat(tmpNode, "txt12") == "") ? "" : getvalmat(tmpNode, "txt12")) + " \\b0\\cell";
          }
          else if (Materialità_2)
          {
            partial_rtf_text += " \\qc \\fs16 " + ((getvalmat(tmpNode, "txt12_2sp") == "") ? "" : getvalmat(tmpNode, "txt12_2sp")) + " \\b0\\cell";
            partial_rtf_text += " \\qc \\fs16 " + ((getvalmat(tmpNode, "txt12_2ce") == "") ? "" : getvalmat(tmpNode, "txt12_2ce")) + " \\b0\\cell";
          }
          else
          {
            partial_rtf_text += " \\qc \\fs16 " + ((getvalmat(tmpNode, "txt12_3sp") == "") ? "" : getvalmat(tmpNode, "txt12_3sp")) + " \\b0\\cell";
            partial_rtf_text += " \\qc \\fs16 " + ((getvalmat(tmpNode, "txt12_3ce") == "") ? "" : getvalmat(tmpNode, "txt12_3ce")) + " \\b0\\cell";
          }

          partial_rtf_text += finerigaTP;

          //partial_rtf_text += iniziorigaTP + "\n" + colore3 + cell3m + colore3 + cell4m + colore2 + bordi + cell6m + inizioriga2;

          //partial_rtf_text += " \\ql \\fs20 MATERIALITA' - MEDIA fra minimi e massimi \\fs20 \\b0\\cell";
          //partial_rtf_text += " \\qc  \\b0\\cell";
          //partial_rtf_text += " \\qc \\fs16 " + ((nodenodo.Attributes["txt7_2spBILANCIO"].ToString()=="") ? "" : nodenodo.Attributes["txt7_2spBILANCIO"].ToString()) + " \\b0\\cell";

          //partial_rtf_text += finerigaTP;

          //partial_rtf_text += iniziorigaTP + "\n" + colore3 + cell3m + colore2 + bordi + cell4m + colore2 + bordi + cell6m + inizioriga2;

          //partial_rtf_text += " \\ql \\fs20 ERRORE TOLLERABILE \\fs20 \\b0\\cell";
          //partial_rtf_text += " \\qc " + ((nodenodo.Attributes["txt8_2spBILANCIO"].ToString()=="") ? "" : nodenodo.Attributes["txt8_2spBILANCIO"].ToString()) + " \\b0\\cell";
          //partial_rtf_text += " \\qc \\fs16 " + ((nodenodo.Attributes["txt9_2spBILANCIO"].ToString()=="") ? "" : nodenodo.Attributes["txt9_2spBILANCIO"].ToString()) + " \\b0\\cell";

          //partial_rtf_text += finerigaTP;

          //partial_rtf_text += iniziorigaTP + "\n" + colore2 + cell3m + colore2 + bordi + cell4m + colore2 + bordi + cell6m + inizioriga2;

          //partial_rtf_text += " \\ql \\fs20 Materialità Operativa  \\fs20 \\b0\\cell";
          //partial_rtf_text += " \\qc " + ((nodenodo.Attributes["txt10_2spBILANCIO"].ToString()=="") ? "" : nodenodo.Attributes["txt10_2spBILANCIO"].ToString()) + " \\b0\\cell";
          //partial_rtf_text += " \\qc \\fs16 " + ((nodenodo.Attributes["txt12_2spBILANCIO"].ToString()=="") ? "" : nodenodo.Attributes["txt12_2spBILANCIO"].ToString()) + " \\b0\\cell";

          //partial_rtf_text += finerigaTP;

          partial_rtf_text += "\\line\\pard\\bgdkdcross\\cfpat1\\shading59110\\tx2291\\par";
        }

        #endregion

        partial_rtf_text += " \\b \\fs24 \\qc Definizione dell'intensità di revisione per ogni voce di bilancio \\fs20 \\b0 \\line \\line";

        partial_rtf_text += "\\par";

        partial_rtf_text += "\\pard\\keep";

        //partial_rtf_text += " \\b Legenda Evidenze: A \\b0 = Esame Fisico \\b B \\b0 = Conferma \\b C \\b0 = Documentazione \\b D \\b0 = Procedura di analisi comparativa \\b E \\b0 = Indagine \\b F \\b0 = Ripetizione \\b G \\b0 = Osservazione diretta  \\line ";
        partial_rtf_text += " \\b Legenda Evidenze: A \\b0 = Ispezione \\b B \\b0 = Osservazione \\b C \\b0 = Conferma esterna \\b D \\b0 = Ricalcolo \\b E \\b0 = Riesecuzione \\b F \\b0 = Procedure di analisi comparativa \\b G \\b0 = Indagine  \\line ";

        partial_rtf_text += " \\line \\pard\\keep";

        partial_rtf_text += "\\par";

        partial_rtf_text += "\\pard\\keep";

        partial_rtf_text += inizioriga + "\n" + colore1 + cell2clppNew + colore1 + cell10clppNew + colore1 + cell11clppNew + inizioriga2;

        partial_rtf_text += " \\qc " + "VOCI DI BILANCIO" + "\\cell";

        partial_rtf_text += " \\qc " + "EVIDENZE" + "\\cell";

        partial_rtf_text += " \\qc " + "" + "\\cell";

        partial_rtf_text += fineriga;

        partial_rtf_text += inizioriga + "\n" + colore1 + cell1clppNew + colore1 + cell2clppNewbis + colore1 + cell2clppNewbis2 + colore1 + cell3clppNew + colore1 + cell4clppNew + colore1 + cell5clppNew + colore1 + cell6clppNew + colore1 + cell7clppNew + colore1 + cell8clppNew + colore1 + cell9clppNew + colore1 + cell11clppNew + inizioriga2;

        partial_rtf_text += " \\qc \\line " + "CdL" + "\\line \\cell";

        partial_rtf_text += " \\qc \\line " + "Descrizione" + "\\line \\cell";

        partial_rtf_text += " \\ql \\line " + "RI" + "\\line \\cell";

        partial_rtf_text += " \\qc \\line " + "A" + "\\line \\cell";
        partial_rtf_text += " \\qc \\line " + "B" + "\\line \\cell";
        partial_rtf_text += " \\qc \\line " + "C" + "\\line \\cell";
        partial_rtf_text += " \\qc \\line " + "D" + "\\line \\cell";
        partial_rtf_text += " \\qc \\line " + "E" + "\\line \\cell";
        partial_rtf_text += " \\qc \\line " + "F" + "\\line \\cell";
        partial_rtf_text += " \\qc \\line " + "G" + "\\line \\cell";

        partial_rtf_text += " \\qc \\line " + "Esecutore della revisione" + "\\line \\cell";

        partial_rtf_text += fineriga;
    //   idsessionerevisione = cBusinessObjects.CercaSessione("Bilancio", "Revisione", idsessione.ToString(), cBusinessObjects.idcliente);

      //    DataTable datiPsingle = cBusinessObjects.GetData(int.Parse(IDPianificazione), typeof(PianificazioneNewSingolo), cBusinessObjects.idcliente, int.Parse(idsessionerevisione), 1);
     //     DataTable statodatiPsingle = cBusinessObjects.GetData(int.Parse(IDPianificazione), typeof(StatoNodi), cBusinessObjects.idcliente, int.Parse(idsessionerevisione), 1);
    
      DataTable datiPsingle = cBusinessObjects.GetData(int.Parse(IDPianificazione), typeof(PianificazioneNew), cBusinessObjects.idcliente, idsessione,1);
      DataTable statodatiPsingle = cBusinessObjects.GetData(int.Parse(IDPianificazione), typeof(StatoNodi), cBusinessObjects.idcliente,idsessione,1);
  
     string statopSingle = "";
        foreach (DataRow dd in statodatiPsingle.Rows)
        {
          statopSingle = dd["Stato"].ToString();
        }
        if ( statopSingle == "" || (statopSingle != "" && ((App.TipoTreeNodeStato)(Convert.ToInt32(statopSingle))) != App.TipoTreeNodeStato.Completato && ((App.TipoTreeNodeStato)(Convert.ToInt32(statopSingle))) != App.TipoTreeNodeStato.DaCompletare))
        {
        }
        foreach (DataRow item in datiPsingle.Rows)
        {
          
            partial_rtf_text += AddNodoPianificazioneNew(item);

        }
    
        partial_rtf_text += "\\line\\pard\\bgdkdcross\\cfpat1\\shading59110\\tx2291\\par";

        partial_rtf_text += "\\line";

        partial_rtf_text += "\\pard\\keep";
      }

      //partial_rtf_text += " \\b Considerazioni che hanno determinato le scelte di pianificazione \\b0 \\line \\line ";

      //partial_rtf_text += ((nodeData.Attributes["Testo"] != null) ? nodeData.Attributes["Testo"].ToString().Replace( "\r\n", " \\line " ) : "");

      //partial_rtf_text += "\\par \\line";

      return partial_rtf_text;
    }


    
    private string AddNodoPianificazioneSingleNew(DataRow node)
    {
      string partial_rtf_text = "";

      partial_rtf_text += inizioriga + "\n" + colore1 + cell2clppNewbis3 + colore1 + bordodx + cell3clppNew + colore1 + cell4bisclppNew + colore1 + cell4bisbisclppNew + colore1 + cell5bisclppNew + colore1 + cell6bisclppNew + colore1 + cell7bisclppNew + colore1 + cell8bisclppNew + colore1 + cell9bisclppNew + colore1 + cell10bisclppNew + colore1 + cell11bisclppNew + inizioriga2;

      partial_rtf_text += " \\ql RISCHIO DI INDIVIDUAZIONE \\cell"; //\\line

      string RIvalue = "";

      if (node["cmbRI"] != null)
      {
        switch (node["cmbRI"].ToString())
        {
          case "MA":
            RIvalue = "Molto Alto";
            break;
          case "A":
            RIvalue = "Alto";
            break;
          case "M":
            RIvalue = "Medio";
            break;
          case "B":
            RIvalue = "Basso";
            break;
          case "MB":
            RIvalue = "Molto Basso";
            break;
          case "PV":
            RIvalue = "Proced Validità";
            break;
          default:
          case "NA":
            RIvalue = "Non Applicabile";
            break;
        }
      }

      partial_rtf_text += " \\ql " + RIvalue + " \\cell";  // \\line        

      partial_rtf_text += " \\ql EVIDENZE \\cell";  // \\line         

      partial_rtf_text += " \\f1 \\qc " + ((node["EsameFisico"].ToString() == "") ? "" : ((node["EsameFisico"].ToString() == "X") ? "" : ((node["EsameFisico"].ToString() == "True") ? checkbox_Cheched : checkbox_UnCheched))) + "\\f0\\cell";
      partial_rtf_text += " \\f1 \\qc " + ((node["Ispezione"].ToString() == "") ? "" : ((node["Ispezione"].ToString() == "X") ? "" : ((node["Ispezione"].ToString() == "True") ? checkbox_Cheched : checkbox_UnCheched))) + "\\f0\\cell";
      partial_rtf_text += " \\f1 \\qc " + ((node["Indagine"].ToString() == "") ? "" : ((node["Indagine"].ToString() == "X") ? "" : ((node["Indagine"].ToString() == "True") ? checkbox_Cheched : checkbox_UnCheched))) + "\\f0\\cell";
      partial_rtf_text += " \\f1 \\qc " + ((node["Osservazione"].ToString() == "") ? "" : ((node["Osservazione"].ToString() == "X") ? "" : ((node["Osservazione"].ToString() == "True") ? checkbox_Cheched : checkbox_UnCheched))) + "\\f0\\cell";
      partial_rtf_text += " \\f1 \\qc " + ((node["Ricalcolo"].ToString() == "") ? "" : ((node["Ricalcolo"].ToString() == "X") ? "" : ((node["Ricalcolo"].ToString() == "True") ? checkbox_Cheched : checkbox_UnCheched))) + "\\f0\\cell";
      partial_rtf_text += " \\f1 \\qc " + ((node["Riesecuzione"].ToString() == "") ? "" : ((node["Riesecuzione"].ToString()  == "X") ? "" : ((node["Riesecuzione"].ToString() == "True") ? checkbox_Cheched : checkbox_UnCheched))) + "\\f0\\cell";
      partial_rtf_text += " \\f1 \\qc " + ((node["Conferma"].ToString() == "") ? "" : ((node["Conferma"].ToString() == "X") ? "" : ((node["Conferma"].ToString() == "True") ? checkbox_Cheched : checkbox_UnCheched))) + "\\f0\\cell";

      partial_rtf_text += "  \\ql \\cell";

      partial_rtf_text += fineriga;

      return partial_rtf_text;
    }
   
    private string AddNodoPianificazioneNew(DataRow node)
    {
      string partial_rtf_text = "";

      partial_rtf_text += inizioriga + "\n" + colore1 + cell1clppNew + colore1 + cell2clppNewbis + colore1 + cell2clppNewbis2 + colore1 + cell3clppNew + colore1 + cell4clppNew + colore1 + cell5clppNew + colore1 + cell6clppNew + colore1 + cell7clppNew + colore1 + cell8clppNew + colore1 + cell9clppNew + colore1 + cell11clppNew + inizioriga2;

      partial_rtf_text += " \\ql " + ((node["Voce"].ToString() == "") ? "" : node["Voce"].ToString() ) + " \\cell";
      partial_rtf_text += " \\ql " + ((node["Titolo"].ToString() == "") ? "" : node["Titolo"].ToString() ) + " \\cell"; //\\line

      partial_rtf_text += " \\ql " + ((node["cmbRI"] != null) ? node["cmbRI"].ToString() : "") + " \\cell";  // \\line          

      partial_rtf_text += " \\f1 \\qc " + ((node["EsameFisico"].ToString() == "") ? "" : ((node["EsameFisico"].ToString()  == "X") ? "" : ((node["EsameFisico"].ToString() == "True") ? checkbox_Cheched : checkbox_UnCheched))) + "\\f0\\cell";
      partial_rtf_text += " \\f1 \\qc " + ((node["Ispezione"].ToString() == "") ? "" : ((node["Ispezione"].ToString()  == "X") ? "" : ((node["Ispezione"].ToString() == "True") ? checkbox_Cheched : checkbox_UnCheched))) + "\\f0\\cell";
      partial_rtf_text += " \\f1 \\qc " + ((node["Indagine"].ToString() == "") ? "" : ((node["Indagine"].ToString()  == "X") ? "" : ((node["Indagine"].ToString() == "True") ? checkbox_Cheched : checkbox_UnCheched))) + "\\f0\\cell";
      partial_rtf_text += " \\f1 \\qc " + ((node["Osservazione"].ToString() == "") ? "" : ((node["Osservazione"].ToString()  == "X") ? "" : ((node["Osservazione"].ToString() == "True") ? checkbox_Cheched : checkbox_UnCheched))) + "\\f0\\cell";
      partial_rtf_text += " \\f1 \\qc " + ((node["Ricalcolo"].ToString() == "") ? "" : ((node["Ricalcolo"].ToString()  == "X") ? "" : ((node["Ricalcolo"].ToString() == "True") ? checkbox_Cheched : checkbox_UnCheched))) + "\\f0\\cell";
      partial_rtf_text += " \\f1 \\qc " + ((node["Riesecuzione"].ToString() == "") ? "" : ((node["Riesecuzione"].ToString()  == "X") ? "" : ((node["Riesecuzione"].ToString() == "True") ? checkbox_Cheched : checkbox_UnCheched))) + "\\f0\\cell";
      partial_rtf_text += " \\f1 \\qc " + ((node["Conferma"].ToString() == "") ? "" : ((node["Conferma"].ToString()  == "X") ? "" : ((node["Conferma"].ToString() == "True") ? checkbox_Cheched : checkbox_UnCheched))) + "\\f0\\cell";

      partial_rtf_text += "  \\ql " + ((node["Esecutore"].ToString() == "") ? "" : node["Esecutore"].ToString()) + "\\cell";

      partial_rtf_text += fineriga;

      if (node["Nota"] != null && node["Nota"].ToString().Trim() != "")
      {
        partial_rtf_text += inizioriga + "\n" + colore1 + cell5clpp + inizioriga2;

        partial_rtf_text += " \\ql \\b Nota: \\b0 \\i " +
          node["Nota"].ToString().Trim().Replace(NEW_LINE, " \\line ") +
          " \\i0 \\line \\line \\cell ";

        partial_rtf_text += fineriga;
      }

      return partial_rtf_text;
    }

    #endregion

    #region Compensi E Risorse

    string cell1CeR1 = "\\clvertalc\\cellx4950";
    string cell2CeR1 = "\\clvertalc\\cellx9900";

    string cell1CeR2 = "\\clvertalc\\cellx1000";
    string cell2CeR2 = "\\clvertalc\\cellx4500";
    string cell3CeR2 = "\\clvertalc\\cellx6000";
    string cell4CeR2 = "\\clvertalc\\cellx7500";
    string cell5CeR2 = "\\clvertalc\\cellx9000";
    string cell6CeR2 = "\\clvertalc\\cellx9900";

    string cell3CeR2bis = "\\clvertalc\\cellx9000";
  private string AddCompensiERisorse(XmlNode nodeTree)
    {
      DataTable datiEsecutoriRevisione = cBusinessObjects.GetData(int.Parse(nodeTree.Attributes["ID"].Value), typeof(CompensiERisorse_EsecutoriRevisione), idcliente, idsessione, idtree);
      DataTable datiTerminiEsecuzione = cBusinessObjects.GetData(int.Parse(nodeTree.Attributes["ID"].Value), typeof(CompensiERisorse_TerminiEsecuzione), idcliente, idsessione, idtree);
       DataTable datiCompensoRevisione = null;
      string partial_rtf_text = "";
      
     bool hasrow = false;
     foreach (DataRow item in datiEsecutoriRevisione.Rows)
        {
        if( item["nome"].ToString()!="")
            hasrow = true;
        }
     if (hasrow)
        {

            //ESECUTORI
            partial_rtf_text += "\\pard\\keep";

            partial_rtf_text += " \\b Esecutori delle Attività di Revisione \\b0 \\line \\line";

            partial_rtf_text += "\\par";

            partial_rtf_text += "\\pard\\keep";

            partial_rtf_text += inizioriga + "\n" + colore2 + bordi + cell1CeR1 + colore2 + bordi + cell2CeR1 + inizioriga2;

            partial_rtf_text += " \\qc " + "Nominativo" + "\\cell";

            partial_rtf_text += " \\qc " + "Qualifica" + "\\cell";

            partial_rtf_text += fineriga;

            foreach (DataRow item in datiEsecutoriRevisione.Rows)
            {
                partial_rtf_text += AddNodoCompensiERisorse1(item);
            }

            partial_rtf_text += "\\line\\pard\\bgdkdcross\\cfpat1\\shading59110\\tx2291\\par";


            partial_rtf_text += "\\line";
        }
    datiCompensoRevisione = cBusinessObjects.GetData(int.Parse(nodeTree.Attributes["ID"].Value), typeof(CompensiERisorse_CompensoRevisione), idcliente, idsessione, idtree);
   if (datiTerminiEsecuzione.Rows.Count > 0)
   {

   
      if (datiCompensoRevisione.Rows.Count > 0)
      {
        //COMPENSO
        partial_rtf_text += "\\pard\\keep";

        partial_rtf_text += " \\b Compenso Revisione - Preventivazione \\b0 \\line \\line";

        partial_rtf_text += "\\par";

        partial_rtf_text += "\\pard\\keep";

        partial_rtf_text += inizioriga + "\n" + colore2 + bordi + cell1CeR2 + colore2 + bordi + cell2CeR2 + colore2 + bordi + cell3CeR2 + colore2 + bordi + cell4CeR2 + inizioriga2;

        partial_rtf_text += " \\qc " + "Fase" + "\\cell";

        partial_rtf_text += " \\qc " + "Attività da svolgere" + "\\cell";

        partial_rtf_text += " \\qc " + "Esecutore - Personale addetto" + "\\cell";

        partial_rtf_text += " \\qc " + "Ore" + "\\cell";

        partial_rtf_text += fineriga;
        DataRow nodeData = null;
        foreach (DataRow nodeData1 in datiCompensoRevisione.Rows)
        {
          partial_rtf_text += AddNodoCompensiERisorse2(nodeData1);
          nodeData = nodeData1;
        }
        partial_rtf_text += inizioriga + "\n" + colore1 + cell3CeR2 + colore1 + bordi + cell4CeR2 + inizioriga2;

        partial_rtf_text += " \\qr " + "Totale" + " \\cell";
        partial_rtf_text += " \\qr " + ((nodeData["txtTotale"].ToString() == "") ? "" : nodeData["txtTotale"].ToString()) + " \\cell";

        partial_rtf_text += fineriga;

        partial_rtf_text += inizioriga + "\n" + colore1 + cell3CeR2 + colore1 + bordi + cell4CeR2 + inizioriga2;

        partial_rtf_text += " \\qr " + "Tariffa Oraria" + " \\cell";
        partial_rtf_text += " \\qr " + ((nodeData["txtTariffaOraria"].ToString() == "") ? "" : nodeData["txtTariffaOraria"].ToString()) + " \\cell";

        partial_rtf_text += fineriga;

        partial_rtf_text += inizioriga + "\n" + colore1 + cell3CeR2 + colore1 + bordi + cell4CeR2 + inizioriga2;

        partial_rtf_text += " \\qr " + "Compenso Previsto" + " \\cell";
        partial_rtf_text += " \\qr " + ((nodeData["txtCompenso"].ToString() == "") ? "" : nodeData["txtCompenso"].ToString()) + " \\cell";

        partial_rtf_text += fineriga;
       
    partial_rtf_text += "\\line\\pard\\bgdkdcross\\cfpat1\\shading59110\\tx2291\\par";

    partial_rtf_text += "\\line";
     }
      hasrow = false;
     foreach (DataRow item in datiTerminiEsecuzione.Rows)
        {
        if( item["termini"].ToString()!="")
            hasrow = true;
        }
         if (hasrow)
         { 
            //TERMINI
            partial_rtf_text += "\\pard\\keep";

            partial_rtf_text += " \\b Termini di Esecuzione delle Attività di Revisione \\b0 \\line \\line";

            partial_rtf_text += "\\par";

            partial_rtf_text += "\\pard\\keep";

            partial_rtf_text += inizioriga + "\n" + colore2 + bordi + cell1CeR2 + colore2 + bordi + cell2CeR2 + colore2 + bordi + cell4CeR2 + inizioriga2;

            partial_rtf_text += " \\qc " + "Fase" + "\\cell";

            partial_rtf_text += " \\qc " + "Attività da svolgere" + "\\cell";

            partial_rtf_text += " \\qc " + "Data Termine" + "\\cell";

            partial_rtf_text += fineriga;

            foreach (DataRow nodeData in datiTerminiEsecuzione.Rows)
            {
              partial_rtf_text += AddNodoCompensiERisorse3(nodeData);
            }

            partial_rtf_text += "\\line\\pard\\bgdkdcross\\cfpat1\\shading59110\\tx2291\\par";

            partial_rtf_text += "\\line";
        }
      }
      else
      {
        cell1CeR2 = "\\clvertalc\\cellx1000";
        cell2CeR2 = "\\clvertalc\\cellx5000";
        cell3CeR2 = "\\clvertalc\\cellx8000";
        cell4CeR2 = "\\clvertalc\\cellx10000";

        //COMPENSO
        partial_rtf_text += "\\pard\\keep";

        partial_rtf_text += " \\b Compenso Revisione - Preventivazione - termini di esecuzione delle attività \\b0 \\line \\line";

        partial_rtf_text += "\\par";

        partial_rtf_text += "\\pard\\keep";
        datiCompensoRevisione = cBusinessObjects.GetData(int.Parse(nodeTree.Attributes["ID"].Value), typeof(CompensiERisorse_CompensoRevisione), idcliente, idsessione, idtree);
        DataRow cdt = null;
        foreach (DataRow dt in datiCompensoRevisione.Rows)
        {
          cdt = dt;
        }

        partial_rtf_text += inizioriga + "\n" + colore2 + bordi + cell1CeR2 + colore2 + bordi + cell2CeR2 + colore2 + bordi + cell3CeR2 + ((datiCompensoRevisione.Rows.Count > 0 && cdt["termini"].ToString() != "") ? colore2 + bordi + cell3CeR2bis : "") + colore2 + bordi + cell4CeR2 + inizioriga2;

        partial_rtf_text += " \\qc " + "Fase" + "\\cell";

        partial_rtf_text += " \\qc " + "Attività da svolgere" + "\\cell";

        partial_rtf_text += " \\qc " + "Esecutore - Personale addetto" + "\\cell";

        if ((datiCompensoRevisione.Rows.Count > 0 && cdt["termini"].ToString() != ""))
        {
          partial_rtf_text += " \\qc " + "Data Termine" + "\\cell";
        }

        partial_rtf_text += " \\qc " + "Ore" + "\\cell";

        partial_rtf_text += fineriga;

        foreach (DataRow item in datiCompensoRevisione.Rows)
        {
          partial_rtf_text += AddNodoCompensiERisorse2bis(item);
        }

        partial_rtf_text += inizioriga + "\n" + colore1 + ((datiCompensoRevisione.Rows.Count > 0 && cdt["termini"].ToString() != "") ? cell3CeR2bis : cell3CeR2) + colore1 + bordi + cell4CeR2 + inizioriga2;

        partial_rtf_text += " \\qr " + "Totale" + " \\cell";
        partial_rtf_text += " \\qr " + ((cdt["txtTotale"].ToString() == "") ? "" : cdt["txtTotale"].ToString()) + " \\cell";

        partial_rtf_text += fineriga;

        partial_rtf_text += inizioriga + "\n" + colore1 + ((datiCompensoRevisione.Rows.Count > 0 && cdt["termini"].ToString() != "") ? cell3CeR2bis : cell3CeR2) + colore1 + bordi + cell4CeR2 + inizioriga2;

        partial_rtf_text += " \\qr " + "Tariffa Oraria" + " \\cell";
        partial_rtf_text += " \\qr " + ((cdt["txtTariffaOraria"].ToString() == "") ? "" : cdt["txtTariffaOraria"].ToString()) + " \\cell";

        partial_rtf_text += fineriga;

        partial_rtf_text += inizioriga + "\n" + colore1 + ((datiCompensoRevisione.Rows.Count > 0 && cdt["termini"].ToString() != "") ? cell3CeR2bis : cell3CeR2) + colore1 + bordi + cell4CeR2 + inizioriga2;

        partial_rtf_text += " \\qr " + "Compenso Previsto" + " \\cell";
        partial_rtf_text += " \\qr " + ((cdt["txtCompenso"].ToString() == "") ? "" : cdt["txtCompenso"].ToString()) + " \\cell";

        partial_rtf_text += fineriga;

        partial_rtf_text += "\\line\\pard\\bgdkdcross\\cfpat1\\shading59110\\tx2291\\par";

        partial_rtf_text += "\\line";
      }

      //FINE
      partial_rtf_text += "\\pard\\keep";

      return partial_rtf_text;
    }
    private string AddNodoCompensiERisorse1(DataRow node)
    {

      string partial_rtf_text = "";

      partial_rtf_text += inizioriga + "\n" + colore1 + bordi + cell1CeR1 + colore1 + bordi + cell2CeR1 + inizioriga2;

      partial_rtf_text += " \\ql " + node["nome"].ToString() + " \\cell";
      partial_rtf_text += " \\ql " + node["qualifica"].ToString() + " \\cell";

      partial_rtf_text += fineriga;

      return partial_rtf_text;
    }
    private string AddNodoCompensiERisorseTotali(DataRow node)
    {
      string partial_rtf_text = "";

      partial_rtf_text += inizioriga + "\n" + colore1 + bordi + cell1CeR2 + colore1 + bordi + cell2CeR2 + colore1 + bordi + cell3CeR2 + colore1 + bordi + cell4CeR2  + inizioriga2;

      partial_rtf_text += " \\qc " + node["qualifica"].ToString() + " \\cell";
      partial_rtf_text += " \\ql " + node["ore"].ToString() + " \\cell";
      partial_rtf_text += " \\ql " + node["tariffa"].ToString() + " \\cell";
      partial_rtf_text += " \\qr " + node["compenso"].ToString() + " \\cell";
   
      partial_rtf_text += fineriga;

      return partial_rtf_text;
    }
    private string AddNodoCompensiERisorse2(DataRow node)
    {
      string partial_rtf_text = "";

      partial_rtf_text += inizioriga + "\n" + colore1 + bordi + cell1CeR2 + colore1 + bordi + cell2CeR2 + colore1 + bordi + cell3CeR2 + colore1 + bordi + cell4CeR2 + inizioriga2;

      partial_rtf_text += " \\qc " + node["fase"].ToString() + " \\cell";
      partial_rtf_text += " \\ql " + node["attivita"].ToString() + " \\cell";
      partial_rtf_text += " \\ql " + node["esecutore"].ToString() + " \\cell";
      partial_rtf_text += " \\qr " + node["ore"].ToString() + " \\cell";

      partial_rtf_text += fineriga;

      return partial_rtf_text;
    }
    private string AddNodoCompensiERisorse2bis(DataRow node)
    {
      string partial_rtf_text = "";

      partial_rtf_text += inizioriga + "\n" + colore1 + bordi + cell1CeR2 + colore1 + bordi + cell2CeR2 + colore1 + bordi + cell3CeR2 + ((node["termini"].ToString() != "") ? colore1 + bordi + cell3CeR2bis : "") + colore1 + bordi + cell4CeR2 + inizioriga2;

      partial_rtf_text += " \\qc " + node["fase"].ToString() + " \\cell";
      partial_rtf_text += " \\ql " + node["attivita"].ToString() + " \\cell";
      partial_rtf_text += " \\ql " + node["esecutore"].ToString() + " \\cell";
      if (node["termini"].ToString() == "")
      {
        partial_rtf_text += " \\ql " + node["termini"].ToString() + " \\cell";
      }
      partial_rtf_text += " \\qr " + node["ore"].ToString() + " \\cell";

      partial_rtf_text += fineriga;

      return partial_rtf_text;
    }

    private string AddNodoCompensiERisorse3(DataRow node)
    {
      string partial_rtf_text = "";

      partial_rtf_text += inizioriga + "\n" + colore1 + bordi + cell1CeR2 + colore1 + bordi + cell2CeR2 + colore1 + bordi + cell4CeR2 + inizioriga2;

      partial_rtf_text += " \\qc " + node["fase"].ToString() + " \\cell";
      partial_rtf_text += " \\ql " + node["attivita"].ToString() + " \\cell";
      partial_rtf_text += " \\ql " + node["termini"].ToString() + " \\cell";

      partial_rtf_text += fineriga;

      return partial_rtf_text;
    }
    #endregion

    #region Tempi di Revisione

    private string AddTempiRevisione(XmlNode nodeTree)
    {
      DataTable dati = cBusinessObjects.GetData(int.Parse(nodeTree.Attributes["ID"].Value), typeof(TempiRevisione), idcliente, idsessione, idtree);

      string partial_rtf_text = "";

      //COMPENSO
      partial_rtf_text += "\\pard\\keep";

      partial_rtf_text += " \\b Tempi di Revisione \\b0 \\line";

      partial_rtf_text += "\\par";

      partial_rtf_text += "\\pard\\keep";

      partial_rtf_text += inizioriga + "\n" + colore2 + bordi + cell1CeR2 + colore2 + bordi + cell2CeR2 + colore2 + bordi + cell3CeR2 + colore2 + bordi + cell4CeR2 + inizioriga2;

      partial_rtf_text += " \\qc\\fs16\\b " + "Fase" + "\\b0\\cell";

      partial_rtf_text += " \\qc\\fs16\\b " + "Attività da svolgere" + "\\b0\\cell";

      partial_rtf_text += " \\qc\\fs16\\b " + "Esecutore - Personale addetto" + "\\b0\\cell";

      partial_rtf_text += " \\qc\\fs16\\b " + "Ore" + "\\b0\\cell";

      partial_rtf_text += fineriga;
      double Totale = 0;
      foreach (DataRow item in dati.Rows)
      {

        partial_rtf_text += AddNodoTempiRevisione(item);
        Totale += double.Parse(item["ore"].ToString());

      }

      partial_rtf_text += inizioriga + "\n" + colore1 + cell3CeR2 + colore1 + bordi + cell4CeR2 + inizioriga2;

      partial_rtf_text += " \\qr\\fs20\\b " + "Totale" + " \\b0\\cell";
      partial_rtf_text += " \\qr\\fs20\\b " + ((Totale.ToString() != "") ? Totale.ToString() : "0") + " \\b0\\cell";

      partial_rtf_text += fineriga;

      partial_rtf_text += "\\pard\\bgdkdcross\\cfpat1\\shading59110\\tx2291\\par";

      partial_rtf_text += "\\line";

      //FINE
      partial_rtf_text += "\\pard\\keep";

      return partial_rtf_text;
    }

    private string AddNodoTempiRevisione(DataRow node)
    {
      string partial_rtf_text = "";

      partial_rtf_text += inizioriga + "\n" + colore1 + bordi + cell1CeR2 + colore1 + bordi + cell2CeR2 + colore1 + bordi + cell3CeR2 + colore1 + bordi + cell4CeR2 + inizioriga2;

      partial_rtf_text += " \\qc\\fs20 " + node["fase"].ToString() + " \\cell";
      partial_rtf_text += " \\ql\\fs20 " + node["attivita"].ToString() + " \\cell";
      partial_rtf_text += " \\ql\\fs20 " + node["esecutore"].ToString() + " \\cell";
      partial_rtf_text += " \\qr\\fs20 " + node["ore"].ToString() + " \\cell";

      partial_rtf_text += fineriga;

      return partial_rtf_text;
    }

    #endregion

    #region Lead

    string cell1cllead = "\\clvertalc\\cellx4450";
    string cell2cllead = "\\clvertalc\\cellx4500";
    string cell3cllead = "\\clvertalc\\cellx6350";
    string cell4cllead = "\\clvertalc\\cellx6400";
    string cell5cllead = "\\clvertalc\\cellx8200";
    string cell6cllead = "\\clvertalc\\cellx9900";
    // TODO
    private string AddLead(XmlNode nodeTree, string ID)
    {

      string real_partial_rtf_text = "";
      string partial_rtf_text = "";
      string partial_partial_rtf_text = "";
      string partial_partial_partial_rtf_text = "";


      bool atleastone = false;
      bool titletobeadded = false;

      string titolo = "";
      bool firsttime = true;
      DataTable dati = cBusinessObjects.GetData(int.Parse(ID), typeof(Leads), idcliente, idsessione, idtree);

      foreach (DataRow item in dati.Rows)
      {
        if (item["Tipo"].ToString() == "")
        {
          continue;
        }


        if (titolo != item["Tipo"].ToString())
        {
          if (atleastone)
          {
            partial_rtf_text += partial_partial_rtf_text;
            real_partial_rtf_text += partial_rtf_text;

            partial_rtf_text = "";
            partial_partial_rtf_text = "";
            partial_partial_partial_rtf_text = "";
          }

          atleastone = false;
          titletobeadded = false;

          if (firsttime == false)
          {
            partial_rtf_text += "\\line\\pard\\bgdkdcross\\cfpat1\\shading59110\\tx2291\\par";

            //partial_rtf_text += "\\line";
          }

          if (firsttime == true)
          {
            firsttime = false;
          }

          partial_rtf_text += "\\pard\\keep";

          titolo = item["Tipo"].ToString();

          partial_rtf_text += inizioriga + colore1 + cell1cllead + colore1 + cell2cllead + colore1 + bordi + cell3cllead + colore1 + cell4cllead + colore1 + bordi + cell5cllead + colore1 + bordi + cell6cllead + inizioriga2;

          partial_rtf_text += " \\qc \\b " + titolo + " \\b0 \\cell";

          partial_rtf_text += " \\qc \\b " + "" + " \\b0 \\cell";

          partial_rtf_text += " \\qc \\b " + "ESERCIZIO ATTUALE" + " \\b0 \\cell";

          partial_rtf_text += " \\qc \\b " + "" + " \\b0 \\cell";

          partial_rtf_text += " \\qc \\b " + "ESERCIZIO PRECEDENTE" + " \\b0 \\cell";

          partial_rtf_text += " \\qc \\b " + "incremento decremento" + " \\b0 \\cell";

          partial_rtf_text += fineriga;
        }

        if ((item["EA"].ToString() == "0" || item["EA"].ToString() == "")  && (item["EP"].ToString() == "0" || item["EP"].ToString() == ""))
        {
          //riga vuota
          ;
        }
        else
        {
          // if (item["refEA"].ToString() != "")
          //  {
          atleastone = true;
          titletobeadded = true;
          partial_partial_partial_rtf_text += inizioriga + colore1 + cell1cllead + colore1 + cell2cllead + colore1 + bordi + cell3cllead + colore1 + cell4cllead + colore1 + bordi + cell5cllead + colore1 + bordi + cell6cllead + inizioriga2;
          //   }
          //  else
          //        {
          //         titletobeadded = false;
          //            partial_partial_partial_rtf_text = inizioriga + colore1 + cell1cllead + colore1 + cell2cllead + colore1 + cell3cllead + colore1 + cell4cllead + colore1 + cell5cllead + colore1 + cell6cllead + inizioriga2;
          // }

          partial_partial_partial_rtf_text += " \\ql " + ((item["refEA"].ToString() == "") ? " \\b \\ul " : "") + ((item["Titolo"].ToString() == "") ? "" : item["Titolo"].ToString()) + ((item["refEA"].ToString() == "") ? " \\b0 \\ul0 " : "") + "\\cell";

          partial_partial_partial_rtf_text += " \\ql " + ((item["refEA"].ToString() == "") ? "" : item["refEA"].ToString()) + "\\cell";

          partial_partial_partial_rtf_text += " \\qr " + ((item["EA"].ToString() == "") ? "" : item["EA"].ToString()) + "\\cell";

          partial_partial_partial_rtf_text += " \\ql " + ((item["refEP"].ToString() == "") ? "" : item["refEP"].ToString()) + "\\cell";

          partial_partial_partial_rtf_text += " \\qr " + ((item["EP"].ToString() == "") ? "" : item["EP"].ToString()) + "\\cell";

          partial_partial_partial_rtf_text += " \\qr " + ((item["incdec"].ToString() == "") ? "" : item["incdec"].ToString()) + "\\cell";

          partial_partial_partial_rtf_text += fineriga;

          if (titletobeadded)
          {
            partial_partial_rtf_text += partial_partial_partial_rtf_text;
            partial_partial_partial_rtf_text = "";
            titletobeadded = false;
          }
        }

      }

      if (atleastone)
      {
        partial_rtf_text += partial_partial_rtf_text;
        real_partial_rtf_text += partial_rtf_text;

        partial_rtf_text = "";
        partial_partial_rtf_text = "";
      }

      if (firsttime != true)
      {
        real_partial_rtf_text += "\\line\\pard\\bgdkdcross\\cfpat1\\shading59110\\tx2291\\par";

        if (!TitoloVerbale && !Fascicolo)
        {
          real_partial_rtf_text += " \\page";
        }
      }

      return real_partial_rtf_text;
    }

    #endregion

    #region Lettera di Incarico
    private string AddLetteraIncarico_Personale(XmlNode nodeTree, string ID)
    {

      string partial_rtf_text = "";

      DataTable dati = cBusinessObjects.GetData(int.Parse(ID), typeof(Incarico_Personale), idcliente, idsessione, idtree);
      DataRow nodeData = null;
      foreach (DataRow dt in dati.Rows)
      {
        nodeData = dt;
      }
        if (nodeData == null)
            return "";
      if (nodeData["Incipit"].ToString() != "")
      {
        partial_rtf_text += "\\pard\\keepn\\f0 \\fs24 " + nodeData["Incipit"].ToString() + " \\line \\par\n";
      }

      partial_rtf_text += "\\pard\\keep";

      Hashtable Header = new Hashtable();
      Hashtable Colonne = new Hashtable();
      Hashtable Lunghezze = new Hashtable();
      Hashtable Tipologia = new Hashtable();

      Header.Add(1, "Nome");
      Colonne.Add(1, "name");
      Lunghezze.Add(1, 170);
      Tipologia.Add(1, TipologiaDato.Stringa);
      Header.Add(2, "Incarico");
      Colonne.Add(2, "codice");
      Lunghezze.Add(2, 130);
      Tipologia.Add(2, TipologiaDato.Stringa);
      Header.Add(3, "Note");
      Colonne.Add(3, "note");
      Lunghezze.Add(3, 140);
      Tipologia.Add(3, TipologiaDato.Stringa);

      partial_rtf_text += CreateTable(Header, Lunghezze, "20");

      int index = 0;
      foreach (DataRow dt in dati.Rows)
      {
        partial_rtf_text += AddNodoTable(dt, index++, Colonne, Tipologia, Lunghezze, "20");
      }

      partial_rtf_text += "\\pard\\bgdkdcross\\cfpat1\\shading59110\\tx2291\\par";

      return partial_rtf_text;
    }

    private string AddLetteraIncarico_TempiCorrispettivi(XmlNode nodeTree, string ID)
    {
      string partial_rtf_text = "";
      DataTable dati = cBusinessObjects.GetData(int.Parse(nodeTree.Attributes["ID"].Value), typeof(TempiCorrispettivi), idcliente, idsessione, idtree);
      DataRow nodeData = null;
      foreach (DataRow dt in dati.Rows)
      {
        nodeData = dt;
      }

      if (nodeData["Incipit"].ToString() != "")
      {
        partial_rtf_text += "\\pard\\keepn\\f0 \\fs24 " + nodeData["Incipit"].ToString() + " \\line \\par\n";
      }

      partial_rtf_text += "\\pard\\keep";

      partial_rtf_text += "\\pard\\keepn\\f0 \\fs24 ATTIVITA' DI REVISIONE \\line \\par\n";
      partial_rtf_text += "\\pard\\keep";


      Hashtable Header = new Hashtable();
      Hashtable Colonne = new Hashtable();
      Hashtable Lunghezze = new Hashtable();
      Hashtable Tipologia = new Hashtable();

      Header.Add(1, "Attività");
      Colonne.Add(1, "name");
      Lunghezze.Add(1, 140);
      Tipologia.Add(1, TipologiaDato.Stringa);
      Header.Add(2, "Esecutore");
      Colonne.Add(2, "codice");
      Lunghezze.Add(2, 90);
      Tipologia.Add(2, TipologiaDato.Stringa);
      Header.Add(3, "Ore");
      Colonne.Add(3, "ore");
      Lunghezze.Add(3, 70);
      Tipologia.Add(3, TipologiaDato.DoubleNoDecimali);
      Header.Add(4, "Tariffa Ora");
      Colonne.Add(4, "tariffaoraria");
      Lunghezze.Add(4, 70);
      Tipologia.Add(4, TipologiaDato.Double);
      Header.Add(5, "Onorario");
      Colonne.Add(5, "onorario");
      Lunghezze.Add(5, 70);
      Tipologia.Add(5, TipologiaDato.Double);


      partial_rtf_text += CreateTable(Header, Lunghezze, "20");

      int index = 0;

      foreach (DataRow dt in dati.Rows)
      {

        partial_rtf_text += AddNodoTable(dt, index++, Colonne, Tipologia, Lunghezze, "20");

      }

      partial_rtf_text += "\\pard\\bgdkdcross\\cfpat1\\shading59110\\tx2291\\par";


      partial_rtf_text += "\\pard\\keepn\\f0 \\fs24 ATTIVITA' DI VIGILANZA \\line \\par\n";
      partial_rtf_text += "\\pard\\keep";


      Header = new Hashtable();
      Colonne = new Hashtable();
      Lunghezze = new Hashtable();
      Tipologia = new Hashtable();

      Header.Add(1, "Professionista");
      Colonne.Add(1, "professionista");
      Lunghezze.Add(1, 210);
      Tipologia.Add(1, TipologiaDato.Stringa);
      Header.Add(2, "Qualifica");
      Colonne.Add(2, "qualifica");
      Lunghezze.Add(2, 160);
      Tipologia.Add(2, TipologiaDato.Stringa);
      Header.Add(3, "Onorario");
      Colonne.Add(3, "onorario");
      Lunghezze.Add(3, 70);
      Tipologia.Add(3, TipologiaDato.Double);


      partial_rtf_text += CreateTable(Header, Lunghezze, "20");

      index = 0;
      DataTable datiVigilanza = cBusinessObjects.GetData(int.Parse(nodeTree.Attributes["ID"].Value), typeof(TempiCorrispettiviVigilanza), idcliente, idsessione, idtree);
      foreach (DataRow dt in datiVigilanza.Rows)
      {
        partial_rtf_text += AddNodoTable(dt, index++, Colonne, Tipologia, Lunghezze, "20");
      }


      partial_rtf_text += "\\pard\\bgdkdcross\\cfpat1\\shading59110\\tx2291\\par";

      return partial_rtf_text;
    }


    private string AddLetteraIncarico_Pagamenti(XmlNode nodeTree, string ID)
    {
      string partial_rtf_text = "";
      DataRow nodedata = null;
      DataTable dati = cBusinessObjects.GetData(int.Parse(nodeTree.Attributes["ID"].Value), typeof(Incarico_Pagamenti), idcliente, idsessione, idtree);
      foreach (DataRow dt in dati.Rows)
      {
        partial_rtf_text += "\\pard\\keepn\\f0 \\fs24 " + dt["Incipit"].ToString() + " \\line \\par\n";
        nodedata = dt;
      }
      if (nodedata == null)
        return "";

      partial_rtf_text += "\\pard\\keep";

      Hashtable Header = new Hashtable();
      Hashtable Colonne = new Hashtable();
      Hashtable Lunghezze = new Hashtable();
      Hashtable Tipologia = new Hashtable();

      Header.Add(1, "Descrizione");
      Colonne.Add(1, "name");
      Lunghezze.Add(1, 310);
      Tipologia.Add(1, TipologiaDato.Stringa);
      Header.Add(2, "Data Pagamento");
      Colonne.Add(2, "codice");
      Lunghezze.Add(2, 130);
      Tipologia.Add(2, TipologiaDato.Stringa);

      partial_rtf_text += CreateTable(Header, Lunghezze, "20");

      int index = 0;
      foreach (DataRow dt in dati.Rows)
      {

        partial_rtf_text += AddNodoTable(dt, index++, Colonne, Tipologia, Lunghezze, "20");
      }

      partial_rtf_text += "\\pard\\bgdkdcross\\cfpat1\\shading59110\\tx2291\\par";

      return partial_rtf_text;
    }
    #endregion

    #region Dipendenza Finanziaria

    string cell1cldf = "\\clvertalc\\cellx6000";
    string cell2cldf = "\\clvertalc\\cellx7500";
    string cell3cldf = "\\clvertalc\\cellx9900";

    string cell1cldf2 = "\\clvertalc\\cellx2000";
    string cell2cldf2 = "\\clvertalc\\cellx4000";
    string cell3cldf2 = "\\clvertalc\\cellx7000";

    private string AddDipendenzaFinanziaria(XmlNode nodeTree)
    {

      string partial_rtf_text = "";

      DataRow nodeData = null;
      DataTable dati = cBusinessObjects.GetData(int.Parse(nodeTree.Attributes["ID"].Value), typeof(IndipendenzaFinanziaria), idcliente, idsessione, idtree);
      foreach (DataRow dt in dati.Rows)
      {
        nodeData = dt;
      }
      if (nodeData == null)
        return "";

      partial_rtf_text += "\\pard\\keep";

      partial_rtf_text += inizioriga + "\n" + colore2 + bordi + cell1cldf + colore2 + bordi + cell2cldf + colore2 + bordi + cell3cldf + inizioriga2;

      partial_rtf_text += " \\qc \\b " + "Descrizione parametro" + "\\cell";

      partial_rtf_text += " \\qc " + "Sigla" + "\\cell";

      partial_rtf_text += " \\qc " + "Importo" + "\\b0 \\cell";

      partial_rtf_text += fineriga;

      partial_rtf_text += inizioriga + "\n" + colore1 + bordi + cell1cldf + colore1 + bordi + cell2cldf + colore1 + bordi + cell3cldf + inizioriga2;

      partial_rtf_text += " \\ql " + "Compensi totali del professionista (individuali + rete)" + "\\cell";

      partial_rtf_text += " \\qc " + "CT" + "\\cell";

      partial_rtf_text += " \\qr " + ((nodeData["txtCT"].ToString() != "") ? nodeData["txtCT"].ToString() : "0") + "\\cell";

      partial_rtf_text += fineriga;

      partial_rtf_text += inizioriga + "\n" + colore1 + bordi + cell1cldf + colore1 + bordi + cell2cldf + colore1 + bordi + cell3cldf + inizioriga2;

      partial_rtf_text += " \\ql " + "Compensi dall'attività di sindaco nella società o gruppo" + "\\cell";

      partial_rtf_text += " \\qc " + "S" + "\\cell";

      partial_rtf_text += " \\qr " + ((nodeData["txtS"].ToString() != "") ? nodeData["txtS"].ToString() : "0") + "\\cell";

      partial_rtf_text += fineriga;

      partial_rtf_text += inizioriga + "\n" + colore1 + bordi + cell1cldf + colore1 + bordi + cell2cldf + colore1 + bordi + cell3cldf + inizioriga2;

      partial_rtf_text += " \\ql " + "Compensi da attività diverse da quella di sindaco dalla medesima società o gruppo" + "\\cell";

      partial_rtf_text += " \\qc " + "C" + "\\cell";

      partial_rtf_text += " \\qr " + ((nodeData["txtC"].ToString() != "") ? nodeData["txtC"].ToString() : "0") + "\\cell";

      partial_rtf_text += fineriga;

      partial_rtf_text += "\\line\\pard\\bgdkdcross\\cfpat1\\shading59110\\tx2291\\par";

      //andrea
      //FileInfo fi = new FileInfo(System.IO.Path.GetFullPath("./DipendenzaFinanziaria.rtf"));
      FileInfo fi = new FileInfo(System.IO.Path.GetFullPath(App.AppTemplateFolder + "\\DipendenzaFinanziaria.rtf"));
      if (fi.Exists)
      {
        StreamReader sr = fi.OpenText();
        partial_rtf_text += sr.ReadToEnd();
      }

      partial_rtf_text += "\\pard\\keep";

      partial_rtf_text += inizioriga + "\n" + colore2 + bordi + cell2cldf2 + colore2 + bordi + cell3cldf2 + inizioriga2;

      partial_rtf_text += " \\qc \\b " + "Risultati" + " \\cell";

      partial_rtf_text += " \\qc " + "Valutazione" + " \\b0 \\cell ";

      partial_rtf_text += fineriga;

      partial_rtf_text += inizioriga + "\n" + colore1 + bordi + cell1cldf2 + colore1 + bordi + cell2cldf2 + colore1 + bordodx + cell3cldf2 + inizioriga2;

      partial_rtf_text += " \\qc " + "( S + C ) / CT" + "\\cell";

      partial_rtf_text += " \\qc " + ((nodeData["txtSCCT"].ToString() != "") ? nodeData["txtSCCT"].ToString() : "0") + "\\cell";

      partial_rtf_text += " \\qc " + "" + "\\cell";

      partial_rtf_text += fineriga;

      partial_rtf_text += inizioriga + "\n" + colore1 + bordi + cell1cldf2 + colore1 + bordi + cell2cldf2 + colore1 + bordodx + cell3cldf2 + inizioriga2;

      partial_rtf_text += " \\qc " + "S / ( S + C )" + "\\cell";

      partial_rtf_text += " \\qc " + ((nodeData["txtSSC"].ToString() != "") ? nodeData["txtSSC"].ToString() : "0") + "\\cell";

      partial_rtf_text += " \\qc \\b " + ((nodeData["txtValutazione"].ToString() != "") ? nodeData["txtValutazione"].ToString() : "0") + " \\b0 \\cell";

      partial_rtf_text += fineriga;

      partial_rtf_text += inizioriga + "\n" + colore1 + bordi + cell1cldf2 + colore1 + bordi + cell2cldf2 + colore1 + bordodx + bordodown + cell3cldf2 + inizioriga2;

      partial_rtf_text += " \\qc " + "Fascia" + "\\cell";

      partial_rtf_text += " \\qc " + ((nodeData["txtFascia"].ToString() != "") ? nodeData["txtFascia"].ToString() : "0") + "\\cell";

      partial_rtf_text += " \\qc " + "" + "\\cell";

      partial_rtf_text += fineriga;

      partial_rtf_text += "\\line\\pard\\bgdkdcross\\cfpat1\\shading59110\\tx2291\\par";

      return partial_rtf_text;
    }

    #endregion

    #region AddAltoMedioBasso


    private enum AltoMedioBasso { Sconosciuto, Alto, Medio, Basso };

    private string AddAltoMedioBasso(XmlNode nodeTree)
    {

      string cell1clpNEW = "\\clvertalc\\cellx500";
      string cell2clpNEW = "\\clvertalc\\cellx1000";
      string cell3clpNEW = "\\clvertalc\\cellx3740";
      string cell4clpNEW = "\\clvertalc\\cellx4240";
      string cell5clpNEW = "\\clvertalc\\cellx6980";
      string cell6clpNEW = "\\clvertalc\\cellx7480";
      string cell7clpNEW = "\\clvertalc\\cellx10000";
      string cell8clpNEW = "\\clvertalc\\cellx10001";


      DataRow nodeData = null;
      DataTable dati = cBusinessObjects.GetData(int.Parse(nodeTree.Attributes["ID"].Value), typeof(clsAltoMedioBasso), idcliente, idsessione, idtree);
      foreach (DataRow dt in dati.Rows)
      {
        nodeData = dt;
      }
      if (nodeData == null)
        return "";

      RischioGlobaleTBD = true;

      string partial_rtf_text = "";

      partial_rtf_text += "\\pard\\keep \\fs30";

      string valore = "";

      if (nodeData["value"].ToString() != "")
      {
        valore = nodeData["value"].ToString();
      }

      partial_rtf_text += inizioriga + "\n" + colore1 + cell1clpNEW + colore1 + cell2clpNEW + colore1 + cell3clpNEW + colore1 + cell4clpNEW + colore1 + cell5clpNEW + colore1 + cell6clpNEW + colore1 + cell7clpNEW + colore1 + cell8clpNEW + inizioriga2;

      partial_rtf_text += " \\cell";

      partial_rtf_text += "\\f1" + ((valore == (Convert.ToInt32(AltoMedioBasso.Alto)).ToString()) ? checkbox_Cheched : checkbox_UnCheched) + "\\f0\\cell";

      partial_rtf_text += " " + "Alto" + "\\cell";

      partial_rtf_text += "\\f1" + ((valore == (Convert.ToInt32(AltoMedioBasso.Medio)).ToString()) ? checkbox_Cheched : checkbox_UnCheched) + "\\f0\\cell";

      partial_rtf_text += " " + "Medio" + "\\cell";

      partial_rtf_text += "\\f1" + ((valore == (Convert.ToInt32(AltoMedioBasso.Basso)).ToString() || valore == "") ? checkbox_Cheched : checkbox_UnCheched) + "\\f0\\cell";

      partial_rtf_text += " " + "Basso" + "\\cell";

      partial_rtf_text += " \\cell";

      partial_rtf_text += fineriga;

      partial_rtf_text += "\\fs20\\line\\pard\\bgdkdcross\\cfpat1\\shading59110\\tx2291\\par ";
      if (!TitoloVerbale && !Fascicolo)
      {
        partial_rtf_text += " \\page ";
      }

      return partial_rtf_text;
    }

    #endregion

    #region Nodo Multiplo & Nodo Multiplo Orizzontale
    private string AddNodoMultiplo(XmlNode nodeTree)
    {

      string partial_rtf_text = "";
      string partial_rtf_text2 = "";
      bool esistevalore = false;

#pragma warning disable CS0219 // La variabile è assegnata, ma il suo valore non viene mai usato
      bool first = true;
#pragma warning restore CS0219 // La variabile è assegnata, ma il suo valore non viene mai usato

      foreach (XmlNode item in nodeTree.ChildNodes)
      {
        if (item.Name == "Node")
        {
          string upper_partial_rtf_text = "";

          if (item.Attributes["Tipologia"].Value == "Excel: Bilancio Patrimoniale Passivo")
          {
            upper_partial_rtf_text += " \\line\\pard\\keepn \\page \\par\n ";
          }

          if (item.Attributes["Tipologia"].Value == "Excel: Bilancio Conto Economico")
          {
            upper_partial_rtf_text += " \\line\\pard\\keepn \\page \\par\n ";
          }

          if (item.Attributes["ID"].Value == "250" || item.Attributes["ID"].Value == "251")
          {
            upper_partial_rtf_text += " \\line\\pard\\keepn \\page \\par\n ";
          }

          bool gotonewpage = false;

          if (item.Attributes["Tipologia"].Value != "Tabella Replicabile" && !StampaRelazioneGenerica && !StampaLetteraIncarico && !StampaLetteraAttestazione && !StampaManagementLetter && !StampaCodiceEtico)
          {
            if (item.Attributes["Tab"].Value != "")
            {
              //if ( !first )
              //{
              //    partial_rtf_text += "\\line";
              //}


              DataTable dati = cBusinessObjects.GetData(int.Parse(nodeTree.Attributes["ID"].Value), typeof(PianificazioneNewSingolo), idcliente, idsessione, idtree);

              if (dati.Rows.Count > 0 && item.Attributes["Tab"].Value.Contains("Scelte da Pianificazione"))
              {
                upper_partial_rtf_text += "\\b Definizione dell'intensità di revisione: \\b0 \\line \\line ";
              }
             if(item.Attributes["Tab"]!=null  || item.Attributes["TitoloTab"]!=null)
             {

                switch (item.Attributes["ID"].Value)
                {
                    case "2016195":
                    case "201613":
                    case "2016194":
                    gotonewpage = true;

                    upper_partial_rtf_text += "\\pard\\keepn\\b\\f0 " + ((item.Attributes["TitoloTab"] != null) ? item.Attributes["TitoloTab"].Value : item.Attributes["Tab"].Value) + "\\b0 \\line \\par\n";
                    break;
                    default:
                    gotonewpage = false;
                    
                    if( item.Attributes["TitoloTab"]!=null)
                        upper_partial_rtf_text += "\\pard\\keepn\\b\\f0 " + item.Attributes["Tab"].Value + ":\\b0 \\line \\par\n";
                    break;
                }
             }
            }
            else
            {
              upper_partial_rtf_text += "\\line ";
            }
          }

          first = false;


          string partial_partial_rtf_text = "";

          switch (item.Attributes["Tipologia"].Value)
          {
            case "Testo":

             if (afterpianificazione)
              {
                afterpianificazione = false;
                DataTable dati = cBusinessObjects.GetData(int.Parse(item.Attributes["ID"].Value), typeof(Testi), idcliente, idsessione, idtree);
                foreach (DataRow itempsn in dati.Rows)
                {
                  if (itempsn["value"].ToString() != "" )
                  {
                    partial_partial_rtf_text += "\\pard\\keepn\\b\\f0 " + itempsn["name"].ToString() + ":\\b0 \\line \\par\n";
                    partial_partial_rtf_text += "\\pard\\keepn\\f0 " + itempsn["value"].ToString() + "\\line \\par\n";
                    break;
                  }
                }
              }
              else
              {
                partial_partial_rtf_text += AddTesto(item);
              }
              break;
            case "Relazione: Testo proposto a Scelta Multipla":
              partial_partial_rtf_text += AddTestoProposto(item);
              break;
            case "Tabella":
              partial_partial_rtf_text += AddTabella(item);
              break;
            case "Prospetto IVA":
              partial_partial_rtf_text += AddProspettoIVA(item, item.Attributes["ID"].Value);
              break;
            case "Excel: PianificazioneNew":
              partial_partial_rtf_text += AddPianificazioneNew(nodeTree, item.Attributes["ID"].Value);
              break;
            case "Tabella Replicabile":
              partial_partial_rtf_text += AddTabellaReplicabile(item);
              break;
            case "Check List":
              partial_partial_rtf_text += AddCheckList(item);
              if (gotonewpage == true)
              {
                partial_partial_rtf_text += " \\page ";
              }
              break;
            case "Check List +":
              partial_partial_rtf_text += AddCheckListpiu(item);
              break;
            case "Nodo Multiplo":
            case "Nodo Multiplo Orizzontale":
              partial_partial_rtf_text += AddNodoMultiplo(item);
              break;
            case "Excel: Errori Rilevati":
            case "Excel: Errori Rilevati New":
              upper_partial_rtf_text = " \\pard\\keep \\page \\par " + upper_partial_rtf_text;
              partial_partial_rtf_text += AddErroriRilevati(nodeTree, item.Attributes["ID"].Value);
              break;
            case "Excel: Riconciliazioni Banche":
              partial_partial_rtf_text += AddRiconciliazioni(nodeTree, item.Attributes["ID"].Value);//nodeTree.Attributes["ID"].Value);
              break;

            case "Excel: Cassa Contante":
              partial_partial_rtf_text += AddCassaContanteNew(nodeTree, item.Attributes["ID"].Value);//nodeTree.Attributes["ID"].Value);
              break;

            case "Excel: Cassa Contante Altre Valute":
              partial_partial_rtf_text += AddCassaContanteAltreValute(nodeTree, item.Attributes["ID"].Value);//nodeTree.Attributes["ID"].Value);
              break;

            case "Excel: Rifiuti":
              partial_partial_rtf_text += AddRifiuti(nodeTree, item.Attributes["ID"].Value);//nodeTree.Attributes["ID"].Value);
              break;
            case "Accettazionedelrischio_6_1":
                partial_partial_rtf_text += AddAccettazionedelrischio_6_1(item, item.Attributes["ID"].Value);
                break;  
            case "Excel: ScrittureMagazzino":
              partial_partial_rtf_text += AddScrittureMagazzino(nodeTree, item.Attributes["ID"].Value);//nodeTree.Attributes["ID"].Value);
              break;

            case "Excel: Bilancio Patrimoniale Attivo":
            case "Excel: Bilancio Patrimoniale Passivo":
            case "Excel: Bilancio Conto Economico":
            case "Excel: Bilancio Abbreviato Patrimoniale Attivo":
            case "Excel: Bilancio Abbreviato Patrimoniale Passivo":
            case "Excel: Bilancio Abbreviato Conto Economico":
            case "Excel: Bilancio":
              partial_partial_rtf_text += AddBilancio(nodeTree, item.Attributes["ID"].Value, ((item.Attributes["Tab"].Value == "") ? item.Attributes["Titolo"].Value : item.Attributes["Tab"].Value));
              break;
            case "Excel: Lead":
              partial_partial_rtf_text += AddLead(item, item.Attributes["ID"].Value);
              break;
            case "Excel":
              if (item.Attributes["ID"].Value == "200")
              {
                partial_partial_rtf_text += AddValutazioneAmbiente(nodeTree, item.Attributes["ID"].Value);
              }
              else if (item.Attributes["ID"].Value == "202")
              {
                partial_partial_rtf_text += AddCicli(nodeTree, item.Attributes["ID"].Value);
              }
              else if (nodeTree.Attributes["ID"].Value == "22" || item.Attributes["ID"].Value == "22")
              {
                RischioGlobaleAlreadyPrinted = true;
                partial_partial_rtf_text += AddRischioGlobale(nodeTree, item.Attributes["ID"].Value, true);
              }

              break;
            case "Excel: Compensi e Risorse":
              partial_partial_rtf_text += AddCompensiERisorse(item);
              break;
            case "Report":
              partial_partial_rtf_text += AddAltoMedioBasso(item);
              break;
            default:
              break;
          }

          if (partial_partial_rtf_text != "")
          {
            esistevalore = true;
            partial_rtf_text2 += upper_partial_rtf_text + partial_partial_rtf_text;
          }
        }
      }

      if (esistevalore == true)
      {
        //if (nodeTree.Attributes["Tab"].Value != "")
        //{
        //    partial_rtf_text += "\\line\\pard\\keepn\\b\\f0 " + nodeTree.Attributes["Tab"].Value + ":\\b0 \\line \\par\n";
        //}
        //else
        if (!StampaRelazioneGenerica && !SenzaStampareTitoli && !StampaLetteraIncarico && !StampaLetteraAttestazione && !StampaManagementLetter && !StampaCodiceEtico)
        {
          partial_rtf_text += "\\line ";
        }

        partial_rtf_text += partial_rtf_text2;

        return partial_rtf_text;
      }
      else
      {
        return "";
      }
    }
    #endregion

    #region Numeri Casuali

    string cell1nc = "\\clvertalc\\cellx1400";
    string cell2nc = "\\clvertalc\\cellx2800";
    string cell3nc = "\\clvertalc\\cellx4200";
    string cell4nc = "\\clvertalc\\cellx5600";
    string cell5nc = "\\clvertalc\\cellx7000";
    string cell6nc = "\\clvertalc\\cellx8400";
    string cell7nc = "\\clvertalc\\cellx9800";

    private string AddNumeriCasuali(XmlNode nodeTree, string ID)
    {

      string partial_rtf_text = "";
      DataRow nodenodo = null;


      partial_rtf_text += "\\pard\\keep";
      DataTable dati = cBusinessObjects.GetData(int.Parse(nodeTree.Attributes["ID"].Value), typeof(Excel_NumeriCasuali), idcliente, idsessione, idtree);
      foreach (DataRow dt in dati.Rows)
      {
        nodenodo = dt;
      }

      if (nodenodo == null)
        return "";


      partial_rtf_text += inizioriga + "\n" + colore1 + bordi + cell1nc + colore1 + bordi + cell2nc + colore1 + bordi + cell3nc + colore1 + bordi + cell4nc + colore1 + bordi + cell5nc + colore1 + bordi + cell6nc + colore1 + bordi + cell7nc + inizioriga2;

      partial_rtf_text += " \\qr " + ((nodenodo["txt1"].ToString() == null) ? "" : nodenodo["txt1"].ToString()) + "\\cell";
      partial_rtf_text += " \\qr " + ((nodenodo["txt2"].ToString() == null) ? "" : nodenodo["txt2"].ToString()) + "\\cell";
      partial_rtf_text += " \\qr " + ((nodenodo["txt3"].ToString() == null) ? "" : nodenodo["txt3"].ToString()) + "\\cell";
      partial_rtf_text += " \\qr " + ((nodenodo["txt4"].ToString() == null) ? "" : nodenodo["txt4"].ToString()) + "\\cell";
      partial_rtf_text += " \\qr " + ((nodenodo["txt5"].ToString() == null) ? "" : nodenodo["txt5"].ToString()) + "\\cell";
      partial_rtf_text += " \\qr " + ((nodenodo["txt6"].ToString() == null) ? "" : nodenodo["txt6"].ToString()) + "\\cell";
      partial_rtf_text += " \\qr " + ((nodenodo["txt7"].ToString() == null) ? "" : nodenodo["txt7"].ToString()) + "\\cell";

      partial_rtf_text += fineriga;

      partial_rtf_text += inizioriga + "\n" + colore1 + bordi + cell1nc + colore1 + bordi + cell2nc + colore1 + bordi + cell3nc + colore1 + bordi + cell4nc + colore1 + bordi + cell5nc + colore1 + bordi + cell6nc + colore1 + bordi + cell7nc + inizioriga2;

      partial_rtf_text += " \\qr " + ((nodenodo["txt8"].ToString() == null) ? "" : nodenodo["txt8"].ToString()) + "\\cell";
      partial_rtf_text += " \\qr " + ((nodenodo["txt9"].ToString() == null) ? "" : nodenodo["txt9"].ToString()) + "\\cell";
      partial_rtf_text += " \\qr " + ((nodenodo["txt10"].ToString() == null) ? "" : nodenodo["txt10"].ToString()) + "\\cell";
      partial_rtf_text += " \\qr " + ((nodenodo["txt11"].ToString() == null) ? "" : nodenodo["txt11"].ToString()) + "\\cell";
      partial_rtf_text += " \\qr " + ((nodenodo["txt12"].ToString() == null) ? "" : nodenodo["txt12"].ToString()) + "\\cell";
      partial_rtf_text += " \\qr " + ((nodenodo["txt13"].ToString() == null) ? "" : nodenodo["txt13"].ToString()) + "\\cell";
      partial_rtf_text += " \\qr " + ((nodenodo["txt14"].ToString() == null) ? "" : nodenodo["txt14"].ToString()) + "\\cell";

      partial_rtf_text += fineriga;

      partial_rtf_text += "\\line\\pard\\bgdkdcross\\cfpat1\\shading59110\\tx2291\\par";

      return partial_rtf_text;
    }
    #endregion

    #region Capitale Sociale

    public enum TipologiaDato { Intero = 1, Stringa = 2, Double = 3, Percent = 4, TipoRipartizione = 5, Alto = 6, Medio = 7, Basso = 8, StringaDx = 9, TipoAffidamento = 10, Booleano = 11, DoubleNoDecimali = 12, StringaCenter = 13, InteroCenter = 14 };

    private string AddCapitaleSociale(XmlNode nodeTree)
    {

      string partial_rtf_text = "";
      string partial_partial_rtf_text = "";
      bool esistealmenounariga = false;

      #region Capitale sociale 1

      partial_partial_rtf_text += "\\line\\pard\\keepn\\b\\f0 " + "COMPOSIZIONE CAPITALE SOCIALE:" + "\\b0 \\line \\par\n";

      partial_partial_rtf_text += "\\pard\\keep";

      Hashtable Header = new Hashtable();
      Hashtable Colonne = new Hashtable();
      Hashtable Lunghezze = new Hashtable();
      Hashtable Tipologia = new Hashtable();

      Header.Add(1, "Capitale Sociale / tipi e cat. azioni");
      Colonne.Add(1, "name");
      Lunghezze.Add(1, 242);
      Tipologia.Add(1, TipologiaDato.Stringa);
      Header.Add(2, "Deliberato");
      Colonne.Add(2, "deliberato");
      Lunghezze.Add(2, 80);
      Tipologia.Add(2, TipologiaDato.Double);
      Header.Add(3, "Sottoscritto");
      Colonne.Add(3, "sottoscritto");
      Lunghezze.Add(3, 80);
      Tipologia.Add(3, TipologiaDato.Double);
      Header.Add(4, "Versato");
      Colonne.Add(4, "versato");
      Lunghezze.Add(4, 80);
      Tipologia.Add(4, TipologiaDato.Double);

      partial_partial_rtf_text += CreateTable(Header, Lunghezze, "16");

      int index = 0;



      DataTable dati = cBusinessObjects.GetData(int.Parse(nodeTree.Attributes["ID"].Value), typeof(Excel_CapitaleSociale_CapitaleSociale), idcliente, idsessione, idtree);


      foreach (DataRow item in dati.Rows)
      {

        if (item["versato"].ToString() != null && item["versato"].ToString() != "" && item["versato"].ToString() != "0")
        {
          esistealmenounariga = true;
        }
        partial_partial_rtf_text += AddNodoTable(item, index++, Colonne, Tipologia, Lunghezze);

      }

      partial_partial_rtf_text += "\\line\\pard\\bgdkdcross\\cfpat1\\shading59110\\tx2291\\par";

      if (esistealmenounariga)
      {
        partial_rtf_text += partial_partial_rtf_text;
      }
      #endregion

      #region Capitale sociale 2

      esistealmenounariga = false;
      partial_partial_rtf_text = "";

      partial_partial_rtf_text += "\\pard\\keep";

      Header = new Hashtable();
      Colonne = new Hashtable();
      Lunghezze = new Hashtable();
      Tipologia = new Hashtable();

      Header.Add(1, "Tipi e categorie di azioni");
      Colonne.Add(1, "name");
      Lunghezze.Add(1, 242);
      Tipologia.Add(1, TipologiaDato.Stringa);
      Header.Add(2, "Val.Nom.");
      Colonne.Add(2, "valnom");
      Lunghezze.Add(2, 80);
      Tipologia.Add(2, TipologiaDato.Double);
      Header.Add(3, "Numero");
      Colonne.Add(3, "numero");
      Lunghezze.Add(3, 80);
      Tipologia.Add(3, TipologiaDato.Double);
      Header.Add(4, "Totale");
      Colonne.Add(4, "totale");
      Lunghezze.Add(4, 80);
      Tipologia.Add(4, TipologiaDato.Double);

      partial_partial_rtf_text += CreateTable(Header, Lunghezze, "16");


      DataTable datiTipiAzioni = cBusinessObjects.GetData(int.Parse(nodeTree.Attributes["ID"].Value), typeof(Excel_CapitaleSociale_TipiAzioni), idcliente, idsessione, idtree);

      index = 0;
      foreach (DataRow item in datiTipiAzioni.Rows)
      {

        if (item["totale"].ToString() != "" && item["totale"].ToString() != "0")
        {
          esistealmenounariga = true;
        }

        partial_partial_rtf_text += AddNodoTable(item, index++, Colonne, Tipologia, Lunghezze);

      }

      partial_partial_rtf_text += "\\line\\pard\\bgdkdcross\\cfpat1\\shading59110\\tx2291\\par";

      if (esistealmenounariga)
      {
        partial_rtf_text += partial_partial_rtf_text;
      }
      #endregion

      #region ripartizione

      esistealmenounariga = false;
      partial_partial_rtf_text = "";

      partial_partial_rtf_text += "\\line\\pard\\keepn\\b\\f0 " + "RIPARTIZIONE CAPITALE SOCIALE ( Numero x V.N. ):" + "\\b0 \\line \\par\n";

      partial_partial_rtf_text += "\\pard\\keep";

      Header = new Hashtable();
      Colonne = new Hashtable();
      Lunghezze = new Hashtable();
      Tipologia = new Hashtable();

      Header.Add(1, "Soci");
      Colonne.Add(1, "name");
      Lunghezze.Add(1, 150);
      Tipologia.Add(1, TipologiaDato.Stringa);
      Header.Add(2, "Numero");
      Colonne.Add(2, "numero");
      Lunghezze.Add(2, 70);
      Tipologia.Add(2, TipologiaDato.Double);
      Header.Add(3, "V.N.");
      Colonne.Add(3, "valnom");
      Lunghezze.Add(3, 40);
      Tipologia.Add(3, TipologiaDato.Double);
      Header.Add(4, "Ammontare");
      Colonne.Add(4, "totale");
      Lunghezze.Add(4, 70);
      Tipologia.Add(4, TipologiaDato.Double);
      Header.Add(5, "%");
      Colonne.Add(5, "percentuale");
      Lunghezze.Add(5, 60);
      Tipologia.Add(5, TipologiaDato.Percent);
      Header.Add(6, "Tipo");
      Colonne.Add(6, "tiporipartizione");
      Lunghezze.Add(6, 90);
      Tipologia.Add(6, TipologiaDato.TipoRipartizione);

      partial_partial_rtf_text += CreateTable(Header, Lunghezze, "16");


      DataTable datiRipartizione = cBusinessObjects.GetData(int.Parse(nodeTree.Attributes["ID"].Value), typeof(Excel_CapitaleSociale_Ripartizione), idcliente, idsessione, idtree);

      index = 0;
      foreach (DataRow item in datiRipartizione.Rows)
      {

        if (item["totale"].ToString() != "" && item["totale"].ToString() != "0")
        {
          esistealmenounariga = true;
        }

        partial_partial_rtf_text += AddNodoTable(item, index++, Colonne, Tipologia, Lunghezze);

      }

      partial_partial_rtf_text += "\\line\\pard\\bgdkdcross\\cfpat1\\shading59110\\tx2291\\par";

      if (esistealmenounariga)
      {
        partial_rtf_text += partial_partial_rtf_text;
      }

      #endregion

      #region ripartizioneAN

      esistealmenounariga = false;
      partial_partial_rtf_text = "";

      partial_partial_rtf_text += "\\line\\pard\\keepn\\b\\f0 " + "RIPARTIZIONE CAPITALE SOCIALE (Ammontare / Numero ):" + "\\b0 \\line \\par\n";

      partial_partial_rtf_text += "\\pard\\keep";

      Header = new Hashtable();
      Colonne = new Hashtable();
      Lunghezze = new Hashtable();
      Tipologia = new Hashtable();

      Header.Add(1, "Soci");
      Colonne.Add(1, "name");
      Lunghezze.Add(1, 150);
      Tipologia.Add(1, TipologiaDato.Stringa);
      Header.Add(2, "Numero");
      Colonne.Add(2, "numero");
      Lunghezze.Add(2, 70);
      Tipologia.Add(2, TipologiaDato.StringaDx);
      Header.Add(3, "Ammontare");
      Colonne.Add(3, "totale");
      Lunghezze.Add(3, 70);
      Tipologia.Add(3, TipologiaDato.StringaDx);
      Header.Add(4, "V.N.");
      Colonne.Add(4, "valnom");
      Lunghezze.Add(4, 40);
      Tipologia.Add(4, TipologiaDato.StringaDx);
      Header.Add(5, "%");
      Colonne.Add(5, "percentuale");
      Lunghezze.Add(5, 60);
      Tipologia.Add(5, TipologiaDato.Percent);
      Header.Add(6, "Tipo");
      Colonne.Add(6, "tiporipartizione");
      Lunghezze.Add(6, 90);
      Tipologia.Add(6, TipologiaDato.TipoRipartizione);

      partial_partial_rtf_text += CreateTable(Header, Lunghezze);

      DataTable datiRipartizioneAN = cBusinessObjects.GetData(int.Parse(nodeTree.Attributes["ID"].Value), typeof(Excel_CapitaleSociale_RipartizioneAN), idcliente, idsessione, idtree);

      index = 0;
      foreach (DataRow item in datiRipartizioneAN.Rows)
      {

        if (item["totale"].ToString() != "" && item["totale"].ToString() != "0")
        {
          esistealmenounariga = true;
        }

        partial_partial_rtf_text += AddNodoTable(item, index++, Colonne, Tipologia, Lunghezze);

      }

      partial_partial_rtf_text += "\\line\\pard\\bgdkdcross\\cfpat1\\shading59110\\tx2291\\par";

      if (esistealmenounariga)
      {
        partial_rtf_text += partial_partial_rtf_text;
      }

      #endregion

      if (partial_rtf_text == "")
      {
        partial_rtf_text += "\\line\\pard\\keepn\\f0 nessun valore capitale sociale presente \\line \\par";
      }

      return partial_rtf_text;
    }

    private string CreateTable(Hashtable colonne, Hashtable lunghezze, string FontPixel)
    {
      string partial_rtf_text = "";

      partial_rtf_text += inizioriga + "\\fs" + FontPixel + ""; //\n

      int colonnaLen = 0;

      for (int i = 1; i <= lunghezze.Count; i++)
      {
        colonnaLen += (int)(lunghezze[i]) * 20;

        partial_rtf_text += colore2 + bordi + "\\clvertalc\\cellx" + colonnaLen.ToString() + "";
      }

      partial_rtf_text += inizioriga2;

      for (int i = 1; i <= colonne.Count; i++)
      {
        partial_rtf_text += "\\b\\qc " + colonne[i].ToString() + "\\b0\\cell";
      }

      partial_rtf_text += finerigaTP;

      return partial_rtf_text;
    }

    private string CreateTable(Hashtable colonne, Hashtable lunghezze)
    {
      string partial_rtf_text = "";

      partial_rtf_text += iniziorigaTP + "\n";

      int colonnaLen = 0;

      for (int i = 1; i <= lunghezze.Count; i++)
      {
        colonnaLen += (int)(lunghezze[i]) * 20;

        partial_rtf_text += colore2 + bordi + "\\clvertalc\\cellx" + colonnaLen.ToString() + "";
      }

      partial_rtf_text += inizioriga2;

      for (int i = 1; i <= colonne.Count; i++)
      {
        partial_rtf_text += "\\b \\qc " + colonne[i].ToString() + "\\b0\\cell";
      }

      partial_rtf_text += finerigaTP;

      return partial_rtf_text;
    }

    private string CreateTable(Hashtable colonne, Hashtable lunghezze, bool colore, bool fontbold, bool fontridotto)
    {
      string partial_rtf_text = "";

      partial_rtf_text += iniziorigaTP + ((fontridotto) ? " \\fsx16 " : "") + "\n";

      int colonnaLen = 0;

      for (int i = 1; i <= lunghezze.Count; i++)
      {
        colonnaLen += (int)(lunghezze[i]) * 20;

        partial_rtf_text += ((colore == false) ? "" : colore2) + bordi + "\\clvertalc\\cellx" + colonnaLen.ToString();
      }

      partial_rtf_text += inizioriga2;

      for (int i = 1; i <= colonne.Count; i++)
      {
        partial_rtf_text += ((fontbold) ? "\\b" : "") + "\\qc " + colonne[i].ToString() + " " + ((fontbold) ? "\\b0" : "") + "\\cell";
      }

      partial_rtf_text += finerigaTP + ((fontridotto) ? " \\fs24 " : "");

      return partial_rtf_text;
    }


    private string AddNodoTable(DataRow node, int index, Hashtable colonne, Hashtable tipologie, Hashtable lunghezze, string FontPixel)
    {


      string partial_rtf_text = "";

      partial_rtf_text += inizioriga + " \\fs" + FontPixel + " \n";

      int colonnaLen = 0;

      for (int i = 1; i <= lunghezze.Count; i++)
      {
        colonnaLen += (int)(lunghezze[i]) * 20;
        //MM bold non viene gestito nei controlli
        string nodebold = "";
        partial_rtf_text += ((nodebold != "") ? colore2 : ((index % 1 == 0) ? colore3 : colore4)) + bordi + "\\clvertalc\\cellx" + colonnaLen.ToString();
      }

      partial_rtf_text += inizioriga2;

      for (int i = 1; i <= colonne.Count; i++)
      {
        string valore = "";

        if (node[colonne[i].ToString()] != null)
        {
          switch ((TipologiaDato)(tipologie[i]))
          {
            case TipologiaDato.Intero:
              valore = node[colonne[i].ToString()].ToString();
              double intero = 0;

              double.TryParse(valore, out intero);

              valore = Convert.ToInt32(intero).ToString();

              if (valore == "0")
              {
                valore = "";
              }

              partial_rtf_text += "\\qr";
              break;
            case TipologiaDato.Stringa:
              valore = node[colonne[i].ToString()].ToString();
              partial_rtf_text += "\\ql";
              break;
            case TipologiaDato.StringaDx:
              valore = node[colonne[i].ToString()].ToString();
              partial_rtf_text += "\\qr";
              break;
            case TipologiaDato.Double:
              valore = ConvertNumber(node[colonne[i].ToString()].ToString());
              partial_rtf_text += "\\qr";
              break;
            case TipologiaDato.DoubleNoDecimali:
              valore = ConvertNumberNoDecimal(node[colonne[i].ToString()].ToString());
              partial_rtf_text += "\\qr";
              break;
            case TipologiaDato.Percent:
              valore = ConvertPercent(node[colonne[i].ToString()].ToString());
              partial_rtf_text += "\\qr";
              break;
            case TipologiaDato.TipoRipartizione:
              valore = node[colonne[i].ToString()].ToString();
              switch (valore)
              {
                case "Q":
                  valore = "Quote s.r.l.";
                  break;
                case "AO":
                  valore = "Azioni ordinarie";
                  break;
                case "AP":
                  valore = "Azioni privilegiate";
                  break;
                case "Div":
                default:
                  valore = "";
                  break;
              }
              partial_rtf_text += "\\ql";
              break;
            case TipologiaDato.TipoAffidamento:
              valore = node[colonne[i].ToString()].ToString();
              switch (valore)
              {
                case "a":
                  valore = "conto corrente";
                  break;
                case "b":
                  valore = "sbf - riba";
                  break;
                case "c":
                  valore = "anticipo fatture";
                  break;
                case "d":
                  valore = "anticipo export";
                  break;
                case "e":
                  valore = "anticipo import";
                  break;
                case "f":
                  valore = "chirografario";
                  break;
                case "g":
                  valore = "mutui ipotecari o similari";
                  break;
                case "h":
                  valore = "operazioni a termine";
                  break;
                case "i":
                  valore = "finanza derivata";
                  break;
                case "l":
                  valore = "garanzie prestate";
                  break;
                case "m":
                  valore = "altro 1";
                  break;
                case "n":
                  valore = "altro 2";
                  break;
                default:
                  valore = "";
                  break;
              }
              partial_rtf_text += "\\ql";
              break;
            case TipologiaDato.Alto:
              valore = node[colonne[i].ToString()].ToString();
              partial_rtf_text += "\\qc\\f1";
              valore = (valore == (Convert.ToInt32(AltoMedioBasso.Alto)).ToString()) ? checkbox_Cheched : checkbox_UnCheched;
              break;
            case TipologiaDato.Medio:
              valore = node[colonne[i].ToString()].ToString();
              partial_rtf_text += "\\qc\\f1";
              valore = (valore == (Convert.ToInt32(AltoMedioBasso.Medio)).ToString()) ? checkbox_Cheched : checkbox_UnCheched;
              break;
            case TipologiaDato.Basso:
              valore = node[colonne[i].ToString()].ToString();
              partial_rtf_text += "\\qc\\f1";
              valore = (valore == (Convert.ToInt32(AltoMedioBasso.Basso)).ToString()) ? checkbox_Cheched : checkbox_UnCheched;
              break;
            case TipologiaDato.Booleano:
              valore = node[colonne[i].ToString()].ToString();
              partial_rtf_text += "\\qc\\f1";
              valore = (valore == "True") ? checkbox_Cheched : checkbox_UnCheched;
              break;
            default:
              break;
          }
        }
        //MM
        string nodebold = "";
        partial_rtf_text += " " + ((nodebold != "") ? "\\b " : "") + valore + ((nodebold != "") ? "\\b0 " : "") + "\\f0\\cell";
      }

      partial_rtf_text += finerigaTP;

      return partial_rtf_text;
    }

    private string AddNodoTable(DataRow node, int index, Hashtable colonne, Hashtable tipologie, Hashtable lunghezze)
    {

      bool esistealmenounvalorenonvuoto = false;

      string partial_rtf_text = "";

      partial_rtf_text += iniziorigaTP + "\n";

      int colonnaLen = 0;

      for (int i = 1; i <= lunghezze.Count; i++)
      {
        colonnaLen += (int)(lunghezze[i]) * 20;
        string nodebold = "";
        partial_rtf_text += ((nodebold != "") ? colore2 : ((index % 1 == 0) ? colore3 : colore4)) + bordi + "\\clvertalc\\cellx" + colonnaLen.ToString() + "";
      }

      partial_rtf_text += inizioriga2;

      for (int i = 1; i <= colonne.Count; i++)
      {
        string valore = "";

        if (node[colonne[i].ToString()].ToString() != "")
        {
          switch ((TipologiaDato)(tipologie[i]))
          {
            case TipologiaDato.Intero:
              valore = node[colonne[i].ToString()].ToString();
              double intero = 0;

              double.TryParse(valore, out intero);

              valore = Convert.ToInt32(intero).ToString();

              if (valore == "0")
              {
                valore = "";
              }

              partial_rtf_text += "\\qr";
              break;
            case TipologiaDato.InteroCenter:
              valore = node[colonne[i].ToString()].ToString();
              double interoc = 0;

              double.TryParse(valore, out interoc);

              valore = Convert.ToInt32(interoc).ToString();

              if (valore == "0")
              {
                valore = "";
              }

              partial_rtf_text += "\\qc";
              break;

            case TipologiaDato.Stringa:
              valore = node[colonne[i].ToString()].ToString();
              partial_rtf_text += "\\ql";
              break;
            case TipologiaDato.StringaDx:
              valore = node[colonne[i].ToString()].ToString();
              partial_rtf_text += "\\qr";
              break;
            case TipologiaDato.StringaCenter:
              valore = node[colonne[i].ToString()].ToString();
              partial_rtf_text += "\\qc";
              break;
            case TipologiaDato.Double:
              valore = ConvertNumber(node[colonne[i].ToString()].ToString());
              partial_rtf_text += "\\qr";
              break;
            case TipologiaDato.DoubleNoDecimali:
              valore = ConvertNumberNoDecimal(node[colonne[i].ToString()].ToString());
              partial_rtf_text += "\\qr";
              break;
            case TipologiaDato.Percent:
              valore = ConvertPercent(node[colonne[i].ToString()].ToString());
              partial_rtf_text += "\\qr";
              break;
            case TipologiaDato.TipoRipartizione:
              valore = node[colonne[i].ToString()].ToString();
              switch (valore)
              {
                case "Q":
                  valore = "Quote s.r.l.";
                  break;
                case "AO":
                  valore = "Azioni ordinarie";
                  break;
                case "AP":
                  valore = "Azioni privilegiate";
                  break;
                case "Div":
                default:
                  valore = "";
                  break;
              }
              partial_rtf_text += "\\ql";
              break;
            case TipologiaDato.TipoAffidamento:
              valore = node[colonne[i].ToString()].ToString();
              switch (valore)
              {
                case "a":
                  valore = "conto corrente";
                  break;
                case "b":
                  valore = "sbf - riba";
                  break;
                case "c":
                  valore = "anticipo fatture";
                  break;
                case "d":
                  valore = "anticipo export";
                  break;
                case "e":
                  valore = "anticipo import";
                  break;
                case "f":
                  valore = "chirografario";
                  break;
                case "g":
                  valore = "mutui ipotecari o similari";
                  break;
                case "h":
                  valore = "operazioni a termine";
                  break;
                case "i":
                  valore = "finanza derivata";
                  break;
                case "l":
                  valore = "garanzie prestate";
                  break;
                case "m":
                  valore = "altro 1";
                  break;
                case "n":
                  valore = "altro 2";
                  break;
                default:
                  valore = "";
                  break;
              }
              partial_rtf_text += "\\ql";
              break;
            case TipologiaDato.Alto:
              valore = node[colonne[i].ToString()].ToString();
              partial_rtf_text += "\\qc\\f1";
              valore = (valore == (Convert.ToInt32(AltoMedioBasso.Alto)).ToString()) ? checkbox_Cheched : checkbox_UnCheched;
              break;
            case TipologiaDato.Medio:
              valore = node[colonne[i].ToString()].ToString();
              partial_rtf_text += "\\qc\\f1";
              valore = (valore == (Convert.ToInt32(AltoMedioBasso.Medio)).ToString()) ? checkbox_Cheched : checkbox_UnCheched;
              break;
            case TipologiaDato.Basso:
              valore = node[colonne[i].ToString()].ToString();
              partial_rtf_text += "\\qc\\f1";
              valore = (valore == (Convert.ToInt32(AltoMedioBasso.Basso)).ToString()) ? checkbox_Cheched : checkbox_UnCheched;
              break;
            case TipologiaDato.Booleano:
              valore = node[colonne[i].ToString()].ToString();
              partial_rtf_text += "\\qc\\f1";
              valore = (valore == "True") ? checkbox_Cheched : checkbox_UnCheched;
              break;
            default:
              break;
          }
        }

        if (valore != "")
        {
          esistealmenounvalorenonvuoto = true;
        }
        string nodebold = "";
        partial_rtf_text += " " + ((nodebold != "") ? " \\b " : "") + valore + ((nodebold != "") ? " \\b0 " : "") + "\\f0\\cell";
      }

      partial_rtf_text += finerigaTP;

      if (esistealmenounvalorenonvuoto == false)
      {
        return "";
      }
      else
      {
        return partial_rtf_text;
      }
    }

    private string ConvertNumber(string valore)
    {
      double dblValore = 0.0;

      double.TryParse(valore, out dblValore);

      if (dblValore == 0.0)
      {
        return "";
      }
      else
      {
        return String.Format("{0:#,#.00}", dblValore);
      }
    }

    private string ConvertNumberNoDecimal(string valore)
    {
      double dblValore = 0.0;

      double.TryParse(valore, out dblValore);

      if (dblValore == 0.0)
      {
        return "";
      }
      else
      {
        return String.Format("{0:#,#}", dblValore);
      }
    }

    private string ConvertPercent(string valore)
    {
      double dblValore = 0.0;

      double.TryParse(valore, out dblValore);

      if (dblValore == 0.0)
      {
        return "";
      }
      else
      {
        dblValore = dblValore * 100.0;
        return String.Format("{0:#,#.00}", dblValore) + " %";
      }
    }

    private string ConvertPercentNoSymbol(string valore)
    {
      double dblValore = 0.0;

      double.TryParse(valore, out dblValore);

      if (dblValore == 0.0)
      {
        return "";
      }
      else
      {
        dblValore = dblValore * 100.0;
        return String.Format("{0:#,0.00}", dblValore);
      }
    }
    #endregion

     

       #region Pianificazione 6.11
    private string AddPianificazione( string IDPianificazione)
    {
         

      string partial_rtf_text = "";

      partial_rtf_text += "\\pard\\keep";

      Hashtable Header = new Hashtable();
      Hashtable Colonne = new Hashtable();
      Hashtable Lunghezze = new Hashtable();
      Hashtable Tipologia = new Hashtable();

      Header.Add(1, "Carta di Lavoro");
      Lunghezze.Add(1, 200);
      Tipologia.Add(1, TipologiaDato.Stringa);
      Header.Add(2, "NA");
      Lunghezze.Add(2, 40);
      Tipologia.Add(2, TipologiaDato.Booleano);

      Hashtable htpianificazioni = new Hashtable();

      DataTable datiTestata = cBusinessObjects.GetData(int.Parse(IDPianificazione), typeof(PianificazioneVerificheTestata), idcliente, idsessione, idtree);
      DataTable dati = cBusinessObjects.GetData(int.Parse(IDPianificazione), typeof(PianificazioneVerifiche), idcliente, idsessione, idtree);
      
     ArrayList sortingal = new ArrayList();

     foreach (DataRow itemV in datiTestata.Rows)
        {
        if (!htpianificazioni.Contains(itemV["ID"].ToString()))
        {

          htpianificazioni.Add(itemV["ID"].ToString(), itemV["Data"].ToString());
        }
      }

      foreach (DictionaryEntry item in htpianificazioni)
        {
            sortingal.Add(Convert.ToDateTime(item.Value));
        }

      sortingal.Sort();
       
      int indexhere = 3;
      foreach (DateTime date in sortingal)
            {
                foreach (DictionaryEntry itemHT in htpianificazioni)
                {
                    if (date.ToString("dd/MM/yyyy") != itemHT.Value.ToString())
                    {
                        continue;
                    }
                   
                    Header.Add(indexhere, itemHT.Value.ToString());
                    Colonne.Add(indexhere, itemHT.Key.ToString());
                    Lunghezze.Add(indexhere, 40);
                    Tipologia.Add(indexhere, TipologiaDato.Booleano);

                    indexhere++;
                 
                }
            }

      partial_rtf_text += CreateTable(Header, Lunghezze, "12");

      int index = 0;
   
      DataTable datip = cBusinessObjects.GetDataFiltered(dati, "0", "PianificazioneID");     
      foreach (DataRow item in datip.Rows)
      {
      
          partial_rtf_text += AddNodoTablePianificazione(item,dati, index++, Colonne, Tipologia, Lunghezze, item["ID"].ToString());
 
      }

      partial_rtf_text += "\\line\\pard\\bgdkdcross\\cfpat1\\shading59110\\tx2291\\par";

      return partial_rtf_text;
    }

    private string AddNodoTablePianificazione(DataRow node,DataTable dati, int index, Hashtable colonne, Hashtable tipologie, Hashtable lunghezze, string IDValore)
    {
      string partial_rtf_text = "";
           

      partial_rtf_text += iniziorigaTP + "\n";

      int colonnaLen = 0;

      for (int i = 1; i <= lunghezze.Count; i++)
      {
        colonnaLen += (int)(lunghezze[i]) * 20;
     
        partial_rtf_text += ((node["Father"].ToString() != "") ? colore2 : ((index % 1 == 0) ? colore3 : colore4)) + bordisxrx + "\\cellx" + colonnaLen.ToString() + "\\clvertalc";
      }

      partial_rtf_text += inizioriga2;

      bool isNA = false;
      
   
      for (int i = 1; i <= (colonne.Count + 2); i++)
      {
        string valore = "";

        if (i == 1)
        {
          valore = ((node["Father"].ToString() != "") ? "\\b " : "") + node["Codice"].ToString() + " " + node["Titolo"].ToString() + ((node["Father"].ToString() != "") ? "\\b0 " : "");
          partial_rtf_text += "\\ql";
        }
        else
        {
          if (node["Father"].ToString() == "")
          {
            if (i == 2)
            {

              valore = node["Checked"].ToString();
              partial_rtf_text += "\\qc\\f1";
              if (valore == "True")
              {
                isNA = true;
                valore = checkbox_Cheched;
              }
              else
              {
                isNA = false;
                valore = checkbox_UnCheched;
              }
            }
            else
            {
              if (isNA == false)
              {
               
                 foreach (DataRow itemhere in dati.Rows)
                 {
                    if (itemhere["PianificazioneID"].ToString() ==  colonne[i].ToString() && itemhere["ID"].ToString() == node["ID"].ToString())
                    {
                         valore = itemhere["Checked"].ToString();
                    }
                 }
                partial_rtf_text += "\\qc\\f1";
                valore = (valore == "True") ? checkbox_Cheched : checkbox_UnCheched;
              }
              else
              {
                valore = "";
              }
            }
          }
        }

        partial_rtf_text += " " + valore + "\\f0\\cell";
      }

      partial_rtf_text += finerigaTP;

      return partial_rtf_text;
    }
    #endregion

    #region ValutazioneAmbiente
    private string AddValutazioneAmbiente(XmlNode nodeTree, string ID)
    {

      string partial_rtf_text = "";

      partial_rtf_text += "\\pard\\keep";

      Hashtable Header = new Hashtable();
      Hashtable Colonne = new Hashtable();
      Hashtable Lunghezze = new Hashtable();
      Hashtable Tipologia = new Hashtable();

      Header.Add(1, "");
      Colonne.Add(1, "name");
      Lunghezze.Add(1, 260);
      Tipologia.Add(1, TipologiaDato.Stringa);
      Header.Add(2, "Alto");
      Colonne.Add(2, "Alto");
      Lunghezze.Add(2, 80);
      Tipologia.Add(2, TipologiaDato.InteroCenter);
      Header.Add(3, "Medio");
      Colonne.Add(3, "Medio");
      Lunghezze.Add(3, 80);
      Tipologia.Add(3, TipologiaDato.InteroCenter);
      Header.Add(4, "Basso");
      Colonne.Add(4, "Basso");
      Lunghezze.Add(4, 80);
      Tipologia.Add(4, TipologiaDato.InteroCenter);

      partial_rtf_text += CreateTable(Header, Lunghezze, "16");

      DataTable dati = cBusinessObjects.GetData(int.Parse(ID), typeof(ValutazioneAmbiente), idcliente, idsessione, idtree);

      int index = 0;
      foreach (DataRow item in dati.Rows)
      {

        if (item["name"].ToString() == "Totale")
        {
          partial_rtf_text += AddNodoTable(item, index++, Colonne, Tipologia, Lunghezze);
        
        }
  
      }

      foreach (DataRow item in dati.Rows)
      {

        if (item["name"].ToString() == "Totale")
        {
          partial_rtf_text += AddNodoTable(item, index++, Colonne, Tipologia, Lunghezze);
           break;
          
        }
  
      }
      partial_rtf_text += "\\line\\pard\\bgdkdcross\\cfpat1\\shading59110\\tx2291\\par";

      return partial_rtf_text;
    }
    #endregion



    #region Prospetto IVA

    private string cercacampo(string nomecampo, DataTable dd)
    {
      foreach (DataRow dtrow in dd.Rows)
      {
        if (nomecampo == dtrow["nomecampo"].ToString())
        {
          return dtrow["valore"].ToString();
          break;
        }
      }
      return "";
    }

    private string AddProspettoIVA(XmlNode nodeTree, string ID)
    {

      string realpartial_rtf_text = "";

      string partial_rtf_text = "";

      cell1rg = "\\clvertalc\\cellx1600";
      cell2rg = "\\clvertalc\\cellx3260";
      cell3rg = "\\clvertalc\\cellx4920";
      cell4rg = "\\clvertalc\\cellx6580";
      cell5rg = "\\clvertalc\\cellx8240";
      cell6rg = "\\clvertalc\\cellx9900";

      string cell2rgm = "\\clvertalc\\cellx3675";
      string cell3rgm = "\\clvertalc\\cellx5750";
      string cell4rgm = "\\clvertalc\\cellx7825";
      string cell6rgm = "\\clvertalc\\cellx9900";

      //partial_rtf_text += "\\line\\pard\\keepn\\b\\f0 " + "PROSPETTO IVA:" + "\\b0 \\line\\par\n";
      DataTable dati = cBusinessObjects.GetData(int.Parse(ID), typeof(ProspettoIVA), idcliente, idsessione, idtree);


      partial_rtf_text += "\\pard\\keep";

      partial_rtf_text += inizioriga + colore2 + bordi + cell1rg + colore2 + bordi + cell2rgm + colore2 + bordi + cell3rgm + colore2 + bordi + cell4rgm + colore2 + bordi + cell6rgm + inizioriga2; // "\n" + 

      partial_rtf_text += "\\b\\fs16\\qc Mese \\b0\\cell";
      partial_rtf_text += "\\b\\fs16\\qc IVA Credito \\b0\\cell";
      partial_rtf_text += "\\b\\fs16\\qc IVA Debito \\b0\\cell";
      partial_rtf_text += "\\b\\fs16\\qc Totale mensile \\b0\\cell";
      partial_rtf_text += "\\b\\fs16\\qc Totale progressivo \\b0\\cell";

      partial_rtf_text += fineriga;

      bool tabletobeprinted = false;
      bool rowtobeprinted = false;

      string rowpartial_rtf_text = "";

      for (int i = 0; i < 13; i++)
      {
      //  rowtobeprinted = false;
        rowpartial_rtf_text = "";

        rowpartial_rtf_text += inizioriga + "\n" + bordi + cell1rg + bordi + cell2rgm + bordi + cell3rgm + bordi + cell4rgm + bordi + cell6rgm + inizioriga2;

        rowpartial_rtf_text += "\\b\\fs20\\ql ";

        if (ID == "180")
        {
          rowpartial_rtf_text += ((cercacampo("txt" + i.ToString(), dati) != "") ? cercacampo("txt" + i.ToString(), dati) : "");
        }
        else
        {
          switch (i)
          {
            case 0:
              rowpartial_rtf_text += "Saldo apertura";
              break;
            case 1:
              rowpartial_rtf_text += "Gennaio";
              break;
            case 2:
              rowpartial_rtf_text += "Febbraio";
              break;
            case 3:
              rowpartial_rtf_text += "Marzo";
              break;
            case 4:
              rowpartial_rtf_text += "Aprile";
              break;
            case 5:
              rowpartial_rtf_text += "Maggio";
              break;
            case 6:
              rowpartial_rtf_text += "Giugno";
              break;
            case 7:
              rowpartial_rtf_text += "Luglio";
              break;
            case 8:
              rowpartial_rtf_text += "Agosto";
              break;
            case 9:
              rowpartial_rtf_text += "Settembre";
              break;
            case 10:
              rowpartial_rtf_text += "Ottobre";
              break;
            case 11:
              rowpartial_rtf_text += "Novembre";
              break;
            case 12:
              rowpartial_rtf_text += "Dicembre";
              break;
            default:
              break;
          }
        }

        rowpartial_rtf_text += " \\b0\\cell";

        for (int j = 0; j < 4; j++)
        {
          string namehere = "txt" + i.ToString().PadLeft(2, '0') + j.ToString().PadLeft(2, '0');

          if (cercacampo(namehere, dati).ToString() != "")
          {
            if (cercacampo(namehere, dati).Trim() != "" && j != 3)
            {
              tabletobeprinted = true;
              rowtobeprinted = true;
            }

            rowpartial_rtf_text += "\\fs20\\qr " + ConvertNumber(cercacampo(namehere, dati)) + " \\cell";
          }
          else
          {
          rowpartial_rtf_text += "\\fs20\\qr  \\cell";
          }
        }

        rowpartial_rtf_text += fineriga;

        if (rowtobeprinted == true)
        {
          partial_rtf_text += rowpartial_rtf_text;
        }
      }

      partial_rtf_text += " \\pard ";

      if (tabletobeprinted == true)
      {
        realpartial_rtf_text += partial_rtf_text;
      }

      tabletobeprinted = false;
      partial_rtf_text = "";

      partial_rtf_text += " \\line \\par";

      partial_rtf_text += inizioriga + colore2 + bordi + cell1rg + colore2 + bordi + cell2rg + colore2 + bordi + cell3rg + colore2 + bordi + cell4rg + colore2 + bordi + cell5rg + colore2 + bordi + cell6rg + inizioriga2; // + "\n"

      partial_rtf_text += "\\b\\fs16\\qc Mese \\b0\\cell";
      partial_rtf_text += "\\b\\fs16\\qc Versamento \\b0\\cell";
      partial_rtf_text += "\\b\\fs16\\qc Compensazione \\b0\\cell";
      partial_rtf_text += "\\b\\fs16\\qc Tot. Progr \\b0\\cell";
      partial_rtf_text += "\\b\\fs16\\qc Data Scadenza \\b0\\cell";
      partial_rtf_text += "\\b\\fs16\\qc Data Versamento \\b0\\cell";

      partial_rtf_text += fineriga;
 rowtobeprinted = false;
      for (int i = 0; i < 13; i++)
      {
       
        rowpartial_rtf_text = "";

        rowpartial_rtf_text += inizioriga + "\n" + bordi + cell1rg + bordi + cell2rg + bordi + cell3rg + bordi + cell4rg + bordi + cell5rg + bordi + cell6rg + inizioriga2;

        rowpartial_rtf_text += " \\b \\ql ";

        if (ID == "180")
        {
          rowpartial_rtf_text += ((cercacampo("txt" + i.ToString(), dati) != "") ? cercacampo("txt" + i.ToString(), dati) : "");
        }
        else
        {
          switch (i)
          {
            case 0:
              rowpartial_rtf_text += "Saldo apertura";
              break;
            case 1:
              rowpartial_rtf_text += "Gennaio";
              break;
            case 2:
              rowpartial_rtf_text += "Febbraio";
              break;
            case 3:
              rowpartial_rtf_text += "Marzo";
              break;
            case 4:
              rowpartial_rtf_text += "Aprile";
              break;
            case 5:
              rowpartial_rtf_text += "Maggio";
              break;
            case 6:
              rowpartial_rtf_text += "Giugno";
              break;
            case 7:
              rowpartial_rtf_text += "Luglio";
              break;
            case 8:
              rowpartial_rtf_text += "Agosto";
              break;
            case 9:
              rowpartial_rtf_text += "Settembre";
              break;
            case 10:
              rowpartial_rtf_text += "Ottobre";
              break;
            case 11:
              rowpartial_rtf_text += "Novembre";
              break;
            case 12:
              rowpartial_rtf_text += "Dicembre";
              break;
            default:
              break;
          }
        }

        rowpartial_rtf_text += " \\b0 \\cell";

        for (int j = 4; j <= 9; j++)
        {
          if (j == 5)
          {
            continue;
          }

          string namehere = "txt" + i.ToString().PadLeft(2, '0') + j.ToString().PadLeft(2, '0');

          if (cercacampo(namehere, dati) != "")
          {
            if (cercacampo(namehere, dati) != "" && j != 7)
            {
              tabletobeprinted = true;
              rowtobeprinted = true;
            }
            rowpartial_rtf_text += "\\fs20\\qr " + ((j == 8 || j == 9) ? cercacampo(namehere, dati) : ConvertNumber(cercacampo(namehere, dati))) + " \\cell ";
          }
          else
          {
          rowpartial_rtf_text += "\\fs20\\qr  \\cell ";
          }
        }

        rowpartial_rtf_text += fineriga;

        if (rowtobeprinted == true)
        {
          partial_rtf_text += rowpartial_rtf_text;
        }
      }

      partial_rtf_text += " \\pard \\line ";

      if (tabletobeprinted == true)
      {
        realpartial_rtf_text += partial_rtf_text;
      }

      tabletobeprinted = false;
      partial_rtf_text = "";

      partial_rtf_text += " \\line \\par";

      partial_rtf_text += inizioriga + colore2 + bordi + cell1rg + colore2 + bordi + cell6rg + inizioriga2; //+ "\n"

      partial_rtf_text += "\\b \\qc Mese \\b0 \\cell";
      partial_rtf_text += "\\b \\qc Note \\b0 \\cell";

      partial_rtf_text += fineriga;

      for (int i = 0; i < 13; i++)
      {
        rowtobeprinted = false;
        rowpartial_rtf_text = "";

        rowpartial_rtf_text += inizioriga + "\n" + bordi + cell1rg + bordi + cell6rg + inizioriga2;

        rowpartial_rtf_text += " \\b \\ql ";

        if (ID == "180")
        {
          rowpartial_rtf_text += ((cercacampo("txtn" + i.ToString(), dati) != "") ? cercacampo("txtn" + i.ToString(), dati) : "");
        }
        else
        {
          switch (i)
          {
            case 0:
              rowpartial_rtf_text += "Saldo apertura";
              break;
            case 1:
              rowpartial_rtf_text += "Gennaio";
              break;
            case 2:
              rowpartial_rtf_text += "Febbraio";
              break;
            case 3:
              rowpartial_rtf_text += "Marzo";
              break;
            case 4:
              rowpartial_rtf_text += "Aprile";
              break;
            case 5:
              rowpartial_rtf_text += "Maggio";
              break;
            case 6:
              rowpartial_rtf_text += "Giugno";
              break;
            case 7:
              rowpartial_rtf_text += "Luglio";
              break;
            case 8:
              rowpartial_rtf_text += "Agosto";
              break;
            case 9:
              rowpartial_rtf_text += "Settembre";
              break;
            case 10:
              rowpartial_rtf_text += "Ottobre";
              break;
            case 11:
              rowpartial_rtf_text += "Novembre";
              break;
            case 12:
              rowpartial_rtf_text += "Dicembre";
              break;
            default:
              break;
          }
        }

        rowpartial_rtf_text += " \\b0\\cell";

        for (int j = 10; j <= 10; j++)
        {
          string namehere = "txt" + i.ToString().PadLeft(2, '0') + j.ToString().PadLeft(2, '0');

          if (cercacampo(namehere, dati) != null)
          {
            if (cercacampo(namehere, dati).Trim() != "")
            {
              tabletobeprinted = true;
              rowtobeprinted = true;
              }
             rowpartial_rtf_text += " \\ql " + cercacampo(namehere, dati) + " \\cell ";
         }
         else
         {
           rowpartial_rtf_text += " \\ql  \\cell ";
         }
        }

        rowpartial_rtf_text += fineriga;

        if (rowtobeprinted == true)
        {
          partial_rtf_text += rowpartial_rtf_text;
        }
      }

      partial_rtf_text += " \\pard \\line ";

      if (tabletobeprinted == true)
      {
        realpartial_rtf_text += partial_rtf_text;
      }


      return realpartial_rtf_text;
    }
    #endregion

    #region ErroriRilevati

    string cell1rer = "\\clvertalc\\cellx500";
    string cell2rer = "\\clvertalc\\cellx1900";
    string cell2rer_bis = "\\clvertalc\\cellx1300";
    string cell3rer = "\\clvertalc\\cellx3300";
    string cell4rer = "\\clvertalc\\cellx4700";
    string cell5rer = "\\clvertalc\\cellx6100";
    string cell6rer = "\\clvertalc\\cellx7500";
    string cell7rer = "\\clvertalc\\cellx8900";
    string cell8rer = "\\clvertalc\\cellx9800";
    private string AddErroriRilevati(XmlNode nodeTree, string ID)
    {

      string partial_rtf_text = "";

      partial_rtf_text += " \\pard\\keep ";
      DataTable dati = cBusinessObjects.GetData(int.Parse(ID), typeof(Excel_ErroriRilevati), idcliente, idsessione, idtree);
      if (dati.Rows.Count == 1)
      {
        partial_rtf_text += " Nessun errore rilevato. ";
        partial_rtf_text += "\\line\\pard\\bgdkdcross\\cfpat1\\shading59110\\tx2291\\par";
      }
      else
      {
        Hashtable Header = new Hashtable();
        Hashtable Colonne = new Hashtable();
        Hashtable Lunghezze = new Hashtable();
        Hashtable Tipologia = new Hashtable();

        Header.Add(1, "Rif");
        Colonne.Add(1, "rif");
        Lunghezze.Add(1, 20);
        Tipologia.Add(1, TipologiaDato.Stringa);
        Header.Add(2, "Descrizione errore");
        Colonne.Add(2, "name");
        Lunghezze.Add(2, 480);
        Tipologia.Add(2, TipologiaDato.Stringa);

        partial_rtf_text += CreateTable(Header, Lunghezze, "16");
        int index = 0;

        foreach (DataRow item in dati.Rows)
        {

          partial_rtf_text += AddNodoTable(item, index++, Colonne, Tipologia, Lunghezze, "16");
        }

        partial_rtf_text += "\\line\\pard\\bgdkdcross\\cfpat1\\shading59110\\tx2291\\par";

        Header = new Hashtable();
        Colonne = new Hashtable();
        Lunghezze = new Hashtable();
        Tipologia = new Hashtable();

        Header.Add(1, "Rif");
        Colonne.Add(1, "rif");
        Lunghezze.Add(1, 20);
        Tipologia.Add(1, TipologiaDato.Stringa);
        Header.Add(2, "Importo Rettifica");
        Colonne.Add(2, "Importo");
        Lunghezze.Add(2, 72);
        Tipologia.Add(2, TipologiaDato.DoubleNoDecimali);
        Header.Add(3, "Già su PN Es.Prec.");
        Colonne.Add(3, "importoAP");
        Lunghezze.Add(3, 72);
        Tipologia.Add(3, TipologiaDato.DoubleNoDecimali);
        Header.Add(4, "Importo Lordo PN attuale");
        Colonne.Add(4, "suPNattuale");
        Lunghezze.Add(4, 72);
        Tipologia.Add(4, TipologiaDato.DoubleNoDecimali);
        Header.Add(5, "Effetto Fiscale PN attuale");
        Colonne.Add(5, "impattofiscalePN");
        Lunghezze.Add(5, 72);
        Tipologia.Add(5, TipologiaDato.DoubleNoDecimali);
        Header.Add(6, "Importo Lordo CE attuale");
        Colonne.Add(6, "suutileattuale");
        Lunghezze.Add(6, 72);
        Tipologia.Add(6, TipologiaDato.DoubleNoDecimali);
        Header.Add(7, "Effetto Fiscale CE attuale");
        Colonne.Add(7, "impattofiscale");
        Lunghezze.Add(7, 72);
        Tipologia.Add(7, TipologiaDato.DoubleNoDecimali);
        Header.Add(8, "Corretto");
        Colonne.Add(8, "corretto");
        Lunghezze.Add(8, 48);
        Tipologia.Add(8, TipologiaDato.Booleano);

        partial_rtf_text += CreateTable(Header, Lunghezze, "16");

        index = 0;
        foreach (DataRow item in dati.Rows)
        {

          partial_rtf_text += AddNodoTable(item, index++, Colonne, Tipologia, Lunghezze, "16");

        }

        partial_rtf_text += "\\line\\pard\\bgdkdcross\\cfpat1\\shading59110\\tx2291\\par";


        foreach (DataRow item in dati.Rows)
        {
          if (item["rif"].ToString() != "")
          {
            if (item["txtP_IRESPN"].ToString() != "")
            {
              partial_rtf_text += "\\pard\\keepn";
              partial_rtf_text += " Calcolo Effetto Fiscale PN attuale per Rif." + item["rif"].ToString();

              partial_rtf_text += "\\line\\pard\\bgdkdcross\\cfpat1\\shading59110\\tx2291\\par";

              partial_rtf_text += inizioriga + colore3 + bordi + cell2rer + colore3 + bordi + cell5rer + inizioriga2;

              partial_rtf_text += "\\ql \\fs16 Importo lordo PN attuale \\cell";
              partial_rtf_text += "\\qr \\fs16 " + ((item["suPNattuale"].ToString() == "") ? "0" : item["suPNattuale"].ToString()) + " \\cell";

              partial_rtf_text += fineriga;

              partial_rtf_text += inizioriga + colore3 + bordi + cell2rer + colore3 + bordi + cell3rer + colore3 + bordi + cell5rer + inizioriga2;

              partial_rtf_text += "\\ql \\fs16 IRES \\cell";
              //partial_rtf_text += "\\qr \\fs16 " + ((item["txtP_IRESPN"] == "") ? "27,50%" : item["txtP_IRESPN"].ToString()) + " \\cell";
              //Iuri portata da 27,5 a 24
              partial_rtf_text += "\\qr \\fs16 " + ((item["txtP_IRESPN"].ToString() == "") ? "27,50%" : item["txtP_IRESPN"].ToString()) + " \\cell";
              partial_rtf_text += "\\qr \\fs16 " + ((item["txtV_IRESPN"].ToString() == "") ? "0" : item["txtV_IRESPN"].ToString()) + " \\cell";

              partial_rtf_text += fineriga;

              partial_rtf_text += inizioriga + colore3 + bordi + cell2rer + colore3 + bordi + cell3rer + colore3 + bordi + cell5rer + inizioriga2;

              partial_rtf_text += "\\ql \\fs16 IRAP \\cell";
              partial_rtf_text += "\\qr \\fs16 " + ((item["txtP_IRAPPN"].ToString() == "") ? "3,90%" : item["txtP_IRAPPN"].ToString()) + " \\cell";
              partial_rtf_text += "\\qr \\fs16 " + ((item["txtV_IRAPPN"].ToString() == "") ? "0" : item["txtV_IRAPPN"].ToString()) + " \\cell";

              partial_rtf_text += fineriga;

              if (((item["txtV_1PN"].ToString() == "") ? "" : item["txtV_1PN"].ToString()) != "")
              {
                partial_rtf_text += inizioriga + colore3 + bordi + cell2rer + colore3 + bordi + cell3rer + colore3 + bordi + cell5rer + inizioriga2;

                partial_rtf_text += "\\ql \\fs16 " + ((item["txt1PN"].ToString() == "") ? "" : item["txt1PN"].ToString()) + " \\cell";
                partial_rtf_text += "\\qr \\fs16 " + ((item["txtP_1PN"].ToString() == "") ? "0,00%" : item["txtP_1PN"].ToString()) + " \\cell";
                partial_rtf_text += "\\qr \\fs16 " + ((item["txtV_1PN"].ToString() == "") ? "0" : item["txtV_1PN"].ToString()) + " \\cell";

                partial_rtf_text += fineriga;
              }

              if (((item["txtV_2PN"].ToString() == "") ? "" : item["txtV_2PN"].ToString()) != "")
              {
                partial_rtf_text += inizioriga + colore3 + bordi + cell2rer + colore3 + bordi + cell3rer + colore3 + bordi + cell5rer + inizioriga2;

                partial_rtf_text += "\\ql \\fs16 " + ((item["txt2PN"].ToString() == "") ? "" : item["txt2PN"].ToString()) + " \\cell";
                partial_rtf_text += "\\qr \\fs16 " + ((item["txtP_2PN"].ToString() == "") ? "0,00%" : item["txtP_2PN"].ToString()) + " \\cell";
                partial_rtf_text += "\\qr \\fs16 " + ((item["txtV_2PN"].ToString() == "") ? "0" : item["txtV_2PN"].ToString()) + " \\cell";

                partial_rtf_text += fineriga;
              }

              if (((item["txtV_3PN"].ToString() == "") ? "" : item["txtV_3PN"].ToString()) != "")
              {
                partial_rtf_text += inizioriga + colore3 + bordi + cell2rer + colore3 + bordi + cell3rer + colore3 + bordi + cell5rer + inizioriga2;

                partial_rtf_text += "\\ql \\fs16 " + ((item["txt3PN"].ToString() == "") ? "" : item["txt3PN"].ToString()) + " \\cell";
                partial_rtf_text += "\\qr \\fs16 " + ((item["txtP_3PN"].ToString() == "") ? "0,00%" : item["txtP_3PN"].ToString()) + " \\cell";
                partial_rtf_text += "\\qr \\fs16 " + ((item["txtV_3PN"].ToString() == "") ? "0" : item["txtV_3PN"].ToString()) + " \\cell";

                partial_rtf_text += fineriga;
              }

              if (((item["txtV_4PN"].ToString() == "") ? "" : item["txtV_4PN"].ToString()) != "")
              {
                partial_rtf_text += inizioriga + colore3 + bordi + cell2rer + colore3 + bordi + cell3rer + colore3 + bordi + cell5rer + inizioriga2;

                partial_rtf_text += "\\ql \\fs16 " + ((item["txt4PN"].ToString() == "") ? "" : item["txt4PN"].ToString()) + " \\cell";
                partial_rtf_text += "\\qr \\fs16 \\cell";
                partial_rtf_text += "\\qr \\fs16 " + ((item["txtV_4PN"].ToString() == "") ? "0" : item["txtV_4PN"].ToString()) + " \\cell";

                partial_rtf_text += fineriga;
              }

              if (((item["txtV_5PN"].ToString() == "") ? "" : item["txtV_5PN"].ToString()) != "")
              {
                partial_rtf_text += inizioriga + colore3 + bordi + cell2rer + colore3 + bordi + cell3rer + colore3 + bordi + cell5rer + inizioriga2;

                partial_rtf_text += "\\ql \\fs16 " + ((item["txt5PN"].ToString() == "") ? "" : item["txt5PN"].ToString()) + " \\cell";
                partial_rtf_text += "\\qr \\fs16 \\cell";
                partial_rtf_text += "\\qr \\fs16 " + ((item["txtV_5PN"].ToString() == "") ? "0" : item["txtV_5PN"].ToString()) + " \\cell";

                partial_rtf_text += fineriga;
              }


              partial_rtf_text += inizioriga + colore3 + bordi + cell2rer + colore3 + bordi + cell5rer + inizioriga2;

              partial_rtf_text += "\\ql \\fs16 Totale \\cell";
              partial_rtf_text += "\\qr \\fs16 " + ((item["impattofiscalePN"].ToString() == "") ? "0" : item["impattofiscalePN"].ToString()) + " \\cell";

              partial_rtf_text += fineriga;


              partial_rtf_text += "\\line\\pard\\bgdkdcross\\cfpat1\\shading59110\\tx2291\\par";
            }

            if (item["txtP_IRES"].ToString() != "")
            {
              partial_rtf_text += "\\pard\\keepn";
              partial_rtf_text += " Calcolo Effetto Fiscale CE attuale per Rif." + item["rif"].ToString();

              partial_rtf_text += "\\line\\pard\\bgdkdcross\\cfpat1\\shading59110\\tx2291\\par";

              partial_rtf_text += inizioriga + colore3 + bordi + cell2rer + colore3 + bordi + cell5rer + inizioriga2;

              partial_rtf_text += "\\ql \\fs16 Importo lordo CE attuale \\cell";
              partial_rtf_text += "\\qr \\fs16 " + ((item["suutileattuale"].ToString() == "") ? "0" : item["suutileattuale"].ToString()) + " \\cell";

              partial_rtf_text += fineriga;

              partial_rtf_text += inizioriga + colore3 + bordi + cell2rer + colore3 + bordi + cell3rer + colore3 + bordi + cell5rer + inizioriga2;

              partial_rtf_text += "\\ql \\fs16 IRES \\cell";
              //Iuri portata da 27,5 a 24
              //partial_rtf_text += "\\qr \\fs16 " + ((item["txtP_IRES"] == "") ? "27,50%" : item["txtP_IRES"].ToString()) + " \\cell";
              partial_rtf_text += "\\qr \\fs16 " + ((item["txtP_IRES"].ToString() == "") ? "24,00%" : item["txtP_IRES"].ToString()) + " \\cell";
              partial_rtf_text += "\\qr \\fs16 " + ((item["txtV_IRES"].ToString() == "") ? "0" : item["txtV_IRES"].ToString()) + " \\cell";

              partial_rtf_text += fineriga;

              partial_rtf_text += inizioriga + colore3 + bordi + cell2rer + colore3 + bordi + cell3rer + colore3 + bordi + cell5rer + inizioriga2;

              partial_rtf_text += "\\ql \\fs16 IRAP \\cell";
              partial_rtf_text += "\\qr \\fs16 " + ((item["txtP_IRAP"].ToString() == "") ? "3,90%" : item["txtP_IRAP"].ToString()) + " \\cell";
              partial_rtf_text += "\\qr \\fs16 " + ((item["txtV_IRAP"].ToString() == "") ? "0" : item["txtV_IRAP"].ToString()) + " \\cell";

              partial_rtf_text += fineriga;

              if (((item["txtV_1"].ToString() == "") ? "" : item["txtV_1"].ToString()) != "")
              {
                partial_rtf_text += inizioriga + colore3 + bordi + cell2rer + colore3 + bordi + cell3rer + colore3 + bordi + cell5rer + inizioriga2;

                partial_rtf_text += "\\ql \\fs16 " + ((item["txt1"].ToString() == "") ? "" : item["txt1"].ToString()) + " \\cell";
                partial_rtf_text += "\\qr \\fs16 " + ((item["txtP_1"].ToString() == "") ? "0,00%" : item["txtP_1"].ToString()) + " \\cell";
                partial_rtf_text += "\\qr \\fs16 " + ((item["txtV_1"].ToString() == "") ? "0" : item["txtV_1"].ToString()) + " \\cell";

                partial_rtf_text += fineriga;
              }

              if (((item["txtV_2"].ToString() == "") ? "" : item["txtV_2"].ToString()) != "")
              {
                partial_rtf_text += inizioriga + colore3 + bordi + cell2rer + colore3 + bordi + cell3rer + colore3 + bordi + cell5rer + inizioriga2;

                partial_rtf_text += "\\ql \\fs16 " + ((item["txt2"] == "") ? "" : item["txt2"].ToString()) + " \\cell";
                partial_rtf_text += "\\qr \\fs16 " + ((item["txtP_2"] == "") ? "0,00%" : item["txtP_2"].ToString()) + " \\cell";
                partial_rtf_text += "\\qr \\fs16 " + ((item["txtV_2"] == "") ? "0" : item["txtV_2"].ToString()) + " \\cell";

                partial_rtf_text += fineriga;
              }

              if (((item["txtV_3"].ToString() == "") ? "" : item["txtV_3"].ToString()) != "")
              {
                partial_rtf_text += inizioriga + colore3 + bordi + cell2rer + colore3 + bordi + cell3rer + colore3 + bordi + cell5rer + inizioriga2;

                partial_rtf_text += "\\ql \\fs16 " + ((item["txt3"].ToString() == "") ? "" : item["txt3"].ToString()) + " \\cell";
                partial_rtf_text += "\\qr \\fs16 " + ((item["txtP_3"].ToString() == "") ? "0,00%" : item["txtP_3"].ToString()) + " \\cell";
                partial_rtf_text += "\\qr \\fs16 " + ((item["txtV_3"].ToString() == "") ? "0" : item["txtV_3"].ToString()) + " \\cell";

                partial_rtf_text += fineriga;
              }

              if (((item["txtV_4"].ToString() == "") ? "" : item["txtV_4"].ToString()) != "")
              {
                partial_rtf_text += inizioriga + colore3 + bordi + cell2rer + colore3 + bordi + cell3rer + colore3 + bordi + cell5rer + inizioriga2;

                partial_rtf_text += "\\ql \\fs16 " + ((item["txt4"].ToString() == "") ? "" : item["txt4"].ToString()) + " \\cell";
                partial_rtf_text += "\\qr \\fs16 \\cell";
                partial_rtf_text += "\\qr \\fs16 " + ((item["txtV_4"].ToString() == "") ? "0" : item["txtV_4"].ToString()) + " \\cell";

                partial_rtf_text += fineriga;
              }

              if (((item["txtV_5"].ToString() == "") ? "" : item["txtV_5"].ToString()) != "")
              {
                partial_rtf_text += inizioriga + colore3 + bordi + cell2rer + colore3 + bordi + cell3rer + colore3 + bordi + cell5rer + inizioriga2;

                partial_rtf_text += "\\ql \\fs16 " + ((item["txt5"].ToString() == "") ? "" : item["txt5"].ToString()) + " \\cell";
                partial_rtf_text += "\\qr \\fs16 \\cell";
                partial_rtf_text += "\\qr \\fs16 " + ((item["txtV_5"].ToString() == "") ? "0" : item["txtV_5"].ToString()) + " \\cell";

                partial_rtf_text += fineriga;
              }

              partial_rtf_text += inizioriga + colore3 + bordi + cell2rer + colore3 + bordi + cell5rer + inizioriga2;

              partial_rtf_text += "\\ql \\fs16 Totale \\cell";
              partial_rtf_text += "\\qr \\fs16 " + ((item["impattofiscale"].ToString() == "") ? "0" : item["impattofiscale"].ToString()) + " \\cell";

              partial_rtf_text += fineriga;

              partial_rtf_text += "\\line\\pard\\bgdkdcross\\cfpat1\\shading59110\\tx2291\\par";
            }
          }
        }
      }

      partial_rtf_text += "\\line\\pard\\keepn\\b\\f0 Errori Non Numerari:\\b0 \\line \\par\n";

      partial_rtf_text += "\\pard\\keepn";
        DataTable datiNN = cBusinessObjects.GetData(int.Parse(ID), typeof(Excel_ErroriRilevatiNN), idcliente, idsessione, idtree);
      bool hasrow = false;
      foreach (DataRow item in datiNN.Rows)
      {
                if (item["name"].ToString() != "Totale" &&  item["name"].ToString() != "")
                    hasrow = true;
      }
      if (!hasrow)
      {
        partial_rtf_text += " Nessun errore non numerario rilevato. ";
        partial_rtf_text += "\\line\\pard\\bgdkdcross\\cfpat1\\shading59110\\tx2291\\par";
      }
      else
      {
        Hashtable Header2 = new Hashtable();
        Hashtable Colonne2 = new Hashtable();
        Hashtable Lunghezze2 = new Hashtable();
        Hashtable Tipologia2 = new Hashtable();

        Header2.Add(1, "Rif");
        Colonne2.Add(1, "numero");
        Lunghezze2.Add(1, 20);
        Tipologia2.Add(1, TipologiaDato.Stringa);
        Header2.Add(2, "Descrizione");
        Colonne2.Add(2, "name");
        Lunghezze2.Add(2, 430);
        Tipologia2.Add(2, TipologiaDato.Stringa);
        Header2.Add(3, "Corretto");
        Colonne2.Add(3, "corretto");
        Lunghezze2.Add(3, 50);
        Tipologia2.Add(3, TipologiaDato.Booleano);

        partial_rtf_text += CreateTable(Header2, Lunghezze2, "16");

        int index2 = 0;
        foreach (DataRow item in datiNN.Rows)
        {
          partial_rtf_text += AddNodoTable(item, index2++, Colonne2, Tipologia2, Lunghezze2, "16");
        }

        partial_rtf_text += "\\line\\pard\\bgdkdcross\\cfpat1\\shading59110\\tx2291\\par";
      }

      partial_rtf_text += "\\line\\pard\\keepn\\b\\f0 Riclassifiche:\\b0 \\line \\par\n";// Errori Monetari - 

      partial_rtf_text += "\\pard\\keepn";

        DataTable datiMR = cBusinessObjects.GetData(int.Parse(ID), typeof(Excel_ErroriRilevatiMR), idcliente, idsessione, idtree);
      hasrow = false;
      foreach (DataRow item in datiMR.Rows)
      {
                if (item["name"].ToString() != "Totale" &&  item["name"].ToString() != "")
                    hasrow = true;
      }
      if (!hasrow)
      {
        partial_rtf_text += " Nessun errore riclassifica rilevato. ";
        partial_rtf_text += "\\line\\pard\\bgdkdcross\\cfpat1\\shading59110\\tx2291\\par";
      }
      else
      {
        Hashtable Header2 = new Hashtable();
        Hashtable Colonne2 = new Hashtable();
        Hashtable Lunghezze2 = new Hashtable();
        Hashtable Tipologia2 = new Hashtable();

        Header2.Add(1, "Rif");
        Colonne2.Add(1, "rif");
        Lunghezze2.Add(1, 20);
        Tipologia2.Add(1, TipologiaDato.Stringa);
        Header2.Add(2, "Descrizione");
        Colonne2.Add(2, "name");
        Lunghezze2.Add(2, 160);
        Tipologia2.Add(2, TipologiaDato.Stringa);
        Header2.Add(3, "Conto Imputato");
        Colonne2.Add(3, "contoimputato");
        Lunghezze2.Add(3, 90);
        Tipologia2.Add(3, TipologiaDato.Stringa);
        Header2.Add(4, "Conto Proposto");
        Colonne2.Add(4, "contoproposto");
        Lunghezze2.Add(4, 90);
        Tipologia2.Add(4, TipologiaDato.Stringa);
        Header2.Add(5, "Importo");
        Colonne2.Add(5, "importo");
        Lunghezze2.Add(5, 90);
        Tipologia2.Add(5, TipologiaDato.Double);
        Header2.Add(6, "Corretto");
        Colonne2.Add(6, "corretto");
        Lunghezze2.Add(6, 50);
        Tipologia2.Add(6, TipologiaDato.Booleano);

        partial_rtf_text += CreateTable(Header2, Lunghezze2, "16");
        int index2 = 0;
        foreach (DataRow item in datiMR.Rows)
        {

          partial_rtf_text += AddNodoTable(item, index2++, Colonne2, Tipologia2, Lunghezze2, "16");

        }

        partial_rtf_text += "\\line\\pard\\bgdkdcross\\cfpat1\\shading59110\\tx2291\\par";
      }

      return partial_rtf_text;
    }
    #endregion


    #region Riepilogo Errori Rilevati
    private string AddRiepilogoErroriRilevati(XmlNode nodeTree, string ID)
    {

      string partial_rtf_text = "";
      DataRow nodenodo = null;

      DataTable datiErrori = cBusinessObjects.GetData(int.Parse(ID), typeof(Excel_ErroriRilevati_riepilogo), idcliente, idsessione, idtree);
    
      if(datiErrori.Rows.Count==0)
      {
          datiErrori.Rows.Add();
          foreach (DataRow row in datiErrori.Rows)
              {
                foreach (DataColumn col in datiErrori.Columns)
                {
                  if (row.IsNull(col) && col.DataType == typeof(string))
                    row.SetField(col, String.Empty);
                }
                row["rowTOT"] = 0;
              }

      }
      bool nodata = true;
      foreach (DataRow dd in datiErrori.Rows)
      {
        nodenodo = dd;
        nodata = false;
      }
      //Descrizioni degli errori
      partial_rtf_text += " \\pard\\keep";

      partial_rtf_text += inizioriga + colore2 + bordi + cell1rer + colore2 + bordi + cell2rer_bis + colore2 + bordi + cell8rer + inizioriga2;

      partial_rtf_text += "\\qc \\fs16 Rif. \\cell";
      partial_rtf_text += "\\qc \\fs16 Carta di Lavoro \\cell";
      partial_rtf_text += "\\qc \\fs16 Descrizione dell'errore \\cell";

      partial_rtf_text += fineriga;

      if (!nodata)
      {
        for (int i = 4; i <= Convert.ToInt32(nodenodo["rowTOT"].ToString()) + 1; i++)
        {
          DataRow nodenodo2 = null;
          foreach (DataRow dd in datiErrori.Rows)
          {
            if (dd["row"].ToString() == i.ToString())
              nodenodo2 = dd;
          }
          if (nodenodo2 == null)
            continue;
          partial_rtf_text += inizioriga + ((i % 1 == 0) ? colore3 : colore4) + bordi + cell1rer + ((i % 1 == 0) ? colore3 : colore4) + bordi + cell2rer_bis + ((i % 1 == 0) ? colore3 : colore4) + bordi + cell8rer + inizioriga2;

          partial_rtf_text += " \\qr \\fs16 " + (i - 3).ToString() + " \\cell ";
          partial_rtf_text += " \\qr \\fs16 " + ((nodenodo2["txtCodice"].ToString() == null) ? "" : nodenodo2["txtCodice"].ToString()) + " \\cell ";
          partial_rtf_text += " \\ql \\fs16 " + ((nodenodo2["txtName"].ToString() == null) ? "" : nodenodo2["txtName"].ToString()) + " \\cell";
          partial_rtf_text += fineriga;
        }
      }


      partial_rtf_text += iniziorigaTP + colore3 + cell8rer + inizioriga2;

      partial_rtf_text += " \\cell";

      partial_rtf_text += fineriga;


      //Errori
      partial_rtf_text += inizioriga + colore3 + cell1rer + colore3 + cell2rer + colore3 + cell3rer + colore2 + bordi + cell5rer + colore2 + bordi + cell7rer + colore3 + cell8rer + inizioriga2;

      partial_rtf_text += "\\qc \\fs18 \\cell";
      partial_rtf_text += "\\qc \\fs15 \\cell";
      partial_rtf_text += "\\qc \\fs15 \\cell";
      partial_rtf_text += "\\qc \\fs15 sul P.N. esercizio attuale \\cell";
      partial_rtf_text += "\\qc \\fs15 su C.E. esercizio attuale \\cell";
      partial_rtf_text += "\\qc \\fs15 \\cell";

      partial_rtf_text += fineriga;

      partial_rtf_text += inizioriga + colore2 + bordi + cell1rer + colore2 + bordi + cell2rer + colore2 + bordi + cell3rer + colore2 + bordi + cell4rer + colore2 + bordi + cell5rer + colore2 + bordi + cell6rer + colore2 + bordi + cell7rer + colore2 + bordi + cell8rer + inizioriga2;

      partial_rtf_text += "\\qc \\fs18 Rif. \\cell";
      partial_rtf_text += "\\qc \\fs15 Rettifica \\cell";
      partial_rtf_text += "\\qc \\fs15 Già sul P.N. esercizio preced. \\cell";
      partial_rtf_text += "\\qc \\fs15 IMPORTO LORDO \\cell";
      partial_rtf_text += "\\qc \\fs15 EFFETTO FISCALE \\cell";
      partial_rtf_text += "\\qc \\fs15 IMPORTO LORDO \\cell";
      partial_rtf_text += "\\qc \\fs15 EFFETTO FISCALE \\cell";
      partial_rtf_text += "\\qc \\fs15 errore irrilevante o corretto \\cell";

      partial_rtf_text += fineriga;

      if (!nodata)
      {
        for (int i = 4; i <= Convert.ToInt32(nodenodo["rowTOT"].ToString()) + 1; i++)
        {
          DataRow nodenodo2 = null;
          foreach (DataRow dd in datiErrori.Rows)
          {
            if (dd["row"].ToString() == i.ToString())
              nodenodo2 = dd;
          }
          if (nodenodo2 == null)
            continue;
          partial_rtf_text += inizioriga + ((i % 1 == 0) ? colore3 : colore4) + bordi + cell1rer + ((i % 1 == 0) ? colore3 : colore4) + bordi + cell2rer + ((i % 1 == 0) ? colore3 : colore4) + bordi + cell3rer + ((i % 1 == 0) ? colore3 : colore4) + bordi + cell4rer + ((i % 1 == 0) ? colore3 : colore4) + bordi + cell5rer + ((i % 1 == 0) ? colore3 : colore4) + bordi + cell6rer + ((i % 1 == 0) ? colore3 : colore4) + bordi + cell7rer + ((i % 1 == 0) ? colore3 : colore4) + bordi + cell8rer + inizioriga2;

          partial_rtf_text += " \\qr \\fs16 " + (i - 3).ToString() + " \\cell ";
          partial_rtf_text += " \\qr \\fs16 " + ((nodenodo2["txtEA"].ToString() == "") ? "" : ConvertNumberNoDecimal(nodenodo2["txtEA"].ToString())) + " \\cell ";
          partial_rtf_text += " \\qr \\fs16 " + ((nodenodo2["txtAP"].ToString() == "") ? "" : ConvertNumberNoDecimal(nodenodo2["txtAP"].ToString())) + " \\cell ";
          partial_rtf_text += " \\qr \\fs16 " + ((nodenodo2["txtPN"].ToString() == "") ? "" : ConvertNumberNoDecimal(nodenodo2["txtPN"].ToString())) + " \\cell ";
          partial_rtf_text += " \\qr \\fs16 " + ((nodenodo2["txtIMPOSTEPN"].ToString() == "") ? "" : ConvertNumberNoDecimal(nodenodo2["txtIMPOSTEPN"].ToString())) + " \\cell ";
          partial_rtf_text += " \\qr \\fs16 " + ((nodenodo2["txtDIFF"].ToString() == "") ? "" : ConvertNumberNoDecimal(nodenodo2["txtDIFF"].ToString())) + " \\cell ";
          partial_rtf_text += " \\qr \\fs16 " + ((nodenodo2["txtIMPOSTE"].ToString() == "") ? "" : ConvertNumberNoDecimal(nodenodo2["txtIMPOSTE"].ToString())) + " \\cell ";
          partial_rtf_text += " \\qc \\f1 " + ((nodenodo2["chkIrrilevante"].ToString() == "") ? "" : ((nodenodo2["chkIrrilevante"].ToString() == "True") ? checkbox_Cheched : checkbox_UnCheched)) + " \\f0 \\cell ";

          partial_rtf_text += fineriga;
        }
      }

      partial_rtf_text += inizioriga + colore3 + cell1rer + colore3 + bordi + cell2rer + colore3 + bordi + cell3rer + colore3 + bordi + cell4rer + colore3 + bordi + cell5rer + colore3 + bordi + cell6rer + colore3 + bordi + cell7rer + inizioriga2;

      partial_rtf_text += " \\b TOT\\cell";
      partial_rtf_text += " \\qr \\fs16 " + ((nodenodo["txtTotEA"].ToString() == "") ? "" : ConvertNumberNoDecimal(nodenodo["txtTotEA"].ToString())) + " \\cell";
      partial_rtf_text += " \\qr \\fs16 " + ((nodenodo["txtTotAP"].ToString() == "") ? "" : ConvertNumberNoDecimal(nodenodo["txtTotAP"].ToString())) + " \\cell";
      partial_rtf_text += " \\qr \\fs16 " + ((nodenodo["txtTotPN"].ToString() == "") ? "" : ConvertNumberNoDecimal(nodenodo["txtTotPN"].ToString())) + " \\cell";
      partial_rtf_text += " \\qr \\fs16 " + ((nodenodo["txtTotIMPOSTEPN"].ToString() == "") ? "" : ConvertNumberNoDecimal(nodenodo["txtTotIMPOSTEPN"].ToString())) + " \\cell";
      partial_rtf_text += " \\qr \\fs16 " + ((nodenodo["txtTotDIFF"].ToString() == "") ? "" : ConvertNumberNoDecimal(nodenodo["txtTotDIFF"].ToString())) + " \\cell";
      partial_rtf_text += " \\qr \\fs16 " + ((nodenodo["txtTotIMPOSTE"].ToString() == "") ? "" : ConvertNumberNoDecimal(nodenodo["txtTotIMPOSTE"].ToString())) + " \\cell";

      partial_rtf_text += fineriga;

      partial_rtf_text += inizioriga + colore3 + cell3rer + colore3 + bordi + cell5rer + colore3 + bordi + cell7rer + inizioriga2;

      partial_rtf_text += " \\cell";
      partial_rtf_text += " \\qc \\fs16 " + ((nodenodo["txtTotTotPN"].ToString() == "") ? "" : ConvertNumberNoDecimal(nodenodo["txtTotTotPN"].ToString())) + " \\cell";
      partial_rtf_text += " \\qc \\fs16 " + ((nodenodo["txtTotTotCE"].ToString() == "") ? "" : ConvertNumberNoDecimal(nodenodo["txtTotTotCE"].ToString())) + " \\b0 \\cell";

      partial_rtf_text += fineriga;

      partial_rtf_text += iniziorigaTP + colore3 + cell1rer + colore3 + cell2rer + colore3 + cell3rer + colore3 + cell4rer + colore3 + cell5rer + colore3 + cell6rer + colore3 + cell7rer + inizioriga2;

      partial_rtf_text += " \\cell";
      partial_rtf_text += " \\cell";
      partial_rtf_text += " \\cell";
      partial_rtf_text += " \\cell";
      partial_rtf_text += " \\cell";
      partial_rtf_text += " \\cell";
      partial_rtf_text += " \\cell";

      partial_rtf_text += fineriga;

      partial_rtf_text += iniziorigaTP + colore3 + cell4rer + colore3 + bordi + cell5rer + colore3 + bordi + cell6rer + colore3 + cell7rer + inizioriga2;

      partial_rtf_text += " \\qc \\fs16 LIMITE DI MATERIALITA' / SIGNIFICATIVITA' di bilancio \\cell";
      partial_rtf_text += " \\qr \\b \\fs16 " + ((nodenodo["txtTotMaterialitaSP"].ToString() == "") ? "" : ConvertNumberNoDecimal(nodenodo["txtTotMaterialitaSP"].ToString())) + " \\fs18 \\b0 \\cell";
      partial_rtf_text += " \\qr \\b \\fs16 " + ((nodenodo["txtTotMaterialitaCE"].ToString() == "") ? "" : ConvertNumberNoDecimal(nodenodo["txtTotMaterialitaCE"].ToString())) + " \\fs18 \\b0 \\cell";
      partial_rtf_text += " \\cell";

      partial_rtf_text += fineriga;

      partial_rtf_text += iniziorigaTP + colore3 + cell1rer + colore3 + cell4rer + colore3 + cell5rer + colore3 + cell6rer + colore3 + cell7rer + inizioriga2;

      partial_rtf_text += " \\cell";
      partial_rtf_text += " \\cell";
      partial_rtf_text += " \\cell";
      partial_rtf_text += " \\cell";
      partial_rtf_text += " \\cell";

      partial_rtf_text += fineriga;

      partial_rtf_text += inizioriga + colore3 + cell4rer + colore3 + bordi + cell5rer + colore3 + bordi + cell6rer + colore3 + cell7rer + inizioriga2;

      partial_rtf_text += " \\qc \\fs16 ECCEDENZA RISPETTO ALLA MATERIALITA \\cell";
      partial_rtf_text += " \\qr \\fs16  " + ((nodenodo["txtTotEccedenzaSP"].ToString() == "") ? "" : nodenodo["txtTotEccedenzaSP"].ToString()) + " \\fs18 \\cell";
      partial_rtf_text += " \\qr \\fs16  " + ((nodenodo["txtTotEccedenzaCE"].ToString() == "") ? "" : nodenodo["txtTotEccedenzaCE"].ToString()) + " \\fs18 \\cell";
      partial_rtf_text += " \\cell";

      partial_rtf_text += fineriga;

      partial_rtf_text += " \\pard \\page ";

      partial_rtf_text += "Confronto con ERRORE TRASCURABILE";

      partial_rtf_text += "{\\pard \\brdrb \\brdrs\\brdrw10\\brsp10 {\\fs4\\~}\\par \\pard}";

      partial_rtf_text += " \\par ";

      partial_rtf_text += inizioriga + colore2 + bordi + cell1rer + colore2 + bordi + cell2rer + colore2 + bordi + cell3rer + colore2 + bordi + cell4rer + colore2 + bordi + cell5rer + colore2 + bordi + cell6rer + colore2 + bordi + cell7rer + colore2 + bordi + cell8rer + inizioriga2;

      partial_rtf_text += "\\qc \\fs15 Rif. \\cell";
      partial_rtf_text += "\\qc \\fs15 Rettifica \\cell";
      partial_rtf_text += "\\qc \\fs15 Già sul P.N. esercizio preced. \\cell";
      partial_rtf_text += "\\qc \\fs15 NETTO su P.N. \\cell";
      partial_rtf_text += "\\qc \\fs15 ECCEDENZA \\cell";
      partial_rtf_text += "\\qc \\fs15 NETTO su C.E. \\cell";
      partial_rtf_text += "\\qc \\fs15 ECCEDENZA \\cell";
      partial_rtf_text += "\\qc \\fs15 errore irrilevante o corretto \\cell";

      partial_rtf_text += fineriga;

      if (!nodata)
      {
        for (int i = 4; i <= Convert.ToInt32(nodenodo["rowTOT"].ToString()) + 1; i++)
        {

          DataRow nodenodo2 = null;
          foreach (DataRow dd in datiErrori.Rows)
          {
            if (dd["row"].ToString() == i.ToString())
              nodenodo2 = dd;
          }
          if (nodenodo2 == null)
            continue;
          partial_rtf_text += inizioriga + ((i % 1 == 0) ? colore3 : colore4) + bordi + cell1rer + ((i % 1 == 0) ? colore3 : colore4) + bordi + cell2rer + ((i % 1 == 0) ? colore3 : colore4) + bordi + cell3rer + ((i % 1 == 0) ? colore3 : colore4) + bordi + cell4rer + ((i % 1 == 0) ? colore3 : colore4) + bordi + cell5rer + ((i % 1 == 0) ? colore3 : colore4) + bordi + cell6rer + ((i % 1 == 0) ? colore3 : colore4) + bordi + cell7rer + ((i % 1 == 0) ? colore3 : colore4) + bordi + cell8rer + inizioriga2;

          partial_rtf_text += " \\qr \\fs16 " + (i - 3).ToString() + " \\cell ";
          partial_rtf_text += " \\qr \\fs16 " + ((nodenodo2["txtEA"].ToString() == null) ? "" : ConvertNumberNoDecimal(nodenodo2["txtEA"].ToString())) + " \\cell ";
          partial_rtf_text += " \\qr \\fs16 " + ((nodenodo2["txtAP"].ToString() == null) ? "" : ConvertNumberNoDecimal(nodenodo2["txtAP"].ToString())) + " \\cell ";
          partial_rtf_text += " \\qr \\fs16 " + ((nodenodo2["txtNETTOPN"].ToString() == null) ? "" : ConvertNumberNoDecimal(nodenodo2["txtNETTOPN"].ToString())) + " \\cell ";
          partial_rtf_text += " \\qr \\fs16 " + ((nodenodo2["txtSP"].ToString() == null) ? "" : ConvertNumberNoDecimal(nodenodo2["txtSP"].ToString())) + " \\cell ";
          partial_rtf_text += " \\qr \\fs16 " + ((nodenodo2["txtNETTOCE"].ToString() == null) ? "" : ConvertNumberNoDecimal(nodenodo2["txtNETTOCE"].ToString())) + " \\cell ";
          partial_rtf_text += " \\qr \\fs16 " + ((nodenodo2["txtCE"].ToString() == null) ? "" : ConvertNumberNoDecimal(nodenodo2["txtCE"].ToString())) + " \\cell ";
          partial_rtf_text += " \\qc \\f1 " + ((nodenodo2["chkIrrilevante"].ToString() == null) ? "" : ((nodenodo2["chkIrrilevante"].ToString() == "True") ? checkbox_Cheched : checkbox_UnCheched)) + " \\f0 \\cell ";

          partial_rtf_text += fineriga;
        }
      }

      partial_rtf_text += inizioriga + colore3 + cell1rer + colore3 + cell4rer + colore3 + cell5rer + colore3 + cell6rer + inizioriga2;

      partial_rtf_text += " \\cell";
      partial_rtf_text += " \\cell";
      partial_rtf_text += " \\cell";
      partial_rtf_text += " \\cell";

      partial_rtf_text += fineriga;

      partial_rtf_text += inizioriga + colore3 + cell3rer + colore3 + bordi + cell5rer + colore3 + bordi + cell7rer + inizioriga2;

      partial_rtf_text += " \\qc \\fs18 ERRORE TRASCURABILE \\cell";
      partial_rtf_text += " \\qr \\b \\fs16 " + ((nodenodo["txtErroreTollerabileSP"].ToString() == "") ? "" : ConvertNumberNoDecimal(nodenodo["txtErroreTollerabileSP"].ToString())) + " \\fs18 \\b0 \\cell";
      partial_rtf_text += " \\qr \\b \\fs16 " + ((nodenodo["txtErroreTollerabileCE"].ToString() == "") ? "" : ConvertNumberNoDecimal(nodenodo["txtErroreTollerabileCE"].ToString())) + " \\fs18 \\b0 \\cell";

      partial_rtf_text += fineriga;


      partial_rtf_text += "\\line\\pard\\bgdkdcross\\cfpat1\\shading59110\\tx2291\\par  \\fs20 ";


      return partial_rtf_text;
    }

    private string AddRiepilogoErroriRilevatiNN(XmlNode nodeTree, string ID, string nomefile)
    {
      RevisoftApplication.XmlManager xt = new XmlManager();
      xt.TipoCodifica = RevisoftApplication.XmlManager.TipologiaCodifica.Normale;
      XmlDataProvider TreeXmlProvider = new XmlDataProvider();
      TreeXmlProvider.Document = xt.LoadEncodedFile(App.AppTemplateTreeBilancio);

      string idsessionebilancio = cBusinessObjects.CercaSessione("Conclusione", "Bilancio", idsessione.ToString(), idcliente);
      DataTable datiErroriRilevatiNN = cBusinessObjects.GetData(-1, typeof(Excel_ErroriRilevatiNN), idcliente, int.Parse(idsessionebilancio), 4);

      datiErroriRilevatiNN.Columns.Add("ID", typeof(int));
      datiErroriRilevatiNN.Columns.Add("Codice", typeof(string));
      int j3 = 0;
      foreach (DataRow item in datiErroriRilevatiNN.Rows)
      {
        item["ID"] = j3;
        XmlNode tnode = TreeXmlProvider.Document.SelectSingleNode("/Tree//Node[@ID=" + cBusinessObjects.Gest_ID_SCHEDA(item["ID_SCHEDA"].ToString(), 4) + "]");
        item["Codice"] = tnode.ParentNode.Attributes["Codice"].Value; ;

        j3++;
      }


      string partial_rtf_text = "";

      partial_rtf_text += " \\page \\pard\\keep";

      partial_rtf_text += "\\line\\pard\\keepn\\b\\f0 Errori Non Numerari:\\b0 \\line \\par\n";

      partial_rtf_text += "\\pard\\keep";

      if (datiErroriRilevatiNN.Rows.Count == 0)
      {
        partial_rtf_text += " Nessun errore non numerario rilevato. ";
        partial_rtf_text += "\\line\\pard\\bgdkdcross\\cfpat1\\shading59110\\tx2291\\par";
      }
      else
      {
        Hashtable Header2 = new Hashtable();
        Hashtable Colonne2 = new Hashtable();
        Hashtable Lunghezze2 = new Hashtable();
        Hashtable Tipologia2 = new Hashtable();

        Header2.Add(1, "Carta di Lavoro");
        Colonne2.Add(1, "Codice");
        Lunghezze2.Add(1, 50);
        Tipologia2.Add(1, TipologiaDato.StringaDx);
        Header2.Add(2, "Numero");
        Colonne2.Add(2, "numero");
        Lunghezze2.Add(2, 70);
        Tipologia2.Add(2, TipologiaDato.Stringa);
        Header2.Add(3, "Descrizione");
        Colonne2.Add(3, "name");
        Lunghezze2.Add(3, 350);
        Tipologia2.Add(3, TipologiaDato.Stringa);
        Header2.Add(4, "Corretto");
        Colonne2.Add(4, "corretto");
        Lunghezze2.Add(4, 50);
        Tipologia2.Add(4, TipologiaDato.Booleano);

        partial_rtf_text += CreateTable(Header2, Lunghezze2, "15");

        int index2 = 0;

        foreach (DataRow item in datiErroriRilevatiNN.Rows)
        {

          partial_rtf_text += AddNodoTable(item, index2++, Colonne2, Tipologia2, Lunghezze2);

        }

        partial_rtf_text += "\\line\\pard\\bgdkdcross\\cfpat1\\shading59110\\tx2291\\par";
      }

      partial_rtf_text += " \\page \\pard\\keepn\\b\\f0 Riclassifiche:\\b0 \\line \\par\n";//Errori Monetari - 

      partial_rtf_text += "\\pard\\keep";



      DataTable datiErroriRilevatiMR = cBusinessObjects.GetData(-1, typeof(Excel_ErroriRilevatiMR), cBusinessObjects.idcliente, int.Parse(idsessionebilancio), 4);

      datiErroriRilevatiMR.Columns.Add("ID", typeof(int));
      datiErroriRilevatiMR.Columns.Add("Codice", typeof(string));
      int j2 = 0;
      foreach (DataRow item in datiErroriRilevatiMR.Rows)
      {
        item["ID"] = j2;
        j2++;

        XmlNode tnode = TreeXmlProvider.Document.SelectSingleNode("/Tree//Node[@ID=" + cBusinessObjects.Gest_ID_SCHEDA(item["ID_SCHEDA"].ToString(), 4) + "]");
        item["Codice"] = tnode.ParentNode.Attributes["Codice"].Value; ;

      }


      if (datiErroriRilevatiMR.Rows.Count == 0)
      {
        partial_rtf_text += " Nessun errore riclassifica rilevato. ";
        partial_rtf_text += "\\line\\pard\\bgdkdcross\\cfpat1\\shading59110\\tx2291\\par";
      }
      else
      {
        Hashtable Header2 = new Hashtable();
        Hashtable Colonne2 = new Hashtable();
        Hashtable Lunghezze2 = new Hashtable();
        Hashtable Tipologia2 = new Hashtable();

        Header2.Add(1, "Carta di Lavoro");
        Colonne2.Add(1, "Codice");
        Lunghezze2.Add(1, 50);
        Tipologia2.Add(1, TipologiaDato.StringaDx);
        Header2.Add(2, "Descrizione");
        Colonne2.Add(2, "name");
        Lunghezze2.Add(2, 200);
        Tipologia2.Add(2, TipologiaDato.Stringa);
        Header2.Add(3, "Conto Imputato");
        Colonne2.Add(3, "contoimputato");
        Lunghezze2.Add(3, 75);
        Tipologia2.Add(3, TipologiaDato.StringaDx);
        Header2.Add(4, "Conto Proposto");
        Colonne2.Add(4, "contoproposto");
        Lunghezze2.Add(4, 75);
        Tipologia2.Add(4, TipologiaDato.StringaDx);
        Header2.Add(5, "Importo");
        Colonne2.Add(5, "importo");
        Lunghezze2.Add(5, 75);
        Tipologia2.Add(5, TipologiaDato.Double);
        Header2.Add(6, "Corretto");
        Colonne2.Add(6, "corretto");
        Lunghezze2.Add(6, 50);
        Tipologia2.Add(6, TipologiaDato.Booleano);

        partial_rtf_text += CreateTable(Header2, Lunghezze2, "15");

        int index2 = 0;
        foreach (DataRow item in datiErroriRilevatiMR.Rows)
        {
          if (item["name"].ToString() != "Totale")
          {
            partial_rtf_text += AddNodoTable(item, index2++, Colonne2, Tipologia2, Lunghezze2);
          }
        }

        partial_rtf_text += "\\line\\pard\\bgdkdcross\\cfpat1\\shading59110\\tx2291\\par";


      }

      return partial_rtf_text;
    }
    #endregion

    #region VersamentoImposteContributi

    string cell1vc = "\\clvertalc\\cellx2900";
    string cell2vc = "\\clvertalc\\cellx9900";

    private string AddVersamentoImposteContributi(XmlNode nodeTree, string ID)
    {

      string partial_rtf_text = "";
      string partial_partial_rtf_text = "";
      bool rowdone = false;

      ArrayList periodi = new ArrayList();

      DataTable dati = cBusinessObjects.GetData(int.Parse(nodeTree.Attributes["ID"].Value), typeof(Excel_VersamentoImposteContributi), idcliente, idsessione, idtree);
      foreach (DataRow item in dati.Rows)
      {
        if (item["periodo"].ToString() != "" && !periodi.Contains(item["periodo"].ToString()))
        {
          periodi.Add(item["periodo"].ToString());
        }
      }

      foreach (string periodo in periodi)
      {
        partial_rtf_text = "";
        rowdone = false;

        partial_rtf_text += "\\line\\pard\\keepn\\b\\f0 " + periodo + ":\\b0 \\par\n";


        partial_rtf_text += "\\pard\\keep";


        foreach (DataRow item in dati.Rows)
        {
          if (item["periodo"].ToString() == periodo)
          {
            if (item.Table.Columns.Contains("PeriodoDiRiferimento"))
            {
              if (item["PeriodoDiRiferimento"].ToString() != "")
              {
                partial_rtf_text += inizioriga + bordi + cell1vc + bordi + cell2vc + inizioriga2;

                partial_rtf_text += " Periodo di riferimento \\cell";
                partial_rtf_text += " " + item["PeriodoDiRiferimento"].ToString() + " \\cell";

                partial_rtf_text += fineriga;
              }
            }
            if (item["AMezzo"] != null)
            {
              partial_rtf_text += inizioriga + "\n" + bordi + cell1vc + bordi + cell2vc + inizioriga2;

              partial_rtf_text += " A mezzo \\cell";
              partial_rtf_text += " " + item["AMezzo"].ToString() + " \\cell";

              partial_rtf_text += fineriga;
            }
            if (item["ProtocolloTelematico"] != null)
            {
              partial_rtf_text += inizioriga + "\n" + bordi + cell1vc + bordi + cell2vc + inizioriga2;

              partial_rtf_text += " Protocollo Telematico \\cell";
              partial_rtf_text += " " + item["ProtocolloTelematico"].ToString() + " \\cell";

              partial_rtf_text += fineriga;
            }
            if (item["DataDiPagamento"] != null)
            {
              partial_rtf_text += inizioriga + "\n" + bordi + cell1vc + bordi + cell2vc + inizioriga2;

              partial_rtf_text += " Data di pagamento \\cell";
              partial_rtf_text += " " + item["DataDiPagamento"].ToString() + " \\cell";

              partial_rtf_text += fineriga;
            }
           break;
          }
        }

        /*
                if (nodeData.Attributes["PeriodoDiRiferimento_" + StaticUtilities.ReplaceXml(periodo.ToString())] != null)
                {
                    partial_rtf_text += inizioriga + bordi + cell1vc + bordi + cell2vc + inizioriga2;

                    partial_rtf_text += " Periodo di riferimento \\cell";
                    partial_rtf_text += " " + nodeData.Attributes["PeriodoDiRiferimento_" + StaticUtilities.ReplaceXml(periodo.ToString())].Value + " \\cell";

                    partial_rtf_text += fineriga;
                }

                if (nodeData.Attributes["AMezzo_" + StaticUtilities.ReplaceXml(periodo.ToString())] != null)
                {
                    partial_rtf_text += inizioriga + "\n" + bordi + cell1vc + bordi + cell2vc + inizioriga2;

                    partial_rtf_text += " A mezzo \\cell";
                    partial_rtf_text += " " + nodeData.Attributes["AMezzo_" + StaticUtilities.ReplaceXml(periodo.ToString())].Value + " \\cell";

                    partial_rtf_text += fineriga;
                }

                if (nodeData.Attributes["ProtocolloTelematico_" + StaticUtilities.ReplaceXml(periodo.ToString())] != null)
                {
                    partial_rtf_text += inizioriga + "\n" + bordi + cell1vc + bordi + cell2vc + inizioriga2;

                    partial_rtf_text += " Protocollo Telematico \\cell";
                    partial_rtf_text += " " + nodeData.Attributes["ProtocolloTelematico_" + StaticUtilities.ReplaceXml(periodo.ToString())].Value + " \\cell";

                    partial_rtf_text += fineriga;
                }

                if (nodeData.Attributes["DataDiPagamento_" + StaticUtilities.ReplaceXml(periodo.ToString())] != null)
                {
                    partial_rtf_text += inizioriga + "\n" + bordi + cell1vc + bordi + cell2vc + inizioriga2;

                    partial_rtf_text += " Data di pagamento \\cell";
                    partial_rtf_text += " " + nodeData.Attributes["DataDiPagamento_" + StaticUtilities.ReplaceXml(periodo.ToString())].Value + " \\cell";

                    partial_rtf_text += fineriga;
                }

        */


        partial_rtf_text += "\\line\\pard\\bgdkdcross\\cfpat1\\shading59110\\tx2291\\par";
        partial_partial_rtf_text += partial_rtf_text;
        partial_rtf_text = "";

        Hashtable Header = new Hashtable();
        Hashtable Colonne = new Hashtable();
        Hashtable Lunghezze = new Hashtable();
        Hashtable Tipologia = new Hashtable();

        Header.Add(1, "Descrizione tributo");
        Colonne.Add(1, "name");
        Lunghezze.Add(1, 225);
        Tipologia.Add(1, TipologiaDato.Stringa);
        Header.Add(2, "Codice tributo");
        Colonne.Add(2, "codice");
        Lunghezze.Add(2, 90);
        Tipologia.Add(2, TipologiaDato.Stringa);
        Header.Add(3, "Importo pagato");
        Colonne.Add(3, "importoPagato");
        Lunghezze.Add(3, 90);
        Tipologia.Add(3, TipologiaDato.Double);
        Header.Add(4, "Importo compensato");
        Colonne.Add(4, "importoCompensato");
        Lunghezze.Add(4, 90);
        Tipologia.Add(4, TipologiaDato.Double);

        partial_rtf_text += CreateTable(Header, Lunghezze, "16");

        int index = 0;
        foreach (DataRow item in dati.Rows)
        {
          if (item["periodo"].ToString() == periodo)
          {
            partial_rtf_text += AddNodoTable(item, index++, Colonne, Tipologia, Lunghezze);

            if (item["importoPagato"].ToString() != "0" || item["importoCompensato"].ToString() != "0")
            {
              rowdone = true;
            }
          }
        }

        partial_rtf_text += "\\line\\pard\\bgdkdcross\\cfpat1\\shading59110\\tx2291\\par";

        if (rowdone)
        {
          partial_partial_rtf_text += partial_rtf_text;
        }
      }

      return partial_partial_rtf_text;
    }
    #endregion

    #region Compensazioni
    private string AddCompensazioni(XmlNode nodeTree, string ID)
    {

      string partial_rtf_text = "";
      string partial_partial_rtf_text = "";
      bool rowdone = false;

      ArrayList periodi = new ArrayList();

      DataTable dati = cBusinessObjects.GetData(int.Parse(nodeTree.Attributes["ID"].Value), typeof(Excel_Compensazioni), idcliente, idsessione, idtree);
      DataRow nodeData = null;
      foreach (DataRow item in dati.Rows)
      {
        if (item["periodo"].ToString() != "" && !periodi.Contains(item["periodo"].ToString()))
        {
          periodi.Add(item["periodo"].ToString());
        }
        nodeData = item;
      }
      if (nodeData == null)
        return "";

      foreach (string periodo in periodi)
      {
        partial_rtf_text = "";
        rowdone = false;

        partial_rtf_text += "\\pard\\keepn\\b\\f0 " + periodo + ":\\b0 \\par\n";


        partial_rtf_text += "\\pard\\keep";
        if (nodeData.Table.Columns.Contains("CreditoEsistente"))
        {
          if (nodeData["CreditoEsistente_" + periodo.ToString()].ToString() != "")
          {
            partial_rtf_text += inizioriga + "\n" + bordi + cell1vc + bordi + cell2vc + inizioriga2;

            partial_rtf_text += " Credito esistente \\cell";
            partial_rtf_text += " " + nodeData["CreditoEsistente_" + periodo.ToString()].ToString() + " \\cell";

            partial_rtf_text += fineriga;
          }
        }

        partial_rtf_text += "\\line\\pard\\bgdkdcross\\cfpat1\\shading59110\\tx2291\\par";

        Hashtable Header = new Hashtable();
        Hashtable Colonne = new Hashtable();
        Hashtable Lunghezze = new Hashtable();
        Hashtable Tipologia = new Hashtable();

        Header.Add(1, "Data");
        Colonne.Add(1, "name");
        Lunghezze.Add(1, 100);
        Tipologia.Add(1, TipologiaDato.Stringa);
        Header.Add(2, "Tributi compensati");
        Colonne.Add(2, "codice");
        Lunghezze.Add(2, 310);
        Tipologia.Add(2, TipologiaDato.Stringa);
        Header.Add(3, "Importi");
        Colonne.Add(3, "importoPagato");
        Lunghezze.Add(3, 85);
        Tipologia.Add(3, TipologiaDato.Double);

        partial_rtf_text += CreateTable(Header, Lunghezze, "16");

        int index = 0;
        foreach (DataRow item in dati.Rows)
        {
          if (item["periodo"].ToString() == periodo)
          {
            partial_rtf_text += AddNodoTable(item, index++, Colonne, Tipologia, Lunghezze);

            if (item["importoPagato"].ToString() != "0")
            {
              rowdone = true;
            }
          }
        }

        partial_rtf_text += "\\line\\pard\\bgdkdcross\\cfpat1\\shading59110\\tx2291\\par";

        if (rowdone)
        {
          partial_partial_rtf_text += partial_rtf_text;
        }
      }

      return partial_partial_rtf_text;
    }
    #endregion
    //TODO
    #region Cicli
    private string AddCicli(XmlNode nodeTree, string ID)
    {
      return "";

      XmlNode nodeData = null;
      string partial_rtf_text = "";

      partial_rtf_text += "\\pard\\keep \\fs24";

      Hashtable Header = new Hashtable();
      Hashtable Colonne = new Hashtable();
      Hashtable Lunghezze = new Hashtable();
      Hashtable Tipologia = new Hashtable();

      Header.Add(1, "");
      Colonne.Add(1, "name");
      Lunghezze.Add(1, 242);
      Tipologia.Add(1, TipologiaDato.Stringa);
      Header.Add(2, " \\qc Alto");
      Colonne.Add(2, "value");
      Lunghezze.Add(2, 80);
      Tipologia.Add(2, TipologiaDato.Alto);
      Header.Add(3, " \\qc Medio");
      Colonne.Add(3, "value");
      Lunghezze.Add(3, 80);
      Tipologia.Add(3, TipologiaDato.Medio);
      Header.Add(4, " \\qc Basso");
      Colonne.Add(4, "value");
      Lunghezze.Add(4, 80);
      Tipologia.Add(4, TipologiaDato.Basso);

      partial_rtf_text += CreateTable(Header, Lunghezze, "16");

      int index = 0;
      foreach (XmlNode item in nodeData.SelectNodes("/Dati//Dato[@ID=" + ID + "]/Valore"))
      {
        if (item.Name == "Valore" && item.Attributes["name"] != null && !item.Attributes["name"].Value.Contains("2.8"))
        {
          //MM   partial_rtf_text += AddNodoTable(item, index++, Colonne, Tipologia, Lunghezze);
        }
      }

      partial_rtf_text += "\\line\\pard\\bgdkdcross\\cfpat1\\shading59110\\tx2291\\par \\fs20";

      if (!TitoloVerbale && !Fascicolo)
      {
        partial_rtf_text += " \\page ";
      }

      return partial_rtf_text;
    }
    #endregion

    #region SospesidiCassa
    private string AddSospesidiCassa(XmlNode nodeTree, string ID)
    {

      string partial_rtf_text = "";
      DataRow nodeData = null;
      DataTable dati = cBusinessObjects.GetData(int.Parse(nodeTree.Attributes["ID"].Value), typeof(Excel_SospesiDiCassa), idcliente, idsessione, idtree);

      foreach (DataRow item in dati.Rows)
      {
        nodeData = item;
      }
      if (nodeData == null)
        return "";

      if (nodeData.Table.Columns.Contains("PeriodoDiRiferimento"))
      {
        if (nodeData["PeriodoDiRiferimento"].ToString() != "")
        {
          partial_rtf_text += "\\line\\pard\\keepn\\b\\f0 " + "Data di riferimento: " + nodeData["PeriodoDiRiferimento"].ToString() + "\\b0 \\line \\par\n";
        }
      }

      partial_rtf_text += "\\pard\\keep";

      Hashtable Header = new Hashtable();
      Hashtable Colonne = new Hashtable();
      Hashtable Lunghezze = new Hashtable();
      Hashtable Tipologia = new Hashtable();

      Header.Add(1, "Debitore");
      Colonne.Add(1, "name");
      Lunghezze.Add(1, 225);
      Tipologia.Add(1, TipologiaDato.Stringa);
      Header.Add(2, "Causale");
      Colonne.Add(2, "codice");
      Lunghezze.Add(2, 110);
      Tipologia.Add(2, TipologiaDato.Stringa);
      Header.Add(3, "Data prelievo");
      Colonne.Add(3, "data_prelievo");
      Lunghezze.Add(3, 80);
      Tipologia.Add(3, TipologiaDato.Stringa);
      Header.Add(4, "Importo");
      Colonne.Add(4, "importoCompensato");
      Lunghezze.Add(4, 80);
      Tipologia.Add(4, TipologiaDato.Double);

      partial_rtf_text += CreateTable(Header, Lunghezze, "16");

      int index = 0;
      foreach (DataRow item in dati.Rows)
      {

        partial_rtf_text += AddNodoTable(item, index++, Colonne, Tipologia, Lunghezze);
      }


      partial_rtf_text += "\\line\\pard\\bgdkdcross\\cfpat1\\shading59110\\tx2291\\par";

      return partial_rtf_text;
    }
    #endregion

    #region CassaTitoli
    private string AddCassaTitoli(XmlNode nodeTree, string ID)
    {


      string partial_rtf_text = "";

      DataRow nodeData = null;

      DataTable dati = cBusinessObjects.GetData(int.Parse(nodeTree.Attributes["ID"].Value), typeof(CassaTitoli), idcliente, idsessione, idtree);

      foreach (DataRow item in dati.Rows)
      {
        nodeData = item;
      }
      if (nodeData == null)
        return "";

      if (nodeData["CreditoEsistente"].ToString() != "")
      {
        partial_rtf_text += "\\line\\pard\\keepn\\b\\f0 " + "Data di riferimento: " + nodeData["CreditoEsistente"].ToString() + "\\b0 \\line \\par\n";
      }

      partial_rtf_text += "\\pard\\keep";

      Hashtable Header = new Hashtable();
      Hashtable Colonne = new Hashtable();
      Hashtable Lunghezze = new Hashtable();
      Hashtable Tipologia = new Hashtable();

      Header.Add(1, "Titolo");
      Colonne.Add(1, "name");
      Lunghezze.Add(1, 260);
      Tipologia.Add(1, TipologiaDato.Stringa);
      Header.Add(2, "Scadenza");
      Colonne.Add(2, "codice");
      Lunghezze.Add(2, 130);
      Tipologia.Add(2, TipologiaDato.Stringa);
      Header.Add(3, "Euro");
      Colonne.Add(3, "importoPagato");
      Lunghezze.Add(3, 105);
      Tipologia.Add(3, TipologiaDato.Double);

      partial_rtf_text += CreateTable(Header, Lunghezze, "16");

      int index = 0;
      foreach (DataRow item in dati.Rows)
      {

        partial_rtf_text += AddNodoTable(item, index++, Colonne, Tipologia, Lunghezze);

      }

      partial_rtf_text += "\\line\\pard\\bgdkdcross\\cfpat1\\shading59110\\tx2291\\par";

      return partial_rtf_text;
    }
    #endregion

    #region CassaAssegni
    private string AddCassaAssegni(XmlNode nodeTree, string ID)
    {
   
      string partial_rtf_text = "";

      DataRow nodeData = null;

      DataTable dati = cBusinessObjects.GetData(int.Parse(nodeTree.Attributes["ID"].Value), typeof(CassaAssegni), idcliente, idsessione, idtree);

      foreach (DataRow item in dati.Rows)
      {
        nodeData = item;
      }
      if (nodeData == null) return "";
      if (nodeData.Table.Columns.Contains("PeriodoDiRiferimento"))
      {
        if (nodeData["PeriodoDiRiferimento"].ToString() != "")
        {
          partial_rtf_text += "\\line\\pard\\keepn\\b\\f0 " + "Data di riferimento: " + nodeData["PeriodoDiRiferimento"].ToString() + "\\b0 \\line \\par\n";
        }
      }

      partial_rtf_text += "\\pard\\keep";

      Hashtable Header = new Hashtable();
      Hashtable Colonne = new Hashtable();
      Hashtable Lunghezze = new Hashtable();
      Hashtable Tipologia = new Hashtable();

      Header.Add(1, "Traente");
      Colonne.Add(1, "name");
      Lunghezze.Add(1, 180);
      Tipologia.Add(1, TipologiaDato.Stringa);
      Header.Add(2, "Banca");
      Colonne.Add(2, "codice");
      Lunghezze.Add(2, 130);
      Tipologia.Add(2, TipologiaDato.Stringa);
      Header.Add(3, "Piazza");
      Colonne.Add(3, "importoPagato");
      Lunghezze.Add(3, 80);
      Tipologia.Add(3, TipologiaDato.Stringa);
      Header.Add(4, "Importo");
      Colonne.Add(4, "importoCompensato");
      Lunghezze.Add(4, 105);
      Tipologia.Add(4, TipologiaDato.Double);

      partial_rtf_text += CreateTable(Header, Lunghezze, "16");

      int index = 0;
      foreach (DataRow item in dati.Rows)
      {

        partial_rtf_text += AddNodoTable(item, index++, Colonne, Tipologia, Lunghezze);

      }

      partial_rtf_text += "\\line\\pard\\bgdkdcross\\cfpat1\\shading59110\\tx2291\\par";

      return partial_rtf_text;
    }
    private string AddCassaAssegni_T(XmlNode nodeTree, string ID)
    {
    
          
            DataTable objDtHeader = new DataTable("CassaAssegniHeader");
            objDtHeader.Columns.Add("Titolo", typeof(String));  
            objDtHeader.Columns.Add("PeriodoDiRiferimento", typeof(String));
            objDtHeader.Rows.Add("Carta di lavoro Cassa assegni","peridoaaaa");

            DataTable dati = cBusinessObjects.GetData(int.Parse(nodeTree.Attributes["ID"].Value), typeof(CassaAssegni), idcliente, idsessione, idtree);
          
           
         
       
            string workingDir = Path.GetFullPath(@"C:\PROGETTI4\REVISOFT\_TEMPLATES\");
            string templatePath = Path.Combine(workingDir, "cassaassegni.docx");

            DocumentCore dc = DocumentCore.Load(templatePath);

            //  Set Mail Merge Options using reflection:
            dc.MailMerge.ClearOptions = MailMergeClearOptions.RemoveEmptyRanges;

     
            dc.MailMerge.Execute(dati);
            dc.MailMerge.Execute(objDtHeader);
            dc.MailMerge.Execute(objDtHeader);
            
            string reportPath = Path.Combine(workingDir, "Results.docx");
             
            dc.Save(reportPath);

      return "";
    }
    #endregion

    #region CassaContante
    private string AddCassaContante(XmlNode nodeTree, string ID)
    {

      string partial_rtf_text = "";

      DataRow nodeData = null;

      DataTable dati = cBusinessObjects.GetData(int.Parse(nodeTree.Attributes["ID"].Value), typeof(CassaContante), idcliente, idsessione, idtree);

      foreach (DataRow item in dati.Rows)
      {
        nodeData = item;
      }
      if (nodeData == null)
        return "";
      if (nodeData["CreditoEsistente"].ToString() != "")
      {
        partial_rtf_text += "\\pard\\keepn\\b\\f0 " + "Data di riferimento: " + nodeData["CreditoEsistente"].ToString() + "\\b0 \\par\n";
      }

      partial_rtf_text += "\\pard\\keep";

      Hashtable Header = new Hashtable();
      Hashtable Colonne = new Hashtable();
      Hashtable Lunghezze = new Hashtable();
      Hashtable Tipologia = new Hashtable();

      Header.Add(1, "N°pezzi");
      Colonne.Add(1, "numeropezzi");
      Lunghezze.Add(1, 70);
      Tipologia.Add(1, TipologiaDato.Intero);
      Header.Add(2, "Unitario");
      Colonne.Add(2, "unitario");
      Lunghezze.Add(2, 130);
      Tipologia.Add(2, TipologiaDato.StringaDx);
      Header.Add(3, "Euro");
      Colonne.Add(3, "euro");
      Lunghezze.Add(3, 130);
      Tipologia.Add(3, TipologiaDato.Double);

      partial_rtf_text += CreateTable(Header, Lunghezze, "16");

      int index = 0;
      foreach (DataRow item in dati.Rows)
      {

        partial_rtf_text += AddNodoTable(item, index++, Colonne, Tipologia, Lunghezze);

      }

      partial_rtf_text += "\\line\\pard\\bgdkdcross\\cfpat1\\shading59110\\tx2291\\par";


      partial_rtf_text += "\\pard\\keep";

      string cell1vcBIS = "\\clvertalc\\cellx4000";
      string cell2vc2 = "\\clvertalc\\cellx6400";

      if (nodeData["txtTotaleComplessivo"].ToString() != "")
      {
        partial_rtf_text += inizioriga + "\n" + colore2 + bordi + cell1vcBIS + colore3 + bordi + cell2vc2 + inizioriga2;

        partial_rtf_text += " Totale Complessivo \\cell";
        partial_rtf_text += " \\qr " + nodeData["txtTotaleComplessivo"].ToString() + " \\cell";

        partial_rtf_text += fineriga;
      }

      if (nodeData["txtSaldoSchedaContabile"].ToString() != "")
      {
        partial_rtf_text += inizioriga + "\n" + colore2 + bordi + cell1vcBIS + colore3 + bordi + cell2vc2 + inizioriga2;

        partial_rtf_text += " Saldo Scheda Contabile \\cell";
        partial_rtf_text += " \\qr " + nodeData["txtSaldoSchedaContabile"].ToString() + " \\cell";

        partial_rtf_text += fineriga;
      }

      if (nodeData["txtDifferenza"].ToString() != "")
      {
        partial_rtf_text += inizioriga + "\n" + colore2 + bordi + cell1vcBIS + colore3 + bordi + cell2vc2 + inizioriga2;

        partial_rtf_text += " Differenza \\cell";
        partial_rtf_text += " \\qr " + nodeData["txtDifferenza"].ToString() + " \\cell";

        partial_rtf_text += fineriga;
      }

      partial_rtf_text += "\\line\\pard\\bgdkdcross\\cfpat1\\shading59110\\tx2291\\par";

      return partial_rtf_text;
    }
    #endregion

    #region CassaContanteNew
    private string AddCassaContanteNew(XmlNode nodeTree, string ID)
    {
      DataRow nodeData = null;
      string partial_rtf_text = "";
      bool esistealmenounvalore_upper = false;
      DataTable dati = cBusinessObjects.GetData(int.Parse(ID), typeof(Excel_CassaContanteNew), idcliente, idsessione, idtree);

      foreach (DataRow item in dati.Rows)
      {
        nodeData = item;
      }

      ArrayList periodi = new ArrayList();

      string tipo = "CassaContanteAltreValute";
      dati = cBusinessObjects.GetData(int.Parse(ID), typeof(Excel_CassaContanteAltreValute), idcliente, idsessione, idtree);

      foreach (DataRow item in dati.Rows)
      {
        if (item["CreditoEsistente"].ToString() != "" && !periodi.Contains(item["CreditoEsistente"].ToString()))
        {
          periodi.Add(item["CreditoEsistente"].ToString());
        }
      }

      if (periodi.Count == 0)
      {
        tipo = "CassaContante";
        dati = cBusinessObjects.GetData(int.Parse(ID), typeof(Excel_CassaContanteNew), idcliente, idsessione, idtree);

        foreach (DataRow item in dati.Rows)
        {
          if (item["CreditoEsistente"].ToString() != "" && !periodi.Contains(item["CreditoEsistente"].ToString()))
          {
            periodi.Add(item["CreditoEsistente"].ToString());
          }
        }
      }
      dati = cBusinessObjects.GetData(int.Parse(ID), typeof(Excel_CassaContanteNew), idcliente, idsessione, idtree);

      foreach (string periodo in periodi)
      {
        string partial_partial_rtf_text = "";
        bool esistealmenounvalore = false;

        partial_partial_rtf_text += "\\pard\\keepn\\b\\f0 " + periodo + "\\b0 ";


        foreach (DataRow item in dati.Rows)
        {
          if (item["CreditoEsistente"].ToString() == periodo.ToString())
          {
            partial_partial_rtf_text += " - Periodo di riferimento: " + nodeData["CreditoEsistente"].ToString();
            break;
          }

        }


        partial_partial_rtf_text += "\\par\n";

        partial_partial_rtf_text += "\\pard\\keep ";

        Hashtable Header = new Hashtable();
        Hashtable Colonne = new Hashtable();
        Hashtable Lunghezze = new Hashtable();
        Hashtable Tipologia = new Hashtable();

        Header.Add(1, "N°pezzi");
        Colonne.Add(1, "numeropezzi");
        Lunghezze.Add(1, 165);
        Tipologia.Add(1, TipologiaDato.Intero);
        Header.Add(2, "Unitario");
        Colonne.Add(2, "unitario");
        Lunghezze.Add(2, 165);
        Tipologia.Add(2, TipologiaDato.StringaDx);
        Header.Add(3, "Euro");
        Colonne.Add(3, "euro");
        Lunghezze.Add(3, 165);
        Tipologia.Add(3, TipologiaDato.Double);

        partial_partial_rtf_text += CreateTable(Header, Lunghezze, "16");

        int index = 0;
        if (tipo == "CassaContante")
          dati = cBusinessObjects.GetData(int.Parse(ID), typeof(Excel_CassaContanteNew), idcliente, idsessione, idtree);
        if (tipo == "CassaContanteAltreValute")
          dati = cBusinessObjects.GetData(int.Parse(ID), typeof(Excel_CassaContanteAltreValute), idcliente, idsessione, idtree);

        foreach (DataRow item in dati.Rows)
        {
          if (item["CreditoEsistente"].ToString() == periodo)
          {
            if (item["euro"].ToString() != "" && item["euro"].ToString() != "")
            {
              esistealmenounvalore = true;
              esistealmenounvalore_upper = true;
              partial_partial_rtf_text += AddNodoTable(item, index++, Colonne, Tipologia, Lunghezze);
            }
          }
        }

        partial_partial_rtf_text += "\\line\\pard\\bgdkdcross\\cfpat1\\shading59110\\tx2291\\par";


        partial_partial_rtf_text += "\\pard\\keep \\qc ";

        string cell1vcBIS = "\\clvertalc\\cellx4000";
        string cell2vc2 = "\\clvertalc\\cellx9900";
        dati = cBusinessObjects.GetData(int.Parse(ID), typeof(Excel_CassaContanteNew), idcliente, idsessione, idtree);


        foreach (DataRow item in dati.Rows)
        {
          if (nodeData["CreditoEsistente"].ToString() == periodo)
          {
            partial_partial_rtf_text += inizioriga + "\n" + bordi + cell1vcBIS + bordi + cell2vc2 + inizioriga2;

            partial_partial_rtf_text += " Totale Complessivo \\cell";
            partial_partial_rtf_text += " \\qr " + nodeData["txtTotaleComplessivo"].ToString() + " \\cell";

            partial_partial_rtf_text += fineriga;
            break;
          }

        }


        foreach (DataRow item in dati.Rows)
        {
          if (nodeData["CreditoEsistente"].ToString() == periodo.ToString())
          {
            partial_partial_rtf_text += inizioriga + "\n" + bordi + cell1vcBIS + bordi + cell2vc2 + inizioriga2;

            partial_partial_rtf_text += " Saldo Scheda Contabile \\cell";
            partial_partial_rtf_text += " \\qr " + nodeData["txtSaldoSchedaContabile"].ToString() + " \\cell";

            partial_partial_rtf_text += fineriga;
            break;

          }
        }

        foreach (DataRow item in dati.Rows)
        {
          if (nodeData["CreditoEsistente"].ToString() == periodo.ToString())
          {
            partial_partial_rtf_text += inizioriga + "\n" + bordi + cell1vcBIS + bordi + cell2vc2 + inizioriga2;

            partial_partial_rtf_text += " Differenza \\cell";
            partial_partial_rtf_text += " \\qr " + nodeData["txtDifferenza"].ToString() + " \\cell";

            partial_partial_rtf_text += fineriga;
            break;
          }
        }
        partial_partial_rtf_text += "\\pard\\bgdkdcross\\cfpat1\\shading59110\\tx2291\\par";

        if (esistealmenounvalore == true)
        {
          partial_rtf_text += partial_partial_rtf_text;
        }
      }

      if (esistealmenounvalore_upper == true)
      {
        return partial_rtf_text;
      }
      else
      {
        return "";
      }
    }
    #endregion

    #region CassaContanteAltreValute
    private string AddCassaContanteAltreValute(XmlNode nodeTree, string ID)
    {

      DataRow nodeData = null;

      DataTable dati = cBusinessObjects.GetData(int.Parse(ID), typeof(Excel_CassaContanteAltreValute), idcliente, idsessione, idtree);


      string partial_rtf_text = "";

      bool esistealmenounvalore_upper = false;

      ArrayList periodi = new ArrayList();

      foreach (DataRow item in dati.Rows)
      {
        if (item["CreditoEsistente"].ToString() != "" && !periodi.Contains(item["CreditoEsistente"].ToString()))
        {
          periodi.Add(item["CreditoEsistente"].ToString());
        }
      }

      foreach (string periodo in periodi)
      {
        string partial_partial_rtf_text = "";
        bool esistealmenounvalore = false;

        partial_partial_rtf_text += "\\pard\\keepn\\b\\f0 " + periodo + ":\\b0 \\par\n";

        partial_partial_rtf_text += "\\pard\\keep";

        partial_partial_rtf_text += "\\pard\\bgdkdcross\\cfpat1\\shading59110\\tx2291\\par";

        //if (nodeData.Attributes["CreditoEsistente"] != null)
        //{
        //    partial_partial_rtf_text += "\\line\\pard\\keepn\\b\\f0 " + "Data di riferimento: " + nodeData.Attributes["CreditoEsistente"].Value + "\\b0 \\line \\par\n";
        //}

        //partial_partial_rtf_text += "\\pard\\keep";

        Hashtable Header = new Hashtable();
        Hashtable Colonne = new Hashtable();
        Hashtable Lunghezze = new Hashtable();
        Hashtable Tipologia = new Hashtable();

        Header.Add(1, "N°pezzi");
        Colonne.Add(1, "numeropezzi");
        Lunghezze.Add(1, 165);
        Tipologia.Add(1, TipologiaDato.Intero);
        Header.Add(2, "Unitario");
        Colonne.Add(2, "unitario");
        Lunghezze.Add(2, 165);
        Tipologia.Add(2, TipologiaDato.StringaDx);
        Header.Add(3, "Valuta");
        Colonne.Add(3, "valuta");
        Lunghezze.Add(3, 165);
        Tipologia.Add(3, TipologiaDato.Double);

        partial_partial_rtf_text += CreateTable(Header, Lunghezze, "16");

        int index = 0;
        nodeData = null;
        foreach (DataRow item in dati.Rows)
        {
          if (item["CreditoEsistente"].ToString() == periodo)
          {
            if (item["valuta"].ToString() != "")
            {
              esistealmenounvalore = true;
              esistealmenounvalore_upper = true;
              partial_partial_rtf_text += AddNodoTable(item, index++, Colonne, Tipologia, Lunghezze);
            }
            nodeData = item;
          }
        }

        partial_partial_rtf_text += "\\line\\pard\\bgdkdcross\\cfpat1\\shading59110\\tx2291\\par";


        partial_partial_rtf_text += "\\pard\\keep";

        string cell1vcBIS = "\\clvertalc\\cellx4000";
        string cell2vc2 = "\\clvertalc\\cellx9900";

        if (nodeData != null && nodeData["txtTotaleComplessivo"].ToString() != "")
        {
          partial_partial_rtf_text += inizioriga + "\n" + bordi + cell1vcBIS + bordi + cell2vc2 + inizioriga2;

          partial_partial_rtf_text += " Totale Complessivo \\cell";
          partial_partial_rtf_text += " \\qr " + nodeData["txtTotaleComplessivo"].ToString() + " \\cell";

          partial_partial_rtf_text += fineriga;
        }

        if (nodeData != null && nodeData["txtTassoDiCambio"].ToString() != "")
        {
          partial_partial_rtf_text += inizioriga + "\n" + bordi + cell1vcBIS + bordi + cell2vc2 + inizioriga2;

          partial_partial_rtf_text += " Tasso di Cambio \\cell";
          partial_partial_rtf_text += " \\qr " + nodeData["txtTassoDiCambio"].ToString() + " \\cell";

          partial_partial_rtf_text += fineriga;
        }

        if (nodeData != null && nodeData["txtControvaloreInEuro"].ToString() != "")
        {
          partial_partial_rtf_text += inizioriga + "\n" + bordi + cell1vcBIS + bordi + cell2vc2 + inizioriga2;

          partial_partial_rtf_text += " Controvalore in Euro \\cell";
          partial_partial_rtf_text += " \\qr " + nodeData["txtControvaloreInEuro"].ToString() + " \\cell";

          partial_partial_rtf_text += fineriga;
        }

        if (nodeData != null && (nodeData["txtSaldoSchedaContabile"].ToString() != ""))
        {
          partial_partial_rtf_text += inizioriga + "\n" + bordi + cell1vcBIS + bordi + cell2vc2 + inizioriga2;

          partial_partial_rtf_text += " Saldo Scheda Contabile \\cell";
          partial_partial_rtf_text += " \\qr " + nodeData["txtSaldoSchedaContabile"].ToString() + " \\cell";

          partial_partial_rtf_text += fineriga;
        }

        if (nodeData != null && (nodeData["txtDifferenza"].ToString() != ""))
        {
          partial_partial_rtf_text += inizioriga + "\n" + bordi + cell1vcBIS + bordi + cell2vc2 + inizioriga2;

          partial_partial_rtf_text += " Differenza \\cell";
          partial_partial_rtf_text += " \\qr " + nodeData["txtDifferenza"].ToString() + " \\cell";

          partial_partial_rtf_text += fineriga;
        }

        partial_partial_rtf_text += "\\line\\pard\\bgdkdcross\\cfpat1\\shading59110\\tx2291\\par";

        if (esistealmenounvalore == true)
        {
          partial_rtf_text += partial_partial_rtf_text;
        }
      }

      if (esistealmenounvalore_upper == true)
      {
        return partial_rtf_text;
      }
      else
      {
        return "";
      }
    }
    #endregion

    #region CassaValoriBollati
    private string AddCassaValoriBollati(XmlNode nodeTree, string ID)
    {
      DataRow nodeData = null;

      DataTable datiFrancobolli = cBusinessObjects.GetData(int.Parse(ID), typeof(CassaValoriBollati_Francobolli), idcliente, idsessione, idtree);
      DataTable datiMarche = cBusinessObjects.GetData(int.Parse(ID), typeof(CassaValoriBollati_Marche), idcliente, idsessione, idtree);

      string partial_rtf_text = "";
      foreach (DataRow item in datiFrancobolli.Rows)
      {
        nodeData = item;
      }

      if (nodeData != null && nodeData["CreditoEsistente"].ToString() != "")
      {
        partial_rtf_text += "\\line\\pard\\keepn\\b\\f0 " + "Data di riferimento: " + nodeData["CreditoEsistente"].ToString() + "\\b0 \\line \\par\n";
      }

      partial_rtf_text += "\\pard\\keepn\\f0 " + "Francobolli: " + " \\line \\par\n";

      partial_rtf_text += "\\pard\\keep";

      Hashtable Header = new Hashtable();
      Hashtable Colonne = new Hashtable();
      Hashtable Lunghezze = new Hashtable();
      Hashtable Tipologia = new Hashtable();

      Header.Add(1, "N°pezzi");
      Colonne.Add(1, "numeropezzi");
      Lunghezze.Add(1, 165);
      Tipologia.Add(1, TipologiaDato.Intero);
      Header.Add(2, "Unitario");
      Colonne.Add(2, "unitario");
      Lunghezze.Add(2, 165);
      Tipologia.Add(2, TipologiaDato.StringaDx);
      Header.Add(3, "Euro");
      Colonne.Add(3, "euro");
      Lunghezze.Add(3, 165);
      Tipologia.Add(3, TipologiaDato.Double);

      partial_rtf_text += CreateTable(Header, Lunghezze, "16");

      int index = 0;
      foreach (DataRow item in datiFrancobolli.Rows)
      {

        partial_rtf_text += AddNodoTable(item, index++, Colonne, Tipologia, Lunghezze);

      }

      partial_rtf_text += "\\pard\\bgdkdcross\\cfpat1\\shading59110\\tx2291\\par";

      partial_rtf_text += "\\pard\\keepn\\f0 " + "Valori bollati: " + " \\line \\par\n";

      partial_rtf_text += "\\pard\\keep";

      Header = new Hashtable();
      Colonne = new Hashtable();
      Lunghezze = new Hashtable();
      Tipologia = new Hashtable();

      Header.Add(1, "N°pezzi");
      Colonne.Add(1, "numeropezzi");
      Lunghezze.Add(1, 165);
      Tipologia.Add(1, TipologiaDato.Intero);
      Header.Add(2, "Unitario");
      Colonne.Add(2, "unitario");
      Lunghezze.Add(2, 165);
      Tipologia.Add(2, TipologiaDato.StringaDx);
      Header.Add(3, "Euro");
      Colonne.Add(3, "euro");
      Lunghezze.Add(3, 165);
      Tipologia.Add(3, TipologiaDato.Double);

      partial_rtf_text += CreateTable(Header, Lunghezze, "16");

      index = 0;

      foreach (DataRow item in datiMarche.Rows)
      {
        partial_rtf_text += AddNodoTable(item, index++, Colonne, Tipologia, Lunghezze);

      }

      partial_rtf_text += "\\line\\pard\\bgdkdcross\\cfpat1\\shading59110\\tx2291\\par";

      partial_rtf_text += "\\pard\\keep";

      string cell1vcBIS = "\\clvertalc\\cellx4000";
      string cell2vc2 = "\\clvertalc\\cellx9900";

      if (nodeData != null && nodeData["txtTotaleComplessivo"].ToString() != "")
      {
        partial_rtf_text += inizioriga + "\n" + bordi + cell1vcBIS + bordi + cell2vc2 + inizioriga2;

        partial_rtf_text += " Totale Complessivo \\cell";
        partial_rtf_text += " \\qr " + ConvertNumber(nodeData["txtTotaleComplessivo"].ToString()) + " \\cell";

        partial_rtf_text += fineriga;
      }

      if (nodeData != null && nodeData["txtSaldoSchedaContabile"].ToString() != "")
      {
        partial_rtf_text += inizioriga + "\n" + bordi + cell1vcBIS + bordi + cell2vc2 + inizioriga2;

        partial_rtf_text += " Saldo Scheda Contabile \\cell";
        partial_rtf_text += " \\qr " + ConvertNumber(nodeData["txtSaldoSchedaContabile"].ToString()) + " \\cell";

        partial_rtf_text += fineriga;
      }

      if (nodeData != null && nodeData["txtDifferenza"].ToString() != "")
      {
        partial_rtf_text += inizioriga + "\n" + bordi + cell1vcBIS + bordi + cell2vc2 + inizioriga2;

        partial_rtf_text += " Differenza \\cell";
        partial_rtf_text += " \\qr " + ConvertNumber(nodeData["txtDifferenza"].ToString()) + " \\cell";

        partial_rtf_text += fineriga;
      }

      partial_rtf_text += "\\line\\pard\\bgdkdcross\\cfpat1\\shading59110\\tx2291\\par";

      return partial_rtf_text;
    }
    #endregion

    #region Riconciliazioni
    private string AddRiconciliazioni(XmlNode nodeTree, string ID)
    {
      DataRow nodeData = null;

      DataTable dati = cBusinessObjects.GetData(int.Parse(ID), typeof(Excel_Riconciliazioni), idcliente, idsessione, idtree);

      string partial_rtf_text = "";
      foreach (DataRow item in dati.Rows)
      {
        nodeData = item;
      }


      string partial_partial_rtf_text = "";
      bool rowdone = false;

      bool OLD = false;

      ArrayList periodi = new ArrayList();

      foreach (DataRow item in dati.Rows)
      {
        if (item["CreditoEsistente"].ToString() != "" && !periodi.Contains(item["CreditoEsistente"].ToString()))
        {
          periodi.Add(item["CreditoEsistente"].ToString());
        }
      }

      if (periodi.Count == 0)
      {
        OLD = true;


      }

      // calcolo totali
   
       foreach (string periodo in periodi)
       {
          double saldocontabiletmp = 0;
          double saldoectmp = 0;
          double differenzatmp = 0;
          double riconciliatotmp = 0;
          double importoconriconciliatotmp = 0;

          bool trovato = false;
          foreach (DataRow item in dati.Rows)
          {
            if (item["CreditoEsistente"].ToString() == periodo)
            {
                  trovato = true;
                  double value = 0.0;
                  double.TryParse(item["saldocontabile"].ToString(), out value);
                  saldocontabiletmp += value;
                  double.TryParse(item["saldoec"].ToString(), out value);
                  saldoectmp += value;
                  double.TryParse(item["differenza"].ToString(), out value);
                  differenzatmp += value;
                  double.TryParse(item["riconciliato"].ToString(), out value);
                  riconciliatotmp += value;
                  double.TryParse(item["importoconriconciliato"].ToString(), out value);
                  importoconriconciliatotmp += value;
            }
          }
          if(trovato)
            {
                 DataRow dd=dati.Rows.Add();
                 dd["CreditoEsistente"] =periodo;
                 dd["ccn"] ="Totale";
                 dd["saldocontabile"] =saldocontabiletmp;
                 dd["saldoec"] =saldoectmp;
                 dd["differenza"] =differenzatmp;     
                 dd["riconciliato"] =riconciliatotmp;
                 dd["importoconriconciliato"] =importoconriconciliatotmp;
            }
        
      }

      foreach (string periodo in periodi)
      {
        partial_rtf_text = "";
        rowdone = false;

        if (OLD)
        {
          partial_rtf_text += "\\pard\\keepn\\b\\f0 " + nodeTree.Attributes["Tab"].Value + ":\\b0 \\par\n";

          partial_rtf_text += "\\pard\\keep";

          partial_rtf_text += inizioriga + "\n" + colore2 + bordi + cell1vc + colore3 + bordi + cell2vc + inizioriga2;

          partial_rtf_text += " Data di Riferimento \\cell";
          partial_rtf_text += " " + periodo + " \\cell";

          partial_rtf_text += fineriga;
        }
        else
        {
          partial_rtf_text += "\\pard\\keepn\\b\\f0 " + periodo + ":\\b0 \\par\n";

          partial_rtf_text += "\\pard\\keep";
          foreach (DataRow item in dati.Rows)
          {
            if (item["CreditoEsistente"].ToString() == periodo)
            {
              partial_rtf_text += inizioriga + "\n" + colore2 + bordi + cell1vc + colore3 + bordi + cell2vc + inizioriga2;

              partial_rtf_text += " Data di Riferimento \\cell";
              partial_rtf_text += " " + periodo + " \\cell";

              partial_rtf_text += fineriga;
              break;
            }
          }
        }

        partial_rtf_text += "\\pard\\bgdkdcross\\cfpat1\\shading59110\\tx2291\\par";

        Hashtable Header = new Hashtable();
        Hashtable Colonne = new Hashtable();
        Hashtable Lunghezze = new Hashtable();
        Hashtable Tipologia = new Hashtable();

        Header.Add(1, "Banca");
        Colonne.Add(1, "banca");
        Lunghezze.Add(1, 90);
        Tipologia.Add(1, TipologiaDato.Stringa);
        Header.Add(2, "c/c n°");
        Colonne.Add(2, "ccn");
        Lunghezze.Add(2, 85);
        Tipologia.Add(2, TipologiaDato.Stringa);
        Header.Add(3, "Saldo contabile");
        Colonne.Add(3, "saldocontabile");
        Lunghezze.Add(3, 70);
        Tipologia.Add(3, TipologiaDato.Double);
        Header.Add(4, "Saldo e/c Banca");
        Colonne.Add(4, "saldoec");
        Lunghezze.Add(4, 70);
        Tipologia.Add(4, TipologiaDato.Double);
        Header.Add(5, "Differenza");
        Colonne.Add(5, "differenza");
        Lunghezze.Add(5, 60);
        Tipologia.Add(5, TipologiaDato.Double);
        Header.Add(6, "Riconciliato");
        Colonne.Add(6, "riconciliato");
        Lunghezze.Add(6, 60);
        Tipologia.Add(6, TipologiaDato.Double);
        Header.Add(7, "Imp. non ric.");
        Colonne.Add(7, "importoconriconciliato");
        Lunghezze.Add(7, 60);
        Tipologia.Add(7, TipologiaDato.Double);

        partial_rtf_text += CreateTable(Header, Lunghezze, "16");

        int index = 0;
        if (OLD)
        {
          foreach (DataRow item in dati.Rows)
          {
            partial_rtf_text += AddNodoTable(item, index++, Colonne, Tipologia, Lunghezze, "16");

            if ((item["saldocontabile"].ToString() != "0" && item["saldocontabile"].ToString() != "") || (item["saldoec"].ToString() != "0" && item["saldoec"].ToString() != ""))
            {
              rowdone = true;
            }
          }
        }
        else
        {
          foreach (DataRow item in dati.Rows)
          {
            if (item["CreditoEsistente"].ToString() == periodo)
            {

              partial_rtf_text += AddNodoTable(item, index++, Colonne, Tipologia, Lunghezze, "16");

              if ((item["saldocontabile"].ToString() != "0" && item["saldocontabile"].ToString() != "") || (item["saldoec"].ToString() != "0" && item["saldoec"].ToString() != ""))
              {
                rowdone = true;
              }
            }
          }

        }

        partial_rtf_text += "\\line\\pard\\bgdkdcross\\cfpat1\\shading59110\\tx2291\\par";

        if (rowdone)
        {
          partial_partial_rtf_text += partial_rtf_text;
        }
      }

      return partial_partial_rtf_text;
    }
    #endregion

    #region ISQC_Incaricati
    private string AddISQC_Incaricati(XmlNode nodeTree, string ID)
    {

      DataTable dati = cBusinessObjects.GetData(int.Parse(ID), typeof(Excel_ISQC_Incaricati), idcliente, idsessione, idtree);

      string partial_rtf_text = "";
      string partial_partial_rtf_text = "";
      bool rowdone = false;

      ArrayList periodi = new ArrayList();

      foreach (DataRow item in dati.Rows)
      {
        if (item["Header"].ToString() != "" && !periodi.Contains(item["Header"].ToString()))
        {
          periodi.Add(item["Header"].ToString());
        }
      }

      foreach (string periodo in periodi)
      {
        partial_rtf_text = "";
        rowdone = false;

        if (periodo == "ISQC")
        {
          ;
        }
        else
        {
          partial_rtf_text += "\\pard\\keepn\\b\\f0 " + periodo + ":\\b0 \\par\n";
        }

        partial_rtf_text += "\\pard\\keep";

        partial_rtf_text += "\\pard\\bgdkdcross\\cfpat1\\shading59110\\tx2291\\par";

        Hashtable Header = new Hashtable();
        Hashtable Colonne = new Hashtable();
        Hashtable Lunghezze = new Hashtable();
        Hashtable Tipologia = new Hashtable();

        Header.Add(1, "Incaricato");
        Colonne.Add(1, "incaricato");
        Lunghezze.Add(1, 170);
        Tipologia.Add(1, TipologiaDato.Stringa);
        //Header.Add(2, "Qualifica");
        //Colonne.Add(2, "qualifica");
        //Lunghezze.Add(2, 80);
        //Tipologia.Add(2, TipologiaDato.Stringa);
        Header.Add(2, "Incarico - Attività da svolgere");
        Colonne.Add(2, "incarico");
        Lunghezze.Add(2, 115);
        Tipologia.Add(2, TipologiaDato.Stringa);
        Header.Add(3, "Ore Previste");
        Colonne.Add(3, "previste");
        Lunghezze.Add(3, 70);
        Tipologia.Add(3, TipologiaDato.Intero);
        Header.Add(4, "Ore Effettive");
        Colonne.Add(4, "effettive");
        Lunghezze.Add(4, 70);
        Tipologia.Add(4, TipologiaDato.Intero);
        Header.Add(5, "Scostamento");
        Colonne.Add(5, "scostamento");
        Lunghezze.Add(5, 70);
        Tipologia.Add(5, TipologiaDato.Intero);

        partial_rtf_text += CreateTable(Header, Lunghezze, "16");

        int index = 0;
        foreach (DataRow item in dati.Rows)
        {
          if (item["Header"].ToString() == periodo)
          {

            partial_rtf_text += AddNodoTable(item, index++, Colonne, Tipologia, Lunghezze, "16");

            if (item["incaricato"].ToString().Trim() != "")
            {
              rowdone = true;
            }

          }
        }
        partial_rtf_text += "\\line\\pard\\bgdkdcross\\cfpat1\\shading59110\\tx2291\\par";

        if (rowdone)
        {
          partial_partial_rtf_text += partial_rtf_text;
        }
      }

      return partial_partial_rtf_text;
    }
    #endregion

    #region ISQC_TempiLavoro
    private string AddISQC_TempiLavoro(XmlNode nodeTree, string ID)
    {

      DataTable dati = cBusinessObjects.GetData(int.Parse(ID), typeof(Excel_ISQC_TempiLavoro), idcliente, idsessione, idtree);

      string partial_rtf_text = "";
      string partial_partial_rtf_text = "";
      bool rowdone = false;

      ArrayList periodi = new ArrayList();
      foreach (DataRow item in dati.Rows)
      {

        if (item["Header"].ToString() != "" && !periodi.Contains(item["Header"].ToString()))
        {
          periodi.Add(item["Header"].ToString());
        }
      }

      foreach (string periodo in periodi)
      {
        partial_rtf_text = "";
        rowdone = false;

        if (periodo == "ISQC")
        {
          ;
        }
        else
        {
          partial_rtf_text += "\\pard\\keepn\\b\\f0 " + periodo + ":\\b0 \\par\n";
        }

        partial_rtf_text += "\\pard\\keep";

        partial_rtf_text += "\\pard\\bgdkdcross\\cfpat1\\shading59110\\tx2291\\par";

        Hashtable Header = new Hashtable();
        Hashtable Colonne = new Hashtable();
        Hashtable Lunghezze = new Hashtable();
        Hashtable Tipologia = new Hashtable();

        Header.Add(1, "Data");
        Colonne.Add(1, "data");
        Lunghezze.Add(1, 80);
        Tipologia.Add(1, TipologiaDato.Stringa);
        Header.Add(2, "Esecutore");
        Colonne.Add(2, "esecutore");
        Lunghezze.Add(2, 175);
        Tipologia.Add(2, TipologiaDato.Stringa);
        //Header.Add(3, "Descrizione");
        //Colonne.Add(3, "descrizione");
        //Lunghezze.Add(3, 105);
        //Tipologia.Add(3, TipologiaDato.Stringa);
        Header.Add(3, "Ore Previste");
        Colonne.Add(3, "previste");
        Lunghezze.Add(3, 60);
        Tipologia.Add(3, TipologiaDato.Intero);
        Header.Add(4, "Ore Effettive");
        Colonne.Add(4, "effettive");
        Lunghezze.Add(4, 60);
        Tipologia.Add(4, TipologiaDato.Intero);
        Header.Add(5, "Scostamento");
        Colonne.Add(5, "scostamento");
        Lunghezze.Add(5, 60);
        Tipologia.Add(5, TipologiaDato.Intero);
        Header.Add(6, "%");
        Colonne.Add(6, "percentuale");
        Lunghezze.Add(6, 60);
        Tipologia.Add(6, TipologiaDato.Double);

        partial_rtf_text += CreateTable(Header, Lunghezze, "16");

        int index = 0;
        foreach (DataRow item in dati.Rows)
        {
          if (item["esecutore"].ToString() == periodo)
          {
            partial_rtf_text += AddNodoTable(item, index++, Colonne, Tipologia, Lunghezze, "16");

            if (item["esecutore"].ToString().Trim() != "")
            {
              rowdone = true;
            }
          }
        }

        partial_rtf_text += "\\line\\pard\\bgdkdcross\\cfpat1\\shading59110\\tx2291\\par";

        if (rowdone)
        {
          partial_partial_rtf_text += partial_rtf_text;
        }
      }

      return partial_partial_rtf_text;
    }
    #endregion

    #region ISQC_TempiLavoro_Riepilogo
    private string AddISQC_TempiLavoro_Riepilogo(XmlNode nodeTree, string ID)
    {

      DataTable dati = cBusinessObjects.GetData(int.Parse(ID), typeof(Excel_ISQC_TempiLavoro_Riepilogo), idcliente, idsessione, idtree);

      string partial_rtf_text = "";
      string partial_partial_rtf_text = "";
      bool rowdone = false;

      partial_rtf_text = "";
      rowdone = false;

      partial_rtf_text += "\\pard\\keep";

      partial_rtf_text += "\\pard\\bgdkdcross\\cfpat1\\shading59110\\tx2291\\par";

      Hashtable Header = new Hashtable();
      Hashtable Colonne = new Hashtable();
      Hashtable Lunghezze = new Hashtable();
      Hashtable Tipologia = new Hashtable();

      Header.Add(1, "Programma e tempi di lavoro");
      Colonne.Add(1, "titolo");
      Lunghezze.Add(1, 255);
      Tipologia.Add(1, TipologiaDato.Stringa);
      Header.Add(2, "Ore Previste");
      Colonne.Add(2, "previste");
      Lunghezze.Add(2, 60);
      Tipologia.Add(2, TipologiaDato.Intero);
      Header.Add(3, "Ore Effettive");
      Colonne.Add(3, "effettive");
      Lunghezze.Add(3, 60);
      Tipologia.Add(3, TipologiaDato.Intero);
      Header.Add(4, "Scostamento");
      Colonne.Add(4, "scostamento");
      Lunghezze.Add(4, 60);
      Tipologia.Add(4, TipologiaDato.Intero);
      Header.Add(5, "%");
      Colonne.Add(5, "percentuale");
      Lunghezze.Add(5, 60);
      Tipologia.Add(5, TipologiaDato.Double);

      partial_rtf_text += CreateTable(Header, Lunghezze, "16");

      int index = 0;


      foreach (DataRow item in dati.Rows)
      {


        partial_rtf_text += AddNodoTable(item, index++, Colonne, Tipologia, Lunghezze, "16");

        //if (item.Attributes["titolo"].Value.Trim() != "")
        if (item["titolo"].ToString() != "")
        {
          if (item["titolo"].ToString().Trim() != "")
            rowdone = true;
        }

      }

      partial_rtf_text += "\\line\\pard\\bgdkdcross\\cfpat1\\shading59110\\tx2291\\par";

      if (rowdone)
      {
        partial_partial_rtf_text += partial_rtf_text;
      }

      return partial_partial_rtf_text;
    }
    #endregion

    #region COGE
    private string AddCOGE(XmlNode nodeTree, string ID)
    {

      DataTable dati = cBusinessObjects.GetData(int.Parse(ID), typeof(Excel_COGE), idcliente, idsessione, idtree);
      DataTable datinote = cBusinessObjects.GetData(int.Parse(ID), typeof(Excel_COGENote), idcliente, idsessione, idtree);

      string partial_rtf_text = "";
      string partial_partial_rtf_text = "";
      bool rowdone = false;

      ArrayList periodi = new ArrayList();

      foreach (DataRow item in dati.Rows)
      {

        if (item["Header"].ToString() != "" && !periodi.Contains(item["Header"].ToString()))
        {
          periodi.Add(item["Header"].ToString());
        }
      }

      foreach (string periodo in periodi)
      {
        partial_rtf_text = "";
        rowdone = false;

        partial_rtf_text += "\\pard\\keepn\\b\\f0 " + periodo + ":\\b0 \\par\n";

        partial_rtf_text += "\\pard\\keep";

        partial_rtf_text += "\\pard\\bgdkdcross\\cfpat1\\shading59110\\tx2291\\par";

        Hashtable Header = new Hashtable();
        Hashtable Colonne = new Hashtable();
        Hashtable Lunghezze = new Hashtable();
        Hashtable Tipologia = new Hashtable();

        Header.Add(1, "Rif");
        Colonne.Add(1, "rif");
        Lunghezze.Add(1, 20);
        Tipologia.Add(1, TipologiaDato.Stringa);
        Header.Add(2, "N. Conto COGE");
        Colonne.Add(2, "contocoge");
        Lunghezze.Add(2, 100);
        Tipologia.Add(2, TipologiaDato.Stringa);
        Header.Add(3, "Descrizione Conto");
        Colonne.Add(3, "descrizionecoge");
        Lunghezze.Add(3, 135);
        Tipologia.Add(3, TipologiaDato.Stringa);
        Header.Add(4, "Importo COGE");
        Colonne.Add(4, "importocoge");
        Lunghezze.Add(4, 80);
        Tipologia.Add(4, TipologiaDato.Double);
        Header.Add(5, "Importo F24");
        Colonne.Add(5, "importof24");
        Lunghezze.Add(5, 80);
        Tipologia.Add(5, TipologiaDato.Double);
        Header.Add(6, "Delta");
        Colonne.Add(6, "delta");
        Lunghezze.Add(6, 80);
        Tipologia.Add(6, TipologiaDato.Double);

        partial_rtf_text += CreateTable(Header, Lunghezze, "16");

        int index = 0;
        double importocoge = 0.0;
        double importof24 = 0.0;
        double delta = 0.0;
        double TOTimportocoge = 0.0;
        double TOTimportof24 = 0.0;
        double TOTdelta = 0.0;
         DataRow rowtotale = null;
        foreach (DataRow item in dati.Rows)
        {

          if (item["Header"].ToString() == periodo)
          {

            partial_rtf_text += AddNodoTable(item, index++, Colonne, Tipologia, Lunghezze);

            if (item["importocoge"].ToString() != "0" && item["importocoge"].ToString() != "")
            {
              rowdone = true;
            }
             double.TryParse(item["importocoge"].ToString(), out importocoge);
             TOTimportocoge += importocoge;
             double.TryParse(item["delta"].ToString(), out delta);
             TOTdelta += delta;
             double.TryParse(item["importof24"].ToString(), out importof24);
             TOTimportof24 += importof24;
             rowtotale = item;
          }
        }
        if(TOTimportocoge>0)
        {
           rowtotale["contocoge"] = "Totale";
           rowtotale["rif"] = "";
           rowtotale["descrizionecoge"] = "";
           rowtotale["delta"] = TOTdelta;
           rowtotale["importocoge"] = TOTimportocoge;
           rowtotale["importof24"] = TOTimportof24;
           partial_rtf_text += AddNodoTable(rowtotale, index++, Colonne, Tipologia, Lunghezze);
        }
      
        partial_rtf_text += "\\line\\pard\\bgdkdcross\\cfpat1\\shading59110\\tx2291\\par";

        Header.Clear();
        Colonne.Clear();
        Lunghezze.Clear();
        Tipologia.Clear();

        Header.Add(1, "Rif");
        Colonne.Add(1, "rif");
        Lunghezze.Add(1, 20);
        Tipologia.Add(1, TipologiaDato.Stringa);
        Header.Add(2, "Note");
        Colonne.Add(2, "note");
        Lunghezze.Add(2, 475);
        Tipologia.Add(2, TipologiaDato.Stringa);

        partial_rtf_text += CreateTable(Header, Lunghezze, "16");

        int index2 = 0;
        foreach (DataRow item in datinote.Rows)
        {

          if (item["Header"].ToString() == periodo)
          {
            partial_rtf_text += AddNodoTable(item, index2++, Colonne, Tipologia, Lunghezze);
          }
        }

        partial_rtf_text += "\\line\\pard\\bgdkdcross\\cfpat1\\shading59110\\tx2291\\par";

        if (rowdone)
        {
          partial_partial_rtf_text += partial_rtf_text;
        }
      }

      return partial_partial_rtf_text;
    }
    #endregion

    #region RLA
    private string AddRLA(XmlNode nodeTree, string ID)
    {
      DataTable dati = cBusinessObjects.GetData(int.Parse(ID), typeof(Excel_RitenuteLavoratoriAutonomi), idcliente, idsessione, idtree);
      DataTable datinote = cBusinessObjects.GetData(int.Parse(ID), typeof(Excel_RitenuteLavoratoriAutonomiNote), idcliente, idsessione, idtree);

      string partial_rtf_text = "";
      string partial_partial_rtf_text = "";
      bool rowdone = false;

      ArrayList periodi = new ArrayList();
      foreach (DataRow item in dati.Rows)
      {
        if (item["Header"].ToString() != "" && !periodi.Contains(item["Header"].ToString()))
        {
          periodi.Add(item["Header"].ToString());
        }
      }

      foreach (string periodo in periodi)
      {
        partial_rtf_text = "";
        rowdone = false;

        partial_rtf_text += "\\pard\\keepn\\b\\f0 " + periodo + ":\\b0 \\par\n";

        partial_rtf_text += "\\pard\\keep";

        partial_rtf_text += "\\pard\\bgdkdcross\\cfpat1\\shading59110\\tx2291\\par";

        Hashtable Header = new Hashtable();
        Hashtable Colonne = new Hashtable();
        Hashtable Lunghezze = new Hashtable();
        Hashtable Tipologia = new Hashtable();

        Header.Add(1, "Rif");
        Colonne.Add(1, "rif");
        Lunghezze.Add(1, 20);
        Tipologia.Add(1, TipologiaDato.Stringa);
        Header.Add(2, "Fornitore");
        Colonne.Add(2, "fornitore");
        Lunghezze.Add(2, 105);
        Tipologia.Add(2, TipologiaDato.Stringa);
        Header.Add(3, "Data Doc.");
        Colonne.Add(3, "datadocumento");
        Lunghezze.Add(3, 60);
        Tipologia.Add(3, TipologiaDato.Stringa);
        Header.Add(4, "Numero Documento");
        Colonne.Add(4, "numerodocumento");
        Lunghezze.Add(4, 80);
        Tipologia.Add(4, TipologiaDato.Stringa);
        Header.Add(5, "Importo Ritenuta");
        Colonne.Add(5, "importo");
        Lunghezze.Add(5, 80);
        Tipologia.Add(5, TipologiaDato.Double);
        Header.Add(6, "Data Pagam.");
        Colonne.Add(6, "datapagamento");
        Lunghezze.Add(6, 60);
        Tipologia.Add(6, TipologiaDato.Stringa);
        Header.Add(7, "Codice Tributo");
        Colonne.Add(7, "codicetributo");
        Lunghezze.Add(7, 90);
        Tipologia.Add(7, TipologiaDato.Stringa);

        partial_rtf_text += CreateTable(Header, Lunghezze, "16");

        int index = 0;

        foreach (DataRow item in dati.Rows)
        {

          if (item["Header"].ToString() == periodo)
          {
            partial_rtf_text += AddNodoTable(item, index++, Colonne, Tipologia, Lunghezze);

            if (item["importo"].ToString() != "0" && item["importo"].ToString() != "")
            {
              rowdone = true;
            }
          }
        }

        partial_rtf_text += "\\line\\pard\\bgdkdcross\\cfpat1\\shading59110\\tx2291\\par";

        Header.Clear();
        Colonne.Clear();
        Lunghezze.Clear();
        Tipologia.Clear();

        Header.Add(1, "Rif");
        Colonne.Add(1, "rif");
        Lunghezze.Add(1, 20);
        Tipologia.Add(1, TipologiaDato.Stringa);
        Header.Add(2, "Note");
        Colonne.Add(2, "note");
        Lunghezze.Add(2, 475);
        Tipologia.Add(2, TipologiaDato.Stringa);

        partial_rtf_text += CreateTable(Header, Lunghezze, "16");

        int index2 = 0;

        foreach (DataRow item in datinote.Rows)
        {

          if (item["Header"].ToString() == periodo)
          {
            partial_rtf_text += AddNodoTable(item, index2++, Colonne, Tipologia, Lunghezze);
          }
        }

        partial_rtf_text += "\\line\\pard\\bgdkdcross\\cfpat1\\shading59110\\tx2291\\par";

        if (rowdone)
        {
          partial_partial_rtf_text += partial_rtf_text;
        }
      }

      return partial_partial_rtf_text;
    }
    #endregion

    #region Uniemens
    private string AddUniemens(XmlNode nodeTree, string ID)
    {
      DataTable dati = cBusinessObjects.GetData(int.Parse(ID), typeof(Excel_Uniemens), idcliente, idsessione, idtree);
      DataTable datinote = cBusinessObjects.GetData(int.Parse(ID), typeof(Excel_Uniemens_Note), idcliente, idsessione, idtree);

      string partial_rtf_text = "";
      string partial_partial_rtf_text = "";
      bool rowdone = false;

      ArrayList periodi = new ArrayList();
      foreach (DataRow item in dati.Rows)
      {
        if (item["Header"].ToString() != "" && !periodi.Contains(item["Header"].ToString()))
        {
          periodi.Add(item["Header"].ToString());
        }
      }


      foreach (string periodo in periodi)
      {
        partial_rtf_text = "";
        rowdone = false;

        partial_rtf_text += "\\pard\\keepn\\b\\f0 " + periodo + ":\\b0 \\par\n";

        partial_rtf_text += "\\pard\\keep";

        partial_rtf_text += "\\pard\\bgdkdcross\\cfpat1\\shading59110\\tx2291\\par";

        Hashtable Header = new Hashtable();
        Hashtable Colonne = new Hashtable();
        Hashtable Lunghezze = new Hashtable();
        Hashtable Tipologia = new Hashtable();

        Header.Add(1, "Rif");
        Colonne.Add(1, "rif");
        Lunghezze.Add(1, 20);
        Tipologia.Add(1, TipologiaDato.Stringa);
        Header.Add(2, "Periodo");
        Colonne.Add(2, "periodo");
        Lunghezze.Add(2, 50);
        Tipologia.Add(2, TipologiaDato.Stringa);
        Header.Add(3, "Scadenza");
        Colonne.Add(3, "scadenza");
        Lunghezze.Add(3, 50);
        Tipologia.Add(3, TipologiaDato.Stringa);
        Header.Add(4, "Presentaz.");
        Colonne.Add(4, "datapresentaz");
        Lunghezze.Add(4, 50);
        Tipologia.Add(4, TipologiaDato.Stringa);
        Header.Add(5, "Importo");
        Colonne.Add(5, "importo");
        Lunghezze.Add(5, 80);
        Tipologia.Add(5, TipologiaDato.Double);
        Header.Add(6, "N. protocollo");
        Colonne.Add(6, "numeroprotocollo");
        Lunghezze.Add(6, 105);
        Tipologia.Add(6, TipologiaDato.Stringa);
        Header.Add(7, "CF intermediario");
        Colonne.Add(7, "cfintermediario");
        Lunghezze.Add(7, 90);
        Tipologia.Add(7, TipologiaDato.Stringa);
        Header.Add(8, "Pagamento");
        Colonne.Add(8, "datapag");
        Lunghezze.Add(8, 50);
        Tipologia.Add(8, TipologiaDato.Stringa);

        partial_rtf_text += CreateTable(Header, Lunghezze, "16");

        int index = 0;
        foreach (DataRow item in dati.Rows)
        {

          if (item["Header"].ToString() == periodo)
          {
            partial_rtf_text += AddNodoTable(item, index++, Colonne, Tipologia, Lunghezze);//, "16"


            if (item["importo"].ToString() != "0" && item["importo"].ToString() != "")
            {
              rowdone = true;
            }
          }
        }



        partial_rtf_text += "\\line\\pard\\bgdkdcross\\cfpat1\\shading59110\\tx2291\\par";

        Header.Clear();
        Colonne.Clear();
        Lunghezze.Clear();
        Tipologia.Clear();

        Header.Add(1, "Rif");
        Colonne.Add(1, "rif");
        Lunghezze.Add(1, 20);
        Tipologia.Add(1, TipologiaDato.Stringa);
        Header.Add(2, "Note");
        Colonne.Add(2, "note");
        Lunghezze.Add(2, 475);
        Tipologia.Add(2, TipologiaDato.Stringa);

        partial_rtf_text += CreateTable(Header, Lunghezze, "16");

        int index2 = 0;
        foreach (DataRow item in datinote.Rows)
        {

          if (item["Header"].ToString() == periodo)
          {
            partial_rtf_text += AddNodoTable(item, index2++, Colonne, Tipologia, Lunghezze);
          }
        }

        partial_rtf_text += "\\line\\pard\\bgdkdcross\\cfpat1\\shading59110\\tx2291\\par";

        if (rowdone)
        {
          partial_partial_rtf_text += partial_rtf_text;
        }
      }

      return partial_partial_rtf_text;
    }
    #endregion

    #region ContributiAgenti
    private string AddContributiAgenti(XmlNode nodeTree, string ID)
    {
      DataTable dati = cBusinessObjects.GetData(int.Parse(ID), typeof(ContributiAgenti), idcliente, idsessione, idtree);
      DataTable datinote = cBusinessObjects.GetData(int.Parse(ID), typeof(ContributiAgenti_Note), idcliente, idsessione, idtree);

      string partial_rtf_text = "";
      string partial_partial_rtf_text = "";
      bool rowdone = false;

      ArrayList periodi = new ArrayList();
      foreach (DataRow item in dati.Rows)
      {
        if (item["Header"].ToString() != "" && !periodi.Contains(item["Header"].ToString()))
        {
          periodi.Add(item["Header"].ToString());
        }
      }



      foreach (string periodo in periodi)
      {
        partial_rtf_text = "";
        rowdone = false;

        partial_rtf_text += "\\pard\\keepn\\b\\f0 " + periodo + ":\\b0 \\par\n";

        partial_rtf_text += "\\pard\\keep";

        partial_rtf_text += "\\pard\\bgdkdcross\\cfpat1\\shading59110\\tx2291\\par";

        Hashtable Header = new Hashtable();
        Hashtable Colonne = new Hashtable();
        Hashtable Lunghezze = new Hashtable();
        Hashtable Tipologia = new Hashtable();

        Header.Add(1, "Rif");
        Colonne.Add(1, "rif");
        Lunghezze.Add(1, 20);
        Tipologia.Add(1, TipologiaDato.Stringa);
        Header.Add(2, "Periodo");
        Colonne.Add(2, "periodo");
        Lunghezze.Add(2, 90);
        Tipologia.Add(2, TipologiaDato.Stringa);
        Header.Add(3, "scadenza");
        Colonne.Add(3, "scadenza");
        Lunghezze.Add(3, 90);
        Tipologia.Add(3, TipologiaDato.Stringa);
        Header.Add(4, "Data presentaz.");
        Colonne.Add(4, "datapresentaz");
        Lunghezze.Add(4, 90);
        Tipologia.Add(4, TipologiaDato.Stringa);
        Header.Add(5, "Importo");
        Colonne.Add(5, "importo");
        Lunghezze.Add(5, 115);
        Tipologia.Add(5, TipologiaDato.Double);
        Header.Add(6, "Data pag.");
        Colonne.Add(6, "datapag");
        Lunghezze.Add(6, 90);
        Tipologia.Add(6, TipologiaDato.Stringa);

        partial_rtf_text += CreateTable(Header, Lunghezze, "16");

        int index = 0;
        foreach (DataRow item in dati.Rows)
        {

          if (item["Header"].ToString() == periodo)
          {

            partial_rtf_text += AddNodoTable(item, index++, Colonne, Tipologia, Lunghezze);

            rowdone = true;
         
          }
        }

        partial_rtf_text += "\\line\\pard\\bgdkdcross\\cfpat1\\shading59110\\tx2291\\par";

        Header.Clear();
        Colonne.Clear();
        Lunghezze.Clear();
        Tipologia.Clear();

        Header.Add(1, "Rif");
        Colonne.Add(1, "rif");
        Lunghezze.Add(1, 20);
        Tipologia.Add(1, TipologiaDato.Stringa);
        Header.Add(2, "Note");
        Colonne.Add(2, "note");
        Lunghezze.Add(2, 475);
        Tipologia.Add(2, TipologiaDato.Stringa);

        partial_rtf_text += CreateTable(Header, Lunghezze, "16");

        int index2 = 0;

        foreach (DataRow item in datinote.Rows)
        {

          if (item["Header"].ToString() == periodo)
          {
            partial_rtf_text += AddNodoTable(item, index2++, Colonne, Tipologia, Lunghezze);
          }
        }

        partial_rtf_text += "\\line\\pard\\bgdkdcross\\cfpat1\\shading59110\\tx2291\\par";

        if (rowdone)
        {
          partial_partial_rtf_text += partial_rtf_text;
        }
      }

      return partial_partial_rtf_text;
    }
    #endregion

    #region Rifiuti
    private string AddRifiuti(XmlNode nodeTree, string ID)
    {

      DataTable dati = cBusinessObjects.GetData(int.Parse(ID), typeof(Excel_Rifiuti), idcliente, idsessione, idtree);
      DataTable datinote = cBusinessObjects.GetData(int.Parse(ID), typeof(Excel_Rifiuti_Note), idcliente, idsessione, idtree);


      string partial_rtf_text = "";

      ArrayList periodi = new ArrayList();
      foreach (DataRow item in dati.Rows)
      {
        if (item["Header"].ToString() != "" && !periodi.Contains(item["Header"].ToString()))
        {
          periodi.Add(item["Header"].ToString());
        }
      }




      foreach (string periodo in periodi)
      {
        partial_rtf_text += "\\pard\\keepn\\b\\f0 " + periodo + ":\\b0 \\par\n";

        partial_rtf_text += "\\pard\\keep";

        partial_rtf_text += "\\pard\\bgdkdcross\\cfpat1\\shading59110\\tx2291\\par";

        Hashtable Header = new Hashtable();
        Hashtable Colonne = new Hashtable();
        Hashtable Lunghezze = new Hashtable();
        Hashtable Tipologia = new Hashtable();

        Header.Add(1, "Rif");
        Colonne.Add(1, "rif");
        Lunghezze.Add(1, 20);
        Tipologia.Add(1, TipologiaDato.Stringa);
        Header.Add(2, "Carico/Scarico");
        Colonne.Add(2, "caricoscarico");
        Lunghezze.Add(2, 140);
        Tipologia.Add(2, TipologiaDato.Stringa);
        Header.Add(3, "Data");
        Colonne.Add(3, "data");
        Lunghezze.Add(3, 80);
        Tipologia.Add(3, TipologiaDato.Stringa);
        Header.Add(4, "Pagina");
        Colonne.Add(4, "pagina");
        Lunghezze.Add(4, 80);
        Tipologia.Add(4, TipologiaDato.Stringa);
        Header.Add(5, "Protocollo");
        Colonne.Add(5, "protocollo");
        Lunghezze.Add(5, 100);
        Tipologia.Add(5, TipologiaDato.Stringa);
        Header.Add(6, "Formulario");
        Colonne.Add(6, "formulario");
        Lunghezze.Add(6, 100);
        Tipologia.Add(6, TipologiaDato.Stringa);

        partial_rtf_text += CreateTable(Header, Lunghezze, "16");

        int index = 0;
        foreach (DataRow item in dati.Rows)
        {

          if (item["Header"].ToString() == periodo)
          {
            partial_rtf_text += AddNodoTable(item, index++, Colonne, Tipologia, Lunghezze);
          }
        }

        partial_rtf_text += "\\line\\pard\\bgdkdcross\\cfpat1\\shading59110\\tx2291\\par";

        Header.Clear();
        Colonne.Clear();
        Lunghezze.Clear();
        Tipologia.Clear();

        Header.Add(1, "Rif");
        Colonne.Add(1, "rif");
        Lunghezze.Add(1, 20);
        Tipologia.Add(1, TipologiaDato.Stringa);
        Header.Add(2, "Descrizione");
        Colonne.Add(2, "note");
        Lunghezze.Add(2, 500);
        Tipologia.Add(2, TipologiaDato.Stringa);

        partial_rtf_text += CreateTable(Header, Lunghezze, "16");

        int index2 = 0;

        foreach (DataRow item in datinote.Rows)
        {

          if (item["Header"].ToString() == periodo)
          {
            partial_rtf_text += AddNodoTable(item, index2++, Colonne, Tipologia, Lunghezze);
          }
        }

        partial_rtf_text += "\\line\\pard\\bgdkdcross\\cfpat1\\shading59110\\tx2291\\par";
      }

      return partial_rtf_text;
    }
    #endregion

    #region ScrittureMagazzino
    private string AddScrittureMagazzino(XmlNode nodeTree, string ID)
    {

      DataTable dati = cBusinessObjects.GetData(int.Parse(ID), typeof(Excel_ScrittureMagazzino), idcliente, idsessione, idtree);
      DataTable datinote = cBusinessObjects.GetData(int.Parse(ID), typeof(Excel_ScrittureMagazzino_note), idcliente, idsessione, idtree);


      string partial_rtf_text = "";

      ArrayList periodi = new ArrayList();
      foreach (DataRow item in dati.Rows)
      {
        if (item["Header"].ToString() != "" && !periodi.Contains(item["Header"].ToString()))
        {
          periodi.Add(item["Header"].ToString());
        }
      }


      foreach (string periodo in periodi)
      {
        bool esistealmenounvalorenonvuoto = false;

        string periodo_partial_rtf_text = "";

        periodo_partial_rtf_text += "\\pard\\keepn\\b\\f0 " + periodo + ":\\b0 \\par\n";

        periodo_partial_rtf_text += "\\pard\\keep";

        periodo_partial_rtf_text += "\\bgdkdcross\\cfpat1\\shading59110\\tx2291\\par";

        Hashtable Header = new Hashtable();
        Hashtable Colonne = new Hashtable();
        Hashtable Lunghezze = new Hashtable();
        Hashtable Tipologia = new Hashtable();

        Header.Add(1, "Rif");
        Colonne.Add(1, "rif");
        Lunghezze.Add(1, 20);
        Tipologia.Add(1, TipologiaDato.Stringa);
        Header.Add(2, "Descrizione");
        Colonne.Add(2, "descrizione");
        Lunghezze.Add(2, 180);
        Tipologia.Add(2, TipologiaDato.Stringa);
        Header.Add(3, "Data");
        Colonne.Add(3, "data");
        Lunghezze.Add(3, 90);
        Tipologia.Add(3, TipologiaDato.StringaDx);
        Header.Add(4, "Pagina");
        Colonne.Add(4, "pagina");
        Lunghezze.Add(4, 85);
        Tipologia.Add(4, TipologiaDato.StringaDx);
        Header.Add(5, "Protocollo");
        Colonne.Add(5, "protocollo");
        Lunghezze.Add(5, 120);
        Tipologia.Add(5, TipologiaDato.StringaDx);

        periodo_partial_rtf_text += CreateTable(Header, Lunghezze, "16");

        int index = 0;
        foreach (DataRow item in dati.Rows)
        {

          if (item["Header"].ToString() == periodo)
          {

            string partial_periodo_partial_rtf_text = AddNodoTable(item, index++, Colonne, Tipologia, Lunghezze);

            if (partial_periodo_partial_rtf_text != "")
            {
              esistealmenounvalorenonvuoto = true;
            }

            periodo_partial_rtf_text += partial_periodo_partial_rtf_text;
          }
        }

        if (esistealmenounvalorenonvuoto == false)
        {
          periodo_partial_rtf_text = "";
          continue;
        }

        partial_rtf_text += periodo_partial_rtf_text;
        periodo_partial_rtf_text = "";
        esistealmenounvalorenonvuoto = false;

        periodo_partial_rtf_text += "\\pard\\bgdkdcross\\cfpat1\\shading59110\\tx2291\\par";

        Header.Clear();
        Colonne.Clear();
        Lunghezze.Clear();
        Tipologia.Clear();

        Header.Add(1, "Rif");
        Colonne.Add(1, "rif");
        Lunghezze.Add(1, 20);
        Tipologia.Add(1, TipologiaDato.Stringa);
        Header.Add(2, "Note");
        Colonne.Add(2, "note");
        Lunghezze.Add(2, 475);
        Tipologia.Add(2, TipologiaDato.Stringa);

        periodo_partial_rtf_text += CreateTable(Header, Lunghezze, "16");

        int index2 = 0;
        foreach (DataRow item in datinote.Rows)
        {

          if (item["Header"].ToString() == periodo)
          {

            string partial_periodo_partial_rtf_text = AddNodoTable(item, index2++, Colonne, Tipologia, Lunghezze);

            if (partial_periodo_partial_rtf_text != "")
            {
              esistealmenounvalorenonvuoto = true;
            }

            periodo_partial_rtf_text += partial_periodo_partial_rtf_text;
          }
        }

        periodo_partial_rtf_text += "\\pard\\bgdkdcross\\cfpat1\\shading59110\\tx2291\\par";

        if (esistealmenounvalorenonvuoto == true)
        {
          partial_rtf_text += periodo_partial_rtf_text;
        }
      }

      return partial_rtf_text;
    }
    #endregion

    #region CUD
    private string AddCUD(XmlNode nodeTree, string ID)
    {

      DataTable dati = cBusinessObjects.GetData(int.Parse(ID), typeof(Excel_CUD), idcliente, idsessione, idtree);
      DataTable datinote = cBusinessObjects.GetData(int.Parse(ID), typeof(Excel_CUD_Note), idcliente, idsessione, idtree);
      //bool rowdone = false;
      string partial_rtf_text = "";
      string partial_partial_rtf_text = "";



      ArrayList periodi = new ArrayList();
      foreach (DataRow item in dati.Rows)
      {
        if (item["Header"].ToString() != "" && !periodi.Contains(item["Header"].ToString()))
        {
          periodi.Add(item["Header"].ToString());
        }
      }



      foreach (string periodo in periodi)
      {
        partial_rtf_text = "";
        //rowdone = false;

        partial_rtf_text += "\\pard\\keepn\\b\\f0 " + periodo + ":\\b0 \\par\n";

        partial_rtf_text += "\\pard\\keep";

        partial_rtf_text += "\\pard\\bgdkdcross\\cfpat1\\shading59110\\tx2291\\par";

        Hashtable Header = new Hashtable();
        Hashtable Colonne = new Hashtable();
        Hashtable Lunghezze = new Hashtable();
        Hashtable Tipologia = new Hashtable();

        Header.Add(1, "Rif");
        Colonne.Add(1, "rif");
        Lunghezze.Add(1, 20);
        Tipologia.Add(1, TipologiaDato.Stringa);
        Header.Add(2, "Descrizione");
        Colonne.Add(2, "periodo");
        Lunghezze.Add(2, 295);
        Tipologia.Add(2, TipologiaDato.Stringa);
        Header.Add(3, "Scadenza");
        Colonne.Add(3, "scadenza");
        Lunghezze.Add(3, 90);
        Tipologia.Add(3, TipologiaDato.Stringa);
        Header.Add(4, "Data invio");
        Colonne.Add(4, "datapresentaz");
        Lunghezze.Add(4, 90);
        Tipologia.Add(4, TipologiaDato.Stringa);

        partial_rtf_text += CreateTable(Header, Lunghezze, "16");

        int index = 0;

        foreach (DataRow item in dati.Rows)
        {

          if (item["Header"].ToString() == periodo)
          {
            partial_rtf_text += AddNodoTable(item, index++, Colonne, Tipologia, Lunghezze);

            if (item["scadenza"].ToString() != "")
            {
              //rowdone = true;
            }
          }
        }

        partial_rtf_text += "\\line\\pard\\bgdkdcross\\cfpat1\\shading59110\\tx2291\\par";

        Header.Clear();
        Colonne.Clear();
        Lunghezze.Clear();
        Tipologia.Clear();

        Header.Add(1, "Rif");
        Colonne.Add(1, "rif");
        Lunghezze.Add(1, 20);
        Tipologia.Add(1, TipologiaDato.Stringa);
        Header.Add(2, "Note");
        Colonne.Add(2, "note");
        Lunghezze.Add(2, 475);
        Tipologia.Add(2, TipologiaDato.Stringa);

        partial_rtf_text += CreateTable(Header, Lunghezze, "16");

        int index2 = 0;
        foreach (DataRow item in datinote.Rows)
        {

          if (item["Header"].ToString() == periodo)
          {
            partial_rtf_text += AddNodoTable(item, index2++, Colonne, Tipologia, Lunghezze);
          }
        }

        partial_rtf_text += "\\line\\pard\\bgdkdcross\\cfpat1\\shading59110\\tx2291\\par";

        // if (rowdone)
        // {
        partial_partial_rtf_text += partial_rtf_text;
        // }
      }

      return partial_partial_rtf_text;
    }
    #endregion

    #region F24
    private string AddF24(XmlNode nodeTree, string ID)
    {

      DataTable dati = cBusinessObjects.GetData(int.Parse(ID), typeof(Excel_F24), idcliente, idsessione, idtree);
      DataTable datinote = cBusinessObjects.GetData(int.Parse(ID), typeof(Excel_F24Note), idcliente, idsessione, idtree);

      string partial_rtf_text = "";
      string partial_partial_rtf_text = "";
      bool rowdone = false;

      ArrayList periodi = new ArrayList();
      foreach (DataRow item in dati.Rows)
      {
        if (item["Header"].ToString() != "" && !periodi.Contains(item["Header"].ToString()))
        {
          periodi.Add(item["Header"].ToString());
        }
      }


      foreach (string periodo in periodi)
      {
        partial_rtf_text = "";
        rowdone = false;

        partial_rtf_text += "\\pard\\keepn\\b\\f0 " + periodo + ":\\b0 \\par\n";

        partial_rtf_text += "\\pard\\keep";

        partial_rtf_text += "\\pard\\bgdkdcross\\cfpat1\\shading59110\\tx2291\\par";

        Hashtable Header = new Hashtable();
        Hashtable Colonne = new Hashtable();
        Hashtable Lunghezze = new Hashtable();
        Hashtable Tipologia = new Hashtable();

        Header.Add(1, "Rif");
        Colonne.Add(1, "rif");
        Lunghezze.Add(1, 20);
        Tipologia.Add(1, TipologiaDato.Stringa);
        Header.Add(2, "Codice tributo");
        Colonne.Add(2, "codicetributo");
        Lunghezze.Add(2, 90);
        Tipologia.Add(2, TipologiaDato.Stringa);
        Header.Add(3, "Competenza");
        Colonne.Add(3, "competenza");
        Lunghezze.Add(3, 90);
        Tipologia.Add(3, TipologiaDato.Stringa);
        Header.Add(4, "Importo Pagato");
        Colonne.Add(4, "importopagato");
        Lunghezze.Add(4, 90);
        Tipologia.Add(4, TipologiaDato.Double);
        Header.Add(5, "Importo Compensato");
        Colonne.Add(5, "importocompensato");
        Lunghezze.Add(5, 90);
        Tipologia.Add(5, TipologiaDato.Double);
        Header.Add(6, "Data pagamento");
        Colonne.Add(6, "datapagamento");
        Lunghezze.Add(6, 70);
        Tipologia.Add(6, TipologiaDato.Stringa);
        Header.Add(7, "Data Scadenza");
        Colonne.Add(7, "datascadenza");
        Lunghezze.Add(7, 70);
        Tipologia.Add(7, TipologiaDato.Stringa);

        partial_rtf_text += CreateTable(Header, Lunghezze, "16");

        int index = 0;

        foreach (DataRow item in dati.Rows)
        {

          if (item["Header"].ToString() == periodo)
          {
            partial_rtf_text += AddNodoTable(item, index++, Colonne, Tipologia, Lunghezze);

            if (item["importopagato"].ToString() != "0" && item["importopagato"].ToString() != "")
            {
              rowdone = true;
            }
          }
        }

        partial_rtf_text += "\\line\\pard\\bgdkdcross\\cfpat1\\shading59110\\tx2291\\par";

        Header.Clear();
        Colonne.Clear();
        Lunghezze.Clear();
        Tipologia.Clear();

        Header.Add(1, "Rif");
        Colonne.Add(1, "rif");
        Lunghezze.Add(1, 20);
        Tipologia.Add(1, TipologiaDato.Stringa);
        Header.Add(2, "Note");
        Colonne.Add(2, "note");
        Lunghezze.Add(2, 475);
        Tipologia.Add(2, TipologiaDato.Stringa);

        partial_rtf_text += CreateTable(Header, Lunghezze, "16");

        int index2 = 0;
        foreach (DataRow item in datinote.Rows)
        {

          if (item["Header"].ToString() == periodo)
          {

            partial_rtf_text += AddNodoTable(item, index2++, Colonne, Tipologia, Lunghezze);
          }
        }

        partial_rtf_text += "\\line\\pard\\bgdkdcross\\cfpat1\\shading59110\\tx2291\\par";

        if (rowdone)
        {
          partial_partial_rtf_text += partial_rtf_text;
        }
      }

      return partial_partial_rtf_text;
    }
    #endregion

    #region Rischio Globale
    string cell1rg = "\\clvertalc\\cellx3600";
    string cell2rg = "\\clvertalc\\cellx4600";
    string cell3rg = "\\clvertalc\\cellx6200";
    string cell4rg = "\\clvertalc\\cellx7800";
    string cell5rg = "\\clvertalc\\cellx9400";
    string cell6rg = "";
    string cell7rg = "";

    private string AddRischioGlobale(XmlNode nodeTree, string ID, bool withrecap)
    {

      DataTable dati = cBusinessObjects.GetData(int.Parse(ID), typeof(RischioGlobale), idcliente, idsessione, idtree);
      string partial_rtf_text = "";

      string IDRischioGlobale = "22";

      DataRow nodenodo = null;
      foreach (DataRow item in dati.Rows)
      {
        nodenodo = item;
      }

      if (nodenodo == null || nodenodo["txt2"].ToString() == "")
      {
        dati = cBusinessObjects.GetData(int.Parse(IDRischioGlobale), typeof(RischioGlobale), idcliente, idsessione, idtree);
      }

      foreach (DataRow item in dati.Rows)
      {
        nodenodo = item;
      }
      if (nodenodo == null)
        return "";

      #region legenda

      if (withrecap)
      {
        //partial_rtf_text += "\\line\\pard\\keepn\\b\\f0 " + "LEGENDA RISCHIO GLOBALE" + "\\b0 \\line\\par\n";

        partial_rtf_text += "\\pard\\keep";

        partial_rtf_text += iniziorigaTP + "\n" + colore3 + cell2rg + colore2 + bordi + cell5rg + inizioriga2;

        partial_rtf_text += "\\b \\qc TABELLA DI RIFERIMENTO \\b0\\cell";
        partial_rtf_text += "\\b \\qc RISCHIO INTRINSECO \\line (valutazione dell'ambiente di controllo interno) \\b0\\cell";

        partial_rtf_text += finerigaTP;

        partial_rtf_text += iniziorigaTP + "\n" + colore3 + cell1rg + colore3 + cell2rg + colore3 + bordi + cell3rg + colore3 + bordi + cell4rg + colore3 + bordi + cell5rg + inizioriga2;

        partial_rtf_text += "\\b \\qc  \\b0\\cell";
        partial_rtf_text += "\\b \\qc  \\b0\\cell";
        partial_rtf_text += "\\b \\qc ALTO \\b0\\cell";
        partial_rtf_text += "\\b \\qc MEDIO \\b0\\cell";
        partial_rtf_text += "\\b \\qc BASSO \\b0\\cell";

        partial_rtf_text += finerigaTP;

        partial_rtf_text += iniziorigaTP + "\n" + colore2 + bordisxuprx + cell1rg + colore3 + bordi + cell2rg + colore3 + bordi + cell3rg + colore3 + bordi + cell4rg + colore3 + bordi + cell5rg + inizioriga2;

        partial_rtf_text += "\\b \\qc  \\b0\\cell";
        partial_rtf_text += "\\b \\qc ALTO \\b0\\cell";
        partial_rtf_text += "\\b \\qc molto basso \\b0\\cell";
        partial_rtf_text += "\\b \\qc basso \\b0\\cell";
        partial_rtf_text += "\\b \\qc medio \\b0\\cell";

        partial_rtf_text += finerigaTP;

        partial_rtf_text += iniziorigaTP + "\n" + colore2 + bordisxrx + cell1rg + colore3 + bordi + cell2rg + colore3 + bordi + cell3rg + colore3 + bordi + cell4rg + colore3 + bordi + cell5rg + inizioriga2;

        partial_rtf_text += "\\b \\qc RISCHIO DI CONTROLLO (CICLI) \\b0\\cell";
        partial_rtf_text += "\\b \\qc MEDIO \\b0\\cell";
        partial_rtf_text += "\\b \\qc basso \\b0\\cell";
        partial_rtf_text += "\\b \\qc medio \\b0\\cell";
        partial_rtf_text += "\\b \\qc alto \\b0\\cell";

        partial_rtf_text += finerigaTP;

        partial_rtf_text += iniziorigaTP + "\n" + colore2 + bordisxdwrx + cell1rg + colore3 + bordi + cell2rg + colore3 + bordi + cell3rg + colore3 + bordi + cell4rg + colore3 + bordi + cell5rg + inizioriga2;

        partial_rtf_text += "\\b \\qc  \\b0\\cell";
        partial_rtf_text += "\\b \\qc BASSO \\b0\\cell";
        partial_rtf_text += "\\b \\qc medio \\b0\\cell";
        partial_rtf_text += "\\b \\qc alto \\b0\\cell";
        partial_rtf_text += "\\b \\qc molto alto \\b0\\cell";

        partial_rtf_text += finerigaTP;

        partial_rtf_text += "\\line\\pard\\bgdkdcross\\cfpat1\\shading59110\\tx2291\\par";
      }
      #endregion

      #region calcolo

      cell1rg = "\\clvertalc\\cellx1944";
      cell2rg = "\\clvertalc\\cellx2268";
      cell3rg = "\\clvertalc\\cellx4214";
      cell4rg = "\\clvertalc\\cellx4860";
      cell5rg = "\\clvertalc\\cellx6804";
      cell6rg = "\\clvertalc\\cellx7452";
      cell7rg = "\\clvertalc\\cellx9396";

      partial_rtf_text += "\\line\\pard\\keepn\\b\\f0 " + "RISCHIO INDIVIDUAZIONE:" + "\\b0 \\line\\par\n";

      partial_rtf_text += "\\pard\\keep";

      partial_rtf_text += inizioriga + "\n" + colore4 + bordi + cell3rg + cell4rg + colore3 + bordi + cell5rg + cell6rg + colore4 + bordi + cell7rg + inizioriga2;

      partial_rtf_text += "\\b \\qc RISCHIO DI CONTROLLO \\b0\\cell";
      partial_rtf_text += "\\cell";
      partial_rtf_text += "\\b \\qc RISCHIO INTRINSECO \\b0\\cell";
      partial_rtf_text += "\\cell";
      partial_rtf_text += "\\b \\qc RISCHIO DI INDIVIDUAZIONE \\b0\\cell";

      partial_rtf_text += fineriga;

      partial_rtf_text += inizioriga + "\n" + cell7rg + inizioriga2;
      partial_rtf_text += "\\cell";
      partial_rtf_text += fineriga;

      #region ciclo vendite
      partial_rtf_text += inizioriga + "\n" + colore4 + bordi + cell1rg + cell2rg + colore4 + bordi + cell3rg + cell4rg + colore3 + bordisxuprx + cell5rg + cell6rg + colore4 + bordi + cell7rg + inizioriga2;

      partial_rtf_text += "\\b \\qc CICLO VENDITE \\b0\\cell";
      partial_rtf_text += "\\cell";

      if (nodenodo["txt2"].ToString() != "")
      {
        partial_rtf_text += "\\b \\qc " + nodenodo["txt2"].ToString() + " \\b0\\cell";
      }
      else
      {
        partial_rtf_text += "\\b \\qc Non applicabile \\b0\\cell";
      }
      partial_rtf_text += "\\f2 \\fs26 \\qc " + freccia_doppia + " \\fs20 \\f0\\cell";

      partial_rtf_text += "\\cell";

      partial_rtf_text += " \\fs26 \\qc " + "=" + " \\fs20 \\cell";

      if (nodenodo["txt2c"].ToString() != "")
      {
        partial_rtf_text += "\\b \\qc " + nodenodo["txt2c"].ToString() + " \\b0\\cell";
      }
      else
      {
        partial_rtf_text += "\\b \\qc Non applicabile \\b0\\cell";
      }

      partial_rtf_text += fineriga;
      #endregion

      #region ciclo acquisti
      partial_rtf_text += inizioriga + "\n" + colore4 + bordi + cell1rg + cell2rg + colore4 + bordi + cell3rg + cell4rg + colore3 + bordisxrx + cell5rg + cell6rg + colore4 + bordi + cell7rg + inizioriga2;

      partial_rtf_text += "\\b \\qc CICLO ACQUISTI \\b0\\cell";
      partial_rtf_text += "\\cell";
      if (nodenodo["txt3"].ToString() != "")
      {
        partial_rtf_text += "\\b \\qc \\line " + nodenodo["txt3"].ToString() + " \\b0\\cell";
      }
      else
      {
        partial_rtf_text += "\\b \\qc Non applicabile \\b0\\cell";
      }

      partial_rtf_text += "\\f2 \\fs26 \\qc " + freccia_doppia + " \\fs20 \\f0\\cell";

      partial_rtf_text += "\\cell";

      partial_rtf_text += " \\fs26 \\qc " + "=" + " \\fs20 \\cell";

      if (nodenodo["txt3c"].ToString() != "")
      {
        partial_rtf_text += "\\b \\qc \\line " + nodenodo["txt3c"].ToString() + " \\b0\\cell";
      }
      else
      {
        partial_rtf_text += "\\b \\qc Non applicabile \\b0\\cell";
      }

      partial_rtf_text += fineriga;
      #endregion

      #region ciclo personale
      partial_rtf_text += inizioriga + "\n" + colore4 + bordi + cell1rg + cell2rg + colore4 + bordi + cell3rg + cell4rg + colore3 + bordisxrx + cell5rg + cell6rg + colore4 + bordi + cell7rg + inizioriga2;

      partial_rtf_text += "\\b \\qc CICLO PERSONALE \\b0\\cell";
      partial_rtf_text += "\\cell";
      if (nodenodo["txt6"].ToString() != "")
      {
        partial_rtf_text += "\\b \\qc \\line " + nodenodo["txt6"].ToString() + " \\b0\\cell";
      }
      else
      {
        partial_rtf_text += "\\b \\qc Non applicabile \\b0\\cell";
      }

      partial_rtf_text += "\\f2 \\fs26 \\qc " + freccia_doppia + " \\fs20 \\f0\\cell";

      if (nodenodo["txt1"].ToString() != "")
      {
        partial_rtf_text += "\\b \\qc \\line " + nodenodo["txt1"].ToString() + " \\b0\\cell";
      }
      else
      {
        partial_rtf_text += "\\b \\qc Non applicabile \\b0\\cell";
      }

      partial_rtf_text += " \\fs26 \\qc " + "=" + " \\fs20 \\cell";

      if (nodenodo["txt6c"].ToString() != "")
      {
        partial_rtf_text += "\\b \\qc \\line " + nodenodo["txt6c"].ToString() + " \\b0\\cell";
      }
      else
      {
        partial_rtf_text += "\\b \\qc Non applicabile \\b0\\cell";
      }

      partial_rtf_text += fineriga;
      #endregion

      #region ciclo tesoreria
      partial_rtf_text += inizioriga + "\n" + colore4 + bordi + cell1rg + cell2rg + colore4 + bordi + cell3rg + cell4rg + colore3 + bordisxrx + cell5rg + cell6rg + colore4 + bordi + cell7rg + inizioriga2;

      partial_rtf_text += "\\b \\qc CICLO TESORERIA \\b0\\cell";
      partial_rtf_text += "\\cell";
      if (nodenodo["txt5"].ToString() != "")
      {
        partial_rtf_text += "\\b \\qc \\line " + nodenodo["txt5"].ToString() + " \\b0\\cell";
      }
      else
      {
        partial_rtf_text += "\\b \\qc Non applicabile \\b0\\cell";
      }

      partial_rtf_text += "\\f2 \\fs26 \\qc " + freccia_doppia + " \\fs20 \\f0\\cell";

      partial_rtf_text += "\\cell";

      partial_rtf_text += " \\fs26 \\qc " + "=" + " \\fs20 \\cell";

      if (nodenodo["txt5c"].ToString() != "")
      {
        partial_rtf_text += "\\b \\qc \\line " + nodenodo["txt5c"].ToString() + " \\b0\\cell";
      }
      else
      {
        partial_rtf_text += "\\b \\qc Non applicabile \\b0\\cell";
      }

      partial_rtf_text += fineriga;
      #endregion

      #region ciclo magazzino
      partial_rtf_text += inizioriga + "\n" + colore4 + bordi + cell1rg + cell2rg + colore4 + bordi + cell3rg + cell4rg + colore3 + bordisxdwrx + cell5rg + cell6rg + colore4 + bordi + cell7rg + inizioriga2;

      partial_rtf_text += "\\b \\qc CICLO MAGAZZINO \\b0\\cell";
      partial_rtf_text += "\\cell";
      if (nodenodo["txt4"].ToString() != "")
      {
        partial_rtf_text += "\\b \\qc \\line " + nodenodo["txt4"].ToString() + " \\b0\\cell";
      }
      else
      {
        partial_rtf_text += "\\b \\qc Non applicabile \\b0\\cell";
      }

      partial_rtf_text += "\\f2 \\fs26 \\qc " + freccia_doppia + " \\fs20 \\f0\\cell";

      partial_rtf_text += "\\cell";

      partial_rtf_text += " \\fs26 \\qc " + "=" + " \\fs20 \\cell";

      if (nodenodo["txt4c"].ToString() != "")
      {
        partial_rtf_text += "\\b \\qc \\line " + nodenodo["txt4c"].ToString() + " \\b0\\cell";
      }
      else
      {
        partial_rtf_text += "\\b \\qc Non applicabile \\b0\\cell";
      }

      partial_rtf_text += fineriga;
      #endregion

      partial_rtf_text += "\\pard\\bgdkdcross\\cfpat1\\shading59110\\tx2291\\par";

      #endregion

      if (!withrecap)
      {
        ;
      }

      return partial_rtf_text;
    }
    #endregion

    #region Materialita IpotesiUnificata
    string cell1m = "\\clvertalc\\cellx3000";
    string cell2m = "\\clvertalc\\cellx4600";
    string cell3m = "\\clvertalc\\cellx5400";
    string cell4m = "\\clvertalc\\cellx6200";
    string cell5m = "\\clvertalc\\cellx7600";
    string cell6m = "\\clvertalc\\cellx9000";
    string cell7m = "\\clvertalc\\cellx9800";

    private string AddMaterialitaIpotesiUnificate(XmlNode nodeTree, string ID, bool standard)
    {

      string partial_rtf_text = "";
      DataTable dati = cBusinessObjects.GetData(int.Parse(ID), typeof(Excel_LimiteMaterialitaSPCE), idcliente, idsessione, idtree);



      bool EsisteMaterialitaDaBilancio = false;

      if (getvalmat(dati, "txt1BILANCIO") != null)
      {
        EsisteMaterialitaDaBilancio = true;
      }

      //if (ID != "314")
      {
        #region parametri di riferimento

        if (EsisteMaterialitaDaBilancio == true)
        {
          partial_rtf_text += "\\pard\\keep";

          if (ID == "314")
          {
            partial_rtf_text += " \\b Materialità TOTALE AGGREGATO \\b0 \\line \\line";
          }
          else
          {
            partial_rtf_text += " \\b Materialità PIANIFICATA \\b0 \\line \\line";
          }

          partial_rtf_text += "\\par";
        }

        partial_rtf_text += "\\pard\\keep";

        partial_rtf_text += iniziorigaTP + "\n" + colore3 + bordi + cell1m + colore3 + bordi + cell2m + colore3 + bordi + cell4m + colore3 + bordi + cell6m + colore3 + bordi + cell7m + inizioriga2;

        partial_rtf_text += " \\qc \\fs16 Parametri di riferimento \\b0\\cell";
        partial_rtf_text += " \\qc \\fs16 Valori di bilancio \\b0\\cell";
        partial_rtf_text += " \\qc \\fs16 Percentuali \\b0\\cell";
        partial_rtf_text += " \\qc \\fs16 Limiti \\b0\\cell";
        partial_rtf_text += " \\qc \\fs16 Incl. \\b0\\cell";

        partial_rtf_text += finerigaTP;

        partial_rtf_text += iniziorigaTP + "\n" + colore3 + bordi + cell1m + colore3 + bordi + cell2m + colore3 + bordi + cell3m + colore3 + bordi + cell4m + colore3 + bordi + cell5m + colore3 + bordi + cell6m + colore3 + bordi + cell7m + inizioriga2;

        partial_rtf_text += " \\qc \\fs16  \\b0\\cell";
        partial_rtf_text += " \\qc \\fs16  \\b0\\cell";
        partial_rtf_text += " \\qc \\fs16 Minima \\b0\\cell";
        partial_rtf_text += " \\qc \\fs16 Massima \\b0\\cell";
        partial_rtf_text += " \\qc \\fs16 Minimo \\b0\\cell";
        partial_rtf_text += " \\qc \\fs16 Massimo \\b0\\cell";
        partial_rtf_text += " \\qc \\fs16  \\b0\\cell";

        partial_rtf_text += finerigaTP;

        partial_rtf_text += iniziorigaTP + "\n" + colore3 + bordi + cell1m + colore3 + bordi + cell2m + colore3 + bordi + cell3m + colore3 + bordi + cell4m + colore3 + bordi + cell5m + colore3 + bordi + cell6m + colore3 + bordi + cell7m + inizioriga2;

        partial_rtf_text += " \\ql \\fs16 Totale Attività \\b0\\cell";
        partial_rtf_text += " \\qr \\fs16 " + ((getvalmat(dati, "txt1") == "") ? "" : getvalmat(dati, "txt1")) + " \\b0\\cell";
        partial_rtf_text += " \\qc \\fs16 " + ((getvalmat(dati, "txt1_p_min") == "") ? "" : getvalmat(dati, "txt1_p_min")) + " \\b0\\cell";
        partial_rtf_text += " \\qc \\fs16 " + ((getvalmat(dati, "txt1_p_max") == "") ? "" : getvalmat(dati, "txt1_p_max")) + " \\b0\\cell";
        partial_rtf_text += " \\qr \\fs16 " + ((getvalmat(dati, "txt1min") == "") ? "" : getvalmat(dati, "txt1min")) + " \\b0\\cell";
        partial_rtf_text += " \\qr \\fs16 " + ((getvalmat(dati, "txt1lmax") == "") ? "" : getvalmat(dati, "txt1lmax")) + " \\b0\\cell";
        partial_rtf_text += " \\qc \\fs16 \\f1 " + ((getvalmat(dati, "chk1") == "") ? checkbox_Cheched : ((Convert.ToBoolean(getvalmat(dati, "chk1")) == true) ? checkbox_Cheched : checkbox_UnCheched)) + " \\f0 \\b0\\cell";

        partial_rtf_text += finerigaTP;

        partial_rtf_text += iniziorigaTP + "\n" + colore3 + bordi + cell1m + colore3 + bordi + cell2m + colore3 + bordi + cell3m + colore3 + bordi + cell4m + colore3 + bordi + cell5m + colore3 + bordi + cell6m + colore3 + bordi + cell7m + inizioriga2;

        partial_rtf_text += " \\ql \\fs16 Patrimonio Netto \\b0\\cell";
        partial_rtf_text += " \\qr \\fs16 " + ((getvalmat(dati, "txt2") == "") ? "" : getvalmat(dati, "txt2")) + " \\b0\\cell";
        partial_rtf_text += " \\qc \\fs16 " + ((getvalmat(dati, "txt2_p_min") == "") ? "" : getvalmat(dati, "txt2_p_min")) + " \\b0\\cell";
        partial_rtf_text += " \\qc \\fs16 " + ((getvalmat(dati, "txt2_p_max") == "") ? "" : getvalmat(dati, "txt2_p_max")) + " \\b0\\cell";
        partial_rtf_text += " \\qr \\fs16 " + ((getvalmat(dati, "txt2lmin") == "") ? "" : getvalmat(dati, "txt2lmin")) + " \\b0\\cell";
        partial_rtf_text += " \\qr \\fs16 " + ((getvalmat(dati, "txt2lmax") == "") ? "" : getvalmat(dati, "txt2lmax")) + " \\b0\\cell";
        partial_rtf_text += " \\qc \\fs16 \\f1 " + ((getvalmat(dati, "chk2") == "") ? checkbox_Cheched : ((Convert.ToBoolean(getvalmat(dati, "chk2")) == true) ? checkbox_Cheched : checkbox_UnCheched)) + " \\f0 \\b0\\cell";


        partial_rtf_text += finerigaTP;

        if (!standard)
        {
          partial_rtf_text += iniziorigaTP + "\n" + colore3 + bordi + cell1m + colore3 + bordi + cell2m + colore3 + bordi + cell3m + colore3 + bordi + cell4m + colore3 + bordi + cell5m + colore3 + bordi + cell6m + colore3 + bordi + cell7m + inizioriga2;

          partial_rtf_text += " \\ql \\fs16 A1-Ricavi delle vendite e prest. \\b0\\cell";
          partial_rtf_text += " \\qr \\fs16 " + ((getvalmat(dati, "txtContoEcValoreProdA1") == "") ? "" : getvalmat(dati, "txtContoEcValoreProdA1")) + " \\b0\\cell";
          partial_rtf_text += " \\qc \\fs16  \\b0\\cell";
          partial_rtf_text += " \\qc \\fs16  \\b0\\cell";
          partial_rtf_text += " \\qr \\fs16  \\b0\\cell";
          partial_rtf_text += " \\qr \\fs16  \\b0\\cell";
          partial_rtf_text += " \\qc \\fs16 \\f1  \\f0 \\b0\\cell";

          partial_rtf_text += finerigaTP;

          partial_rtf_text += iniziorigaTP + "\n" + colore3 + bordi + cell1m + colore3 + bordi + cell2m + colore3 + bordi + cell3m + colore3 + bordi + cell4m + colore3 + bordi + cell5m + colore3 + bordi + cell6m + colore3 + bordi + cell7m + inizioriga2;

          partial_rtf_text += " \\ql \\fs16 A2-Variaz. lavoraz. semilav. e finiti \\b0\\cell";
          partial_rtf_text += " \\qr \\fs16 " + ((getvalmat(dati, "txtContoEcValoreProdA2") == "") ? "" : getvalmat(dati, "txtContoEcValoreProdA2")) + " \\b0\\cell";
          partial_rtf_text += " \\qc \\fs16  \\b0\\cell";
          partial_rtf_text += " \\qc \\fs16  \\b0\\cell";
          partial_rtf_text += " \\qr \\fs16  \\b0\\cell";
          partial_rtf_text += " \\qr \\fs16  \\b0\\cell";
          partial_rtf_text += " \\qc \\fs16 \\f1  \\f0 \\b0\\cell";

          partial_rtf_text += finerigaTP;

          partial_rtf_text += iniziorigaTP + "\n" + colore3 + bordi + cell1m + colore3 + bordi + cell2m + colore3 + bordi + cell3m + colore3 + bordi + cell4m + colore3 + bordi + cell5m + colore3 + bordi + cell6m + colore3 + bordi + cell7m + inizioriga2;

          partial_rtf_text += " \\ql \\fs16 A3-Variazioni lavori su ordinazioni \\b0\\cell";
          partial_rtf_text += " \\qr \\fs16 " + ((getvalmat(dati, "txtContoEcValoreProdA3") == "") ? "" : getvalmat(dati, "txtContoEcValoreProdA3")) + " \\b0\\cell";
          partial_rtf_text += " \\qc \\fs16  \\b0\\cell";
          partial_rtf_text += " \\qc \\fs16  \\b0\\cell";
          partial_rtf_text += " \\qr \\fs16  \\b0\\cell";
          partial_rtf_text += " \\qr \\fs16  \\b0\\cell";
          partial_rtf_text += " \\qc \\fs16 \\f1  \\f0 \\b0\\cell";

          partial_rtf_text += finerigaTP;

          partial_rtf_text += iniziorigaTP + "\n" + colore3 + bordi + cell1m + colore3 + bordi + cell2m + colore3 + bordi + cell3m + colore3 + bordi + cell4m + colore3 + bordi + cell5m + colore3 + bordi + cell6m + colore3 + bordi + cell7m + inizioriga2;

          partial_rtf_text += " \\ql \\fs16 A4-Incrementi imm. lavori interni \\b0\\cell";
          partial_rtf_text += " \\qr \\fs16 " + ((getvalmat(dati, "txtContoEcValoreProdA4") == "") ? "" : getvalmat(dati, "txtContoEcValoreProdA4")) + " \\b0\\cell";
          partial_rtf_text += " \\qc \\fs16  \\b0\\cell";
          partial_rtf_text += " \\qc \\fs16  \\b0\\cell";
          partial_rtf_text += " \\qr \\fs16  \\b0\\cell";
          partial_rtf_text += " \\qr \\fs16  \\b0\\cell";
          partial_rtf_text += " \\qc \\fs16 \\f1  \\f0 \\b0\\cell";

          partial_rtf_text += finerigaTP;

          partial_rtf_text += iniziorigaTP + "\n" + colore3 + bordi + cell1m + colore3 + bordi + cell2m + colore3 + bordi + cell3m + colore3 + bordi + cell4m + colore3 + bordi + cell5m + colore3 + bordi + cell6m + colore3 + bordi + cell7m + inizioriga2;

          partial_rtf_text += " \\ql \\fs16 A5-Contributi c/ esercizio \\b0\\cell";
          partial_rtf_text += " \\qr \\fs16 " + ((getvalmat(dati, "txtContoEcValoreProdA5") == "") ? "" : getvalmat(dati, "txtContoEcValoreProdA5")) + " \\b0\\cell";
          partial_rtf_text += " \\qc \\fs16  \\b0\\cell";
          partial_rtf_text += " \\qc \\fs16  \\b0\\cell";
          partial_rtf_text += " \\qr \\fs16  \\b0\\cell";
          partial_rtf_text += " \\qr \\fs16  \\b0\\cell";
          partial_rtf_text += " \\qc \\fs16 \\f1  \\f0 \\b0\\cell";

          partial_rtf_text += finerigaTP;

          partial_rtf_text += iniziorigaTP + "\n" + colore3 + bordi + cell1m + colore3 + bordi + cell2m + colore3 + bordi + cell3m + colore3 + bordi + cell4m + colore3 + bordi + cell5m + colore3 + bordi + cell6m + colore3 + bordi + cell7m + inizioriga2;

          partial_rtf_text += " \\ql \\fs16 A5-Altri ricavi e preventivi \\b0\\cell";
          partial_rtf_text += " \\qr \\fs16 " + ((getvalmat(dati, "txtContoEcValoreProdA5_2") == "") ? "" : getvalmat(dati, "txtContoEcValoreProdA5_2")) + " \\b0\\cell";
          partial_rtf_text += " \\qc \\fs16  \\b0\\cell";
          partial_rtf_text += " \\qc \\fs16  \\b0\\cell";
          partial_rtf_text += " \\qr \\fs16  \\b0\\cell";
          partial_rtf_text += " \\qr \\fs16  \\b0\\cell";
          partial_rtf_text += " \\qc \\fs16 \\f1  \\f0 \\b0\\cell";

          partial_rtf_text += finerigaTP;

          partial_rtf_text += iniziorigaTP + "\n" + colore3 + bordi + cell1m + colore3 + bordi + cell2m + colore3 + bordi + cell3m + colore3 + bordi + cell4m + colore3 + bordi + cell5m + colore3 + bordi + cell6m + colore3 + bordi + cell7m + inizioriga2;

          partial_rtf_text += " \\ql \\fs16 Totale \\b0\\cell";
          partial_rtf_text += " \\qr \\fs16 " + ((getvalmat(dati, "txtContoEcValoreProdTotale") == "") ? "" : getvalmat(dati, "txtContoEcValoreProdTotale")) + " \\b0\\cell";
          partial_rtf_text += " \\qc \\fs16 " + ((getvalmat(dati, "txtContoEcValoreProdTotale_p_min") == "") ? "" : getvalmat(dati, "txtContoEcValoreProdTotale_p_min")) + " \\b0\\cell";
          partial_rtf_text += " \\qc \\fs16 " + ((getvalmat(dati, "txtContoEcValoreProdTotale_p_max") == "") ? "" : getvalmat(dati, "txtContoEcValoreProdTotale_p_max")) + " \\b0\\cell";
          partial_rtf_text += " \\qr \\fs16 " + ((getvalmat(dati, "txtContoEcValoreProdTotalelmin") == "") ? "" : getvalmat(dati, "txtContoEcValoreProdTotalelmin")) + " \\b0\\cell";
          partial_rtf_text += " \\qr \\fs16 " + ((getvalmat(dati, "txtContoEcValoreProdTotalelmax") == "") ? "" : getvalmat(dati, "txtContoEcValoreProdTotalelmax")) + " \\b0\\cell";
          partial_rtf_text += " \\qc \\fs16 \\f1 " + ((getvalmat(dati, "chkContoEcValoreProdTotale") == "") ? checkbox_Cheched : ((Convert.ToBoolean(getvalmat(dati, "chkContoEcValoreProdTotale")) == true) ? checkbox_Cheched : checkbox_UnCheched)) + " \\f0 \\b0\\cell";

          partial_rtf_text += finerigaTP;
        }


        partial_rtf_text += iniziorigaTP + "\n" + colore3 + bordi + cell1m + colore3 + bordi + cell2m + colore3 + bordi + cell3m + colore3 + bordi + cell4m + colore3 + bordi + cell5m + colore3 + bordi + cell6m + colore3 + bordi + cell7m + inizioriga2;

        partial_rtf_text += " \\ql \\fs16 Valore della produzione \\b0\\cell";
        partial_rtf_text += " \\qr \\fs16 " + ((getvalmat(dati, "txt3") == "") ? "" : getvalmat(dati, "txt3")) + " \\b0\\cell";
        partial_rtf_text += " \\qc \\fs16 " + ((getvalmat(dati, "txt3_p_min") == "") ? "" : getvalmat(dati, "txt3_p_min")) + " \\b0\\cell";
        partial_rtf_text += " \\qc \\fs16 " + ((getvalmat(dati, "txt3_p_max") == "") ? "" : getvalmat(dati, "txt3_p_max")) + " \\b0\\cell";
        partial_rtf_text += " \\qr \\fs16 " + ((getvalmat(dati, "txt3lmin") == "") ? "" : getvalmat(dati, "txt3lmin")) + " \\b0\\cell";
        partial_rtf_text += " \\qr \\fs16 " + ((getvalmat(dati, "txt3lmax") == "") ? "" : getvalmat(dati, "txt3lmax")) + " \\b0\\cell";
        partial_rtf_text += " \\qc \\fs16 \\f1 " + ((getvalmat(dati, "chk3") == "") ? checkbox_Cheched : ((Convert.ToBoolean(getvalmat(dati, "chk3")) == true) ? checkbox_Cheched : checkbox_UnCheched)) + " \\f0 \\b0\\cell";

        partial_rtf_text += finerigaTP;

        partial_rtf_text += iniziorigaTP + "\n" + colore3 + bordi + cell1m + colore3 + bordi + cell2m + colore3 + bordi + cell3m + colore3 + bordi + cell4m + colore3 + bordi + cell5m + colore3 + bordi + cell6m + colore3 + bordi + cell7m + inizioriga2;

        partial_rtf_text += " \\ql \\fs16 Risultato operativo \\b0\\cell";
        partial_rtf_text += " \\qr \\fs16 " + ((getvalmat(dati, "txt14") == "") ? "" : getvalmat(dati, "txt14")) + " \\b0\\cell";
        partial_rtf_text += " \\qc \\fs16 " + ((getvalmat(dati, "txt14_p_min") == "") ? "" : getvalmat(dati, "txt14_p_min")) + " \\b0\\cell";
        partial_rtf_text += " \\qc \\fs16 " + ((getvalmat(dati, "txt14_p_max") == "") ? "" : getvalmat(dati, "txt14_p_max")) + " \\b0\\cell";
        partial_rtf_text += " \\qr \\fs16 " + ((getvalmat(dati, "txt14lmin") == "") ? "" : getvalmat(dati, "txt14lmin")) + " \\b0\\cell";
        partial_rtf_text += " \\qr \\fs16 " + ((getvalmat(dati, "txt14lmax") == "") ? "" : getvalmat(dati, "txt14lmax")) + " \\b0\\cell";
        partial_rtf_text += " \\qc \\fs16 \\f1 " + ((getvalmat(dati, "chk14") == "") ? checkbox_Cheched : ((Convert.ToBoolean(getvalmat(dati, "chk14")) == true) ? checkbox_Cheched : checkbox_UnCheched)) + " \\f0 \\b0\\cell";


        partial_rtf_text += finerigaTP;

        partial_rtf_text += iniziorigaTP + "\n" + colore3 + bordi + cell1m + colore3 + bordi + cell2m + colore3 + bordi + cell3m + colore3 + bordi + cell4m + colore3 + bordi + cell5m + colore3 + bordi + cell6m + colore3 + bordi + cell7m + inizioriga2;

        partial_rtf_text += " \\ql \\fs16 Risultati ante Imposte \\b0\\cell";
        partial_rtf_text += " \\qr \\fs16 " + ((getvalmat(dati, "txt4") == "") ? "" : getvalmat(dati, "txt4")) + " \\b0\\cell";
        partial_rtf_text += " \\qc \\fs16 " + ((getvalmat(dati, "txt4_p_min") == "") ? "" : getvalmat(dati, "txt4_p_min")) + " \\b0\\cell";
        partial_rtf_text += " \\qc \\fs16 " + ((getvalmat(dati, "txt4_p_max") == "") ? "" : getvalmat(dati, "txt4_p_max")) + " \\b0\\cell";
        partial_rtf_text += " \\qr \\fs16 " + ((getvalmat(dati, "txt4lmin") == "") ? "" : getvalmat(dati, "txt4lmin")) + " \\b0\\cell";
        partial_rtf_text += " \\qr \\fs16 " + ((getvalmat(dati, "txt4lmax") == "") ? "" : getvalmat(dati, "txt4lmax")) + " \\b0\\cell";
        partial_rtf_text += " \\qc \\fs16 \\f1 " + ((getvalmat(dati, "chk4") == "") ? checkbox_Cheched : ((Convert.ToBoolean(getvalmat(dati, "chk4")) == true) ? checkbox_Cheched : checkbox_UnCheched)) + " \\f0 \\b0\\cell";


        partial_rtf_text += finerigaTP;

        partial_rtf_text += "\\line\\pard\\bgdkdcross\\cfpat1\\shading59110\\tx2291\\par";

        #endregion

        /*partial_rtf_text += "\\line\\pard\\keepn\\b\\f0 " + "Dottrina Nazionale" + "\\b0 \\line \\par\n";

        #region DOTTRINA NAZIONALE

        partial_rtf_text += "\\pard\\keep";

        partial_rtf_text += iniziorigaTP + "\n" + colore3 + cell2m + colore3 + bordi + cell4m + colore3 + bordi + cell6m + inizioriga2;

        partial_rtf_text += "\\b \\qc \\b0\\cell";
        partial_rtf_text += "\\b \\qc Percentuali \\b0\\cell";
        partial_rtf_text += "\\b \\qc Limiti \\b0\\cell";

        partial_rtf_text += finerigaTP;

        partial_rtf_text += iniziorigaTP + "\n" + colore3 + cell2m + colore3 + bordi + cell3m + colore3 + bordi + cell4m + colore3 + bordi + cell5m + colore3 + bordi + cell6m + inizioriga2;

        partial_rtf_text += "\\b \\qc  \\b0\\cell";
        partial_rtf_text += "\\b \\qc Minima \\b0\\cell";
        partial_rtf_text += "\\b \\qc Massima \\b0\\cell";
        partial_rtf_text += "\\b \\qc Minimo \\b0\\cell";
        partial_rtf_text += "\\b \\qc Massimo \\b0\\cell";

        partial_rtf_text += finerigaTP;

        partial_rtf_text += iniziorigaTP + "\n" + colore3 + bordi + cell2m + colore3 + bordi + cell3m + colore3 + bordi + cell4m + colore3 + bordi + cell5m + colore3 + bordi + cell6m + inizioriga2;

        partial_rtf_text += "\\b \\ql Totale Attività \\b0\\cell";
        partial_rtf_text += "\\b \\qc 0,50% \\b0\\cell";
        partial_rtf_text += "\\b \\qc 1,00% \\b0\\cell";
        partial_rtf_text += "\\b \\qr " + ((getvalmat(dati, "txt1lmindn") == "") ? "" : getvalmat(dati, "txt1lmindn")) + " \\b0\\cell";
        partial_rtf_text += "\\b \\qr " + ((getvalmat(dati, "txt1lmaxdn") == "") ? "" : getvalmat(dati, "txt1lmaxdn")) + " \\b0\\cell";

        partial_rtf_text += finerigaTP;

        partial_rtf_text += iniziorigaTP + "\n" + colore3 + bordi + cell2m + colore3 + bordi + cell3m + colore3 + bordi + cell4m + colore3 + bordi + cell5m + colore3 + bordi + cell6m + inizioriga2;

        partial_rtf_text += "\\b \\ql Patrimonio Netto \\b0\\cell";
        partial_rtf_text += "\\b \\qc 1,00% \\b0\\cell";
        partial_rtf_text += "\\b \\qc 5,00% \\b0\\cell";
        partial_rtf_text += "\\b \\qr " + ((getvalmat(dati, "txt2lmindn") == "") ? "" : getvalmat(dati, "txt2lmindn")) + " \\b0\\cell";
        partial_rtf_text += "\\b \\qr " + ((getvalmat(dati, "txt2lmaxdn") == "") ? "" : getvalmat(dati, "txt2lmaxdn")) + " \\b0\\cell";

        partial_rtf_text += finerigaTP;

        partial_rtf_text += iniziorigaTP + "\n" + colore3 + bordi + cell2m + colore3 + bordi + cell3m + colore3 + bordi + cell4m + colore3 + bordi + cell5m + colore3 + bordi + cell6m + inizioriga2;

        partial_rtf_text += "\\b \\ql Valore della produzione \\b0\\cell";
        partial_rtf_text += "\\b \\qc 0,50% \\b0\\cell";
        partial_rtf_text += "\\b \\qc 1,00% \\b0\\cell";
        partial_rtf_text += "\\b \\qr " + ((getvalmat(dati, "txt3lmindn") == "") ? "" : getvalmat(dati, "txt3lmindn")) + " \\b0\\cell";
        partial_rtf_text += "\\b \\qr " + ((getvalmat(dati, "txt3lmaxdn") == "") ? "" : getvalmat(dati, "txt3lmaxdn")) + " \\b0\\cell";

        partial_rtf_text += finerigaTP;

        partial_rtf_text += iniziorigaTP + "\n" + colore3 + bordi + cell2m + colore3 + bordi + cell3m + colore3 + bordi + cell4m + colore3 + bordi + cell5m + colore3 + bordi + cell6m + inizioriga2;

        partial_rtf_text += "\\b \\ql Risultati ante Imposte \\b0\\cell";
        partial_rtf_text += "\\b \\qc 5,00% \\b0\\cell";
        partial_rtf_text += "\\b \\qc 10,00% \\b0\\cell";
        partial_rtf_text += "\\b \\qr " + ((getvalmat(dati, "txt4lmindn") == "") ? "" : getvalmat(dati, "txt4lmindn")) + " \\b0\\cell";
        partial_rtf_text += "\\b \\qr " + ((getvalmat(dati, "txt4lmaxdn") == "") ? "" : getvalmat(dati, "txt4lmaxdn")) + " \\b0\\cell";

        partial_rtf_text += finerigaTP;

        partial_rtf_text += "\\line\\pard\\bgdkdcross\\cfpat1\\shading59110\\tx2291\\par";

        #endregion

        partial_rtf_text += "\\page\\pard\\keepn\\b\\f0 " + "1° IPOTESI - limite di materialità - media fra tutti i minimi ed i massimi" + "\\b0 \\line \\par\n";
        */

        #region IPOTESI

        if ((getvalmat(dati, "rbtTipoMaterialitaPianificata1") != null && bool.Parse(getvalmat(dati, "rbtTipoMaterialitaPianificata1"))) || (getvalmat(dati, "rbtTipoMaterialitaPianificata1") == "" && getvalmat(dati, "rbtTipoMaterialitaPianificata2") == ""))
        {
          #region IPOTESI 1
          partial_rtf_text += "\\pard\\keep";

          partial_rtf_text += iniziorigaTP + "\n" + colore3 + cell3m + colore3 + cell4m + colore3 + bordi + cell5m + colore3 + bordi + cell6m + inizioriga2;

          partial_rtf_text += " \\ql \\fs20 Totali minimi / massimi \\fs20 \\b0\\cell";
          partial_rtf_text += " \\qc \\fs16  \\b0\\cell";
          partial_rtf_text += " \\qc \\fs16 " + ((getvalmat(dati, "txt5") == "") ? "" : getvalmat(dati, "txt5")) + " \\b0\\cell";
          partial_rtf_text += " \\qc \\fs16 " + ((getvalmat(dati, "txt6") == "") ? "" : getvalmat(dati, "txt6")) + " \\b0\\cell";

          partial_rtf_text += finerigaTP;

          partial_rtf_text += iniziorigaTP + "\n" + colore3 + cell3m + colore3 + cell4m + colore3 + bordi + cell6m + inizioriga2;

          partial_rtf_text += " \\ql \\fs20 MATERIALITA' - MEDIA fra minimi e massimi \\fs20 \\b0\\cell";
          partial_rtf_text += " \\qc \\fs16  \\b0\\cell";
          partial_rtf_text += " \\qc \\fs16 " + ((getvalmat(dati, "txt7") == "") ? "" : getvalmat(dati, "txt7")) + " \\b0\\cell";

          partial_rtf_text += finerigaTP;

          partial_rtf_text += iniziorigaTP + "\n" + colore3 + cell3m + colore3 + bordi + cell4m + colore3 + bordi + cell6m + inizioriga2;

          partial_rtf_text += " \\ql \\fs20 ERRORE TRASCURABILE \\fs20 \\b0\\cell";
          partial_rtf_text += " \\qc \\fs16 " + ((getvalmat(dati, "txt8") == "") ? "" : getvalmat(dati, "txt8")) + " \\b0\\cell";
          partial_rtf_text += " \\qc \\fs16 " + ((getvalmat(dati, "txt9") == "") ? "" : getvalmat(dati, "txt9")) + " \\b0\\cell";

          partial_rtf_text += finerigaTP;

          partial_rtf_text += iniziorigaTP + "\n" + colore3 + cell3m + colore3 + bordi + cell4m + colore3 + bordi + cell6m + inizioriga2;

          partial_rtf_text += " \\ql \\fs20 Materialità Operativa  \\fs20 \\b0\\cell";
          partial_rtf_text += " \\qc \\fs16 " + ((getvalmat(dati, "txt10") == "") ? "" : getvalmat(dati, "txt10")) + " \\b0\\cell";
          partial_rtf_text += " \\qc \\fs16 " + ((getvalmat(dati, "txt12") == "") ? "" : getvalmat(dati, "txt12")) + " \\b0\\cell";

          partial_rtf_text += finerigaTP;

          partial_rtf_text += "\\line\\pard\\bgdkdcross\\cfpat1\\shading59110\\tx2291\\par";

          #endregion

        }
        else if (getvalmat(dati, "rbtTipoMaterialitaPianificata2") != null && bool.Parse(getvalmat(dati, "rbtTipoMaterialitaPianificata2")))
        {
          #region IPOTESI 2

          #region IPOTESI 2 A

          partial_rtf_text += "\\pard\\keep";

          partial_rtf_text += iniziorigaTP + "\n" + colore3 + cell3m + colore3 + cell4m + colore2 + bordi + cell5m + colore2 + bordi + cell6m + inizioriga2;

          partial_rtf_text += " \\ql \\fs20 Totali minimi / massimi \\fs20 \\b0\\cell";
          partial_rtf_text += " \\qc \\fs16  \\b0\\cell";
          partial_rtf_text += " \\qc \\fs16 " + ((getvalmat(dati, "txt5_2sp") == "") ? "" : getvalmat(dati, "txt5_2sp")) + " \\b0\\cell";
          partial_rtf_text += " \\qc \\fs16 " + ((getvalmat(dati, "txt6_2sp") == "") ? "" : getvalmat(dati, "txt6_2sp")) + " \\b0\\cell";

          partial_rtf_text += finerigaTP;

          partial_rtf_text += iniziorigaTP + "\n" + colore3 + cell3m + colore3 + cell4m + colore2 + bordi + cell6m + inizioriga2;

          partial_rtf_text += " \\ql \\fs20 MATERIALITA' - MEDIA fra minimi e massimi \\fs20 \\b0\\cell";
          partial_rtf_text += " \\qc \\fs16  \\b0\\cell";
          partial_rtf_text += " \\qc \\fs16 " + ((getvalmat(dati, "txt7_2sp") == "") ? "" : getvalmat(dati, "txt7_2sp")) + " \\b0\\cell";

          partial_rtf_text += finerigaTP;

          partial_rtf_text += iniziorigaTP + "\n" + colore3 + cell3m + colore2 + bordi + cell4m + colore2 + bordi + cell6m + inizioriga2;

          partial_rtf_text += " \\ql \\fs20 ERRORE TRASCURABILE \\fs20 \\b0\\cell";
          partial_rtf_text += " \\qc \\fs16 " + ((getvalmat(dati, "txt8_2sp") == "") ? "" : getvalmat(dati, "txt8_2sp")) + " \\b0\\cell";
          partial_rtf_text += " \\qc \\fs16 " + ((getvalmat(dati, "txt9_2sp") == "") ? "" : getvalmat(dati, "txt9_2sp")) + " \\b0\\cell";

          partial_rtf_text += finerigaTP;

          partial_rtf_text += iniziorigaTP + "\n" + colore2 + cell3m + colore2 + bordi + cell4m + colore2 + bordi + cell6m + inizioriga2;

          partial_rtf_text += " \\ql \\fs20 Materialità Operativa  \\fs20 \\b0\\cell";
          partial_rtf_text += " \\qc \\fs16 " + ((getvalmat(dati, "txt10_2sp") == "") ? "" : getvalmat(dati, "txt10_2sp")) + " \\b0\\cell";
          partial_rtf_text += " \\qc \\fs16 " + ((getvalmat(dati, "txt12_2sp") == "") ? "" : getvalmat(dati, "txt12_2sp")) + " \\b0\\cell";

          partial_rtf_text += finerigaTP;

          partial_rtf_text += "\\line\\pard\\bgdkdcross\\cfpat1\\shading59110\\tx2291\\par";

          #endregion

          partial_rtf_text += "\\line ";

          #region IPOTESI 2 B

          partial_rtf_text += "\\pard\\keep";

          partial_rtf_text += iniziorigaTP + "\n" + colore3 + cell3m + colore3 + cell4m + colore4 + bordi + cell5m + colore4 + bordi + cell6m + inizioriga2;

          partial_rtf_text += " \\ql \\fs20 Totali minimi / massimi \\fs20 \\b0\\cell";
          partial_rtf_text += " \\q \\fs16c  \\b0\\cell";
          partial_rtf_text += " \\qc \\fs16 " + ((getvalmat(dati, "txt5_2ce") == "") ? "" : getvalmat(dati, "txt5_2ce")) + " \\b0\\cell";
          partial_rtf_text += " \\qc \\fs16 " + ((getvalmat(dati, "txt6_2ce") == "") ? "" : getvalmat(dati, "txt6_2ce")) + " \\b0\\cell";

          partial_rtf_text += finerigaTP;

          partial_rtf_text += iniziorigaTP + "\n" + colore3 + cell3m + colore3 + cell4m + colore4 + bordi + cell6m + inizioriga2;

          partial_rtf_text += " \\ql \\fs20 MATERIALITA' - MEDIA fra minimi e massimi \\fs20 \\b0\\cell";
          partial_rtf_text += " \\qc \\fs16  \\b0\\cell";
          partial_rtf_text += " \\qc \\fs16 " + ((getvalmat(dati, "txt7_2ce") == "") ? "" : getvalmat(dati, "txt7_2ce")) + " \\b0\\cell";

          partial_rtf_text += finerigaTP;

          partial_rtf_text += iniziorigaTP + "\n" + colore3 + cell3m + colore4 + bordi + cell4m + colore4 + bordi + cell6m + inizioriga2;

          partial_rtf_text += " \\ql \\fs20 ERRORE TRASCURABILE \\fs20 \\b0\\cell";
          partial_rtf_text += " \\qc \\fs16 " + ((getvalmat(dati, "txt8_2ec") == "") ? "" : getvalmat(dati, "txt8_2ec")) + " \\b0\\cell";
          partial_rtf_text += " \\qc \\fs16 " + ((getvalmat(dati, "txt9_2ce") == "") ? "" : getvalmat(dati, "txt9_2ce")) + " \\b0\\cell";

          partial_rtf_text += finerigaTP;

          partial_rtf_text += iniziorigaTP + "\n" + colore4 + cell3m + colore4 + bordi + cell4m + colore4 + bordi + cell6m + inizioriga2;

          partial_rtf_text += " \\ql \\fs20 Materialità Operativa  \\fs20 \\b0\\cell";
          partial_rtf_text += " \\qc \\fs16 " + ((getvalmat(dati, "txt10_2ec") == "") ? "" : getvalmat(dati, "txt10_2ec")) + " \\b0\\cell";
          partial_rtf_text += " \\qc \\fs16 " + ((getvalmat(dati, "txt12_2ce") == "") ? "" : getvalmat(dati, "txt12_2ce")) + " \\b0\\cell";

          partial_rtf_text += finerigaTP;

          partial_rtf_text += "\\line\\pard\\bgdkdcross\\cfpat1\\shading59110\\tx2291\\par";

          #endregion

          #endregion

        }

        #endregion

      }

      //DA BILANCIO
      if (EsisteMaterialitaDaBilancio == true)
      {
        partial_rtf_text += "\\pard\\keep";

        if (ID == "314")
        {
          partial_rtf_text += " \\b Materialità CONSOLIDATO \\b0 \\line \\line";
        }
        else
        {
          partial_rtf_text += " \\b Materialità BILANCIO \\b0 \\line \\line";
        }

        partial_rtf_text += "\\par";

        partial_rtf_text += "\\pard\\keep";

        partial_rtf_text += iniziorigaTP + "\n" + colore3 + bordi + cell1m + colore3 + bordi + cell2m + colore3 + bordi + cell4m + colore3 + bordi + cell6m + colore3 + bordi + cell7m + inizioriga2;

        partial_rtf_text += " \\qc \\fs16 Parametri di riferimento \\b0\\cell";
        partial_rtf_text += " \\qc \\fs16 Valori di bilancio \\b0\\cell";
        partial_rtf_text += " \\qc \\fs16 Percentuali \\b0\\cell";
        partial_rtf_text += " \\qc \\fs16 Limiti \\b0\\cell";
        partial_rtf_text += " \\qc \\fs16 Incl. \\b0\\cell";

        partial_rtf_text += finerigaTP;

        partial_rtf_text += iniziorigaTP + "\n" + colore3 + bordi + cell1m + colore3 + bordi + cell2m + colore3 + bordi + cell3m + colore3 + bordi + cell4m + colore3 + bordi + cell5m + colore3 + bordi + cell6m + colore3 + bordi + cell7m + inizioriga2;

        partial_rtf_text += " \\qc \\fs16  \\b0\\cell";
        partial_rtf_text += " \\qc \\fs16  \\b0\\cell";
        partial_rtf_text += " \\qc \\fs16 Minima \\b0\\cell";
        partial_rtf_text += " \\qc \\fs16 Massima \\b0\\cell";
        partial_rtf_text += " \\qc \\fs16 Minimo \\b0\\cell";
        partial_rtf_text += " \\qc \\fs16 Massimo \\b0\\cell";
        partial_rtf_text += " \\qc \\fs16  \\b0\\cell";

        partial_rtf_text += finerigaTP;

        partial_rtf_text += iniziorigaTP + "\n" + colore3 + bordi + cell1m + colore3 + bordi + cell2m + colore3 + bordi + cell3m + colore3 + bordi + cell4m + colore3 + bordi + cell5m + colore3 + bordi + cell6m + colore3 + bordi + cell7m + inizioriga2;

        partial_rtf_text += " \\ql \\fs16 Totale Attività \\b0\\cell";
        partial_rtf_text += " \\qr \\fs16 " + ((getvalmat(dati, "txt1BILANCIO") == "") ? "" : getvalmat(dati, "txt1BILANCIO")) + " \\b0\\cell";
        partial_rtf_text += " \\qc \\fs16 " + ((getvalmat(dati, "txt1_p_minBILANCIO") == "") ? "" : getvalmat(dati, "txt1_p_minBILANCIO")) + " \\b0\\cell";
        partial_rtf_text += " \\qc \\fs16 " + ((getvalmat(dati, "txt1_p_maxBILANCIO") == "") ? "" : getvalmat(dati, "txt1_p_maxBILANCIO")) + " \\b0\\cell";
        partial_rtf_text += " \\qr \\fs16 " + ((getvalmat(dati, "txt1minBILANCIO") == "") ? "" : getvalmat(dati, "txt1minBILANCIO")) + " \\b0\\cell";
        partial_rtf_text += " \\qr \\fs16 " + ((getvalmat(dati, "txt1lmaxBILANCIO") == "") ? "" : getvalmat(dati, "txt1lmaxBILANCIO")) + " \\b0\\cell";
        partial_rtf_text += " \\qc \\fs16 \\f1 " + ((getvalmat(dati, "chk1BILANCIO") == "") ? checkbox_Cheched : ((Convert.ToBoolean(getvalmat(dati, "chk1BILANCIO")) == true) ? checkbox_Cheched : checkbox_UnCheched)) + " \\f0 \\b0\\cell";

        partial_rtf_text += finerigaTP;

        partial_rtf_text += iniziorigaTP + "\n" + colore3 + bordi + cell1m + colore3 + bordi + cell2m + colore3 + bordi + cell3m + colore3 + bordi + cell4m + colore3 + bordi + cell5m + colore3 + bordi + cell6m + colore3 + bordi + cell7m + inizioriga2;

        partial_rtf_text += " \\ql \\fs16 Patrimonio Netto \\b0\\cell";
        partial_rtf_text += " \\qr \\fs16 " + ((getvalmat(dati, "txt2BILANCIO") == "") ? "" : getvalmat(dati, "txt2BILANCIO")) + " \\b0\\cell";
        partial_rtf_text += " \\qc \\fs16 " + ((getvalmat(dati, "txt2_p_minBILANCIO") == "") ? "" : getvalmat(dati, "txt2_p_minBILANCIO")) + " \\b0\\cell";
        partial_rtf_text += " \\qc \\fs16 " + ((getvalmat(dati, "txt2_p_maxBILANCIO") == "") ? "" : getvalmat(dati, "txt2_p_maxBILANCIO")) + " \\b0\\cell";
        partial_rtf_text += " \\qr \\fs16 " + ((getvalmat(dati, "txt2lminBILANCIO") == "") ? "" : getvalmat(dati, "txt2lminBILANCIO")) + " \\b0\\cell";
        partial_rtf_text += " \\qr \\fs16 " + ((getvalmat(dati, "txt2lmaxBILANCIO") == "") ? "" : getvalmat(dati, "txt2lmaxBILANCIO")) + " \\b0\\cell";
        partial_rtf_text += " \\qc \\fs16 \\f1 " + ((getvalmat(dati, "chk2BILANCIO") == "") ? checkbox_Cheched : ((Convert.ToBoolean(getvalmat(dati, "chk2BILANCIO")) == true) ? checkbox_Cheched : checkbox_UnCheched)) + " \\f0 \\b0\\cell";

        partial_rtf_text += finerigaTP;

        partial_rtf_text += iniziorigaTP + "\n" + colore3 + bordi + cell1m + colore3 + bordi + cell2m + colore3 + bordi + cell3m + colore3 + bordi + cell4m + colore3 + bordi + cell5m + colore3 + bordi + cell6m + colore3 + bordi + cell7m + inizioriga2;

        partial_rtf_text += " \\ql \\fs16 Valore della produzione \\b0\\cell";
        partial_rtf_text += " \\qr \\fs16 " + ((getvalmat(dati, "txt3BILANCIO") == "") ? "" : getvalmat(dati, "txt3BILANCIO")) + " \\b0\\cell";
        partial_rtf_text += " \\qc \\fs16 " + ((getvalmat(dati, "txt3_p_minBILANCIO") == "") ? "" : getvalmat(dati, "txt3_p_minBILANCIO")) + " \\b0\\cell";
        partial_rtf_text += " \\qc \\fs16 " + ((getvalmat(dati, "txt3_p_maxBILANCIO") == "") ? "" : getvalmat(dati, "txt3_p_maxBILANCIO")) + " \\b0\\cell";
        partial_rtf_text += " \\qr \\fs16 " + ((getvalmat(dati, "txt3lminBILANCIO") == "") ? "" : getvalmat(dati, "txt3lminBILANCIO")) + " \\b0\\cell";
        partial_rtf_text += " \\qr \\fs16 " + ((getvalmat(dati, "txt3lmaxBILANCIO") == "") ? "" : getvalmat(dati, "txt3lmaxBILANCIO")) + " \\b0\\cell";
        partial_rtf_text += " \\qc  \\fs16\\f1 " + ((getvalmat(dati, "chk3BILANCIO") == "") ? checkbox_Cheched : ((Convert.ToBoolean(getvalmat(dati, "chk3BILANCIO")) == true) ? checkbox_Cheched : checkbox_UnCheched)) + " \\f0 \\b0\\cell";

        partial_rtf_text += finerigaTP;

        partial_rtf_text += iniziorigaTP + "\n" + colore3 + bordi + cell1m + colore3 + bordi + cell2m + colore3 + bordi + cell3m + colore3 + bordi + cell4m + colore3 + bordi + cell5m + colore3 + bordi + cell6m + colore3 + bordi + cell7m + inizioriga2;

        partial_rtf_text += " \\ql \\fs16 Risultato operativo \\b0\\cell";
        partial_rtf_text += " \\qr \\fs16 " + ((getvalmat(dati, "txt14BILANCIO") == "") ? "" : getvalmat(dati, "txt14BILANCIO")) + " \\b0\\cell";
        partial_rtf_text += " \\qc \\fs16 " + ((getvalmat(dati, "txt14_p_minBILANCIO") == "") ? "" : getvalmat(dati, "txt14_p_minBILANCIO")) + " \\b0\\cell";
        partial_rtf_text += " \\qc \\fs16 " + ((getvalmat(dati, "txt14_p_maxBILANCIO") == "") ? "" : getvalmat(dati, "txt14_p_maxBILANCIO")) + " \\b0\\cell";
        partial_rtf_text += " \\qr \\fs16 " + ((getvalmat(dati, "txt14lminBILANCIO") == "") ? "" : getvalmat(dati, "txt14lminBILANCIO")) + " \\b0\\cell";
        partial_rtf_text += " \\qr \\fs16 " + ((getvalmat(dati, "txt14lmaxBILANCIO") == "") ? "" : getvalmat(dati, "txt14lmaxBILANCIO")) + " \\b0\\cell";
        partial_rtf_text += " \\qc \\f1 " + ((getvalmat(dati, "chk14BILANCIO") == "") ? checkbox_Cheched : ((Convert.ToBoolean(getvalmat(dati, "chk14BILANCIO")) == true) ? checkbox_Cheched : checkbox_UnCheched)) + " \\f0 \\b0\\cell";

        partial_rtf_text += finerigaTP;

        partial_rtf_text += iniziorigaTP + "\n" + colore3 + bordi + cell1m + colore3 + bordi + cell2m + colore3 + bordi + cell3m + colore3 + bordi + cell4m + colore3 + bordi + cell5m + colore3 + bordi + cell6m + colore3 + bordi + cell7m + inizioriga2;

        partial_rtf_text += " \\ql \\fs16 Risultati ante Imposte \\b0\\cell";
        partial_rtf_text += " \\qr \\fs16 " + ((getvalmat(dati, "txt4BILANCIO") == "") ? "" : getvalmat(dati, "txt4BILANCIO")) + " \\b0\\cell";
        partial_rtf_text += " \\qc \\fs16 " + ((getvalmat(dati, "txt4_p_minBILANCIO") == "") ? "" : getvalmat(dati, "txt4_p_minBILANCIO")) + " \\b0\\cell";
        partial_rtf_text += " \\qc \\fs16 " + ((getvalmat(dati, "txt4_p_maxBILANCIO") == "") ? "" : getvalmat(dati, "txt4_p_maxBILANCIO")) + " \\b0\\cell";
        partial_rtf_text += " \\qr \\fs16 " + ((getvalmat(dati, "txt4lminBILANCIO") == "") ? "" : getvalmat(dati, "txt4lminBILANCIO")) + " \\b0\\cell";
        partial_rtf_text += " \\qr \\fs16 " + ((getvalmat(dati, "txt4lmaxBILANCIO") == "") ? "" : getvalmat(dati, "txt4lmaxBILANCIO")) + " \\b0\\cell";
        partial_rtf_text += " \\qc \\f1 " + ((getvalmat(dati, "chk4BILANCIO") == "") ? checkbox_Cheched : ((Convert.ToBoolean(getvalmat(dati, "chk4BILANCIO")) == true) ? checkbox_Cheched : checkbox_UnCheched)) + " \\f0 \\b0\\cell";

        partial_rtf_text += finerigaTP;

        partial_rtf_text += "\\line\\pard\\bgdkdcross\\cfpat1\\shading59110\\tx2291\\par";


        #region IPOTESI

        if ((getvalmat(dati, "rbtTipoMaterialitaBilancio1") != null && bool.Parse(getvalmat(dati, "rbtTipoMaterialitaBilancio1"))) || (getvalmat(dati, "rbtTipoMaterialitaPianificata1") == "" && getvalmat(dati, "rbtTipoMaterialitaBilancio2") == ""))
        {
          #region IPOTESI 1

          partial_rtf_text += "\\pard\\keep";

          partial_rtf_text += iniziorigaTP + "\n" + colore3 + cell3m + colore3 + cell4m + colore3 + bordi + cell5m + colore3 + bordi + cell6m + inizioriga2;

          partial_rtf_text += " \\ql \\fs20 Totali minimi / massimi \\fs20 \\b0\\cell";
          partial_rtf_text += " \\qc \\fs16  \\b0\\cell";
          partial_rtf_text += " \\qc \\fs16 " + ((getvalmat(dati, "txt5BILANCIO") == "") ? "" : getvalmat(dati, "txt5BILANCIO")) + " \\b0\\cell";
          partial_rtf_text += " \\qc \\fs16 " + ((getvalmat(dati, "txt6BILANCIO") == "") ? "" : getvalmat(dati, "txt6BILANCIO")) + " \\b0\\cell";

          partial_rtf_text += finerigaTP;

          partial_rtf_text += iniziorigaTP + "\n" + colore3 + cell3m + colore3 + cell4m + colore3 + bordi + cell6m + inizioriga2;

          partial_rtf_text += " \\ql \\fs20 MATERIALITA' - MEDIA fra minimi e massimi \\fs20 \\b0\\cell";
          partial_rtf_text += " \\qc \\fs16  \\b0\\cell";
          partial_rtf_text += " \\qc \\fs16 " + ((getvalmat(dati, "txt7BILANCIO") == "") ? "" : getvalmat(dati, "txt7BILANCIO")) + " \\b0\\cell";

          partial_rtf_text += finerigaTP;

          partial_rtf_text += iniziorigaTP + "\n" + colore3 + cell3m + colore3 + bordi + cell4m + colore3 + bordi + cell6m + inizioriga2;

          partial_rtf_text += " \\ql \\fs20 ERRORE TRASCURABILE \\fs20 \\b0\\cell";
          partial_rtf_text += " \\qc \\fs16 " + ((getvalmat(dati, "txt8BILANCIO") == "") ? "" : getvalmat(dati, "txt8BILANCIO")) + " \\b0\\cell";
          partial_rtf_text += " \\qc \\fs16 " + ((getvalmat(dati, "txt9BILANCIO") == "") ? "" : getvalmat(dati, "txt9BILANCIO")) + " \\b0\\cell";

          partial_rtf_text += finerigaTP;

          partial_rtf_text += iniziorigaTP + "\n" + colore3 + cell3m + colore3 + bordi + cell4m + colore3 + bordi + cell6m + inizioriga2;

          partial_rtf_text += " \\ql \\fs20 Materialità Operativa  \\fs20 \\b0\\cell";
          partial_rtf_text += " \\qc \\fs16 " + ((getvalmat(dati, "txt10BILANCIO") == "") ? "" : getvalmat(dati, "txt10BILANCIO")) + " \\b0\\cell";
          partial_rtf_text += " \\qc \\fs16 " + ((getvalmat(dati, "txt12BILANCIO") == "") ? "" : getvalmat(dati, "txt12BILANCIO")) + " \\b0\\cell";

          partial_rtf_text += finerigaTP;

          partial_rtf_text += "\\line\\pard\\bgdkdcross\\cfpat1\\shading59110\\tx2291\\par";

          #endregion

        }
        else if (getvalmat(dati, "rbtTipoMaterialitaBilancio2") != null && bool.Parse(getvalmat(dati, "rbtTipoMaterialitaBilancio2")))
        {
          #region IPOTESI 2
          partial_rtf_text += "\\line\\pard\\bgdkdcross\\cfpat1\\shading59110\\tx2291\\par";

          partial_rtf_text += "\\pard\\keep";

          partial_rtf_text += iniziorigaTP + "\n" + colore3 + cell3m + colore3 + cell4m + colore2 + bordi + cell5m + colore2 + bordi + cell6m + inizioriga2;

          partial_rtf_text += " \\ql \\fs20 Totali minimi / massimi \\fs20 \\b0\\cell";
          partial_rtf_text += " \\qc  \\b0\\cell";
          partial_rtf_text += " \\qc \\fs16 " + ((getvalmat(dati, "txt5_2spBILANCIO") == "") ? "" : getvalmat(dati, "txt5_2spBILANCIO")) + " \\b0\\cell";
          partial_rtf_text += " \\qc \\fs16 " + ((getvalmat(dati, "txt6_2spBILANCIO") == "") ? "" : getvalmat(dati, "txt6_2spBILANCIO")) + " \\b0\\cell";

          partial_rtf_text += finerigaTP;

          partial_rtf_text += iniziorigaTP + "\n" + colore3 + cell3m + colore3 + cell4m + colore2 + bordi + cell6m + inizioriga2;

          partial_rtf_text += " \\ql \\fs20 MATERIALITA' - MEDIA fra minimi e massimi \\fs20 \\b0\\cell";
          partial_rtf_text += " \\qc  \\b0\\cell";
          partial_rtf_text += " \\qc \\fs16 " + ((getvalmat(dati, "txt7_2spBILANCIO") == "") ? "" : getvalmat(dati, "txt7_2spBILANCIO")) + " \\b0\\cell";

          partial_rtf_text += finerigaTP;

          partial_rtf_text += iniziorigaTP + "\n" + colore3 + cell3m + colore2 + bordi + cell4m + colore2 + bordi + cell6m + inizioriga2;

          partial_rtf_text += " \\ql \\fs20 ERRORE TRASCURABILE \\fs20 \\b0\\cell";
          partial_rtf_text += " \\qc " + ((getvalmat(dati, "txt8_2spBILANCIO") == "") ? "" : getvalmat(dati, "txt8_2spBILANCIO")) + " \\b0\\cell";
          partial_rtf_text += " \\qc \\fs16 " + ((getvalmat(dati, "txt9_2spBILANCIO") == "") ? "" : getvalmat(dati, "txt9_2spBILANCIO")) + " \\b0\\cell";

          partial_rtf_text += finerigaTP;

          partial_rtf_text += iniziorigaTP + "\n" + colore2 + cell3m + colore2 + bordi + cell4m + colore2 + bordi + cell6m + inizioriga2;

          partial_rtf_text += " \\ql \\fs20 Materialità Operativa  \\fs20 \\b0\\cell";
          partial_rtf_text += " \\qc " + ((getvalmat(dati, "txt10_2spBILANCIO") == "") ? "" : getvalmat(dati, "txt10_2spBILANCIO")) + " \\b0\\cell";
          partial_rtf_text += " \\qc \\fs16 " + ((getvalmat(dati, "txt12_2spBILANCIO") == "") ? "" : getvalmat(dati, "txt12_2spBILANCIO")) + " \\b0\\cell";

          partial_rtf_text += finerigaTP;

          partial_rtf_text += "\\line\\pard\\bgdkdcross\\cfpat1\\shading59110\\tx2291\\par";

          partial_rtf_text += "\\line ";

          partial_rtf_text += "\\pard\\keep";

          partial_rtf_text += iniziorigaTP + "\n" + colore3 + cell3m + colore3 + cell4m + colore4 + bordi + cell5m + colore4 + bordi + cell6m + inizioriga2;

          partial_rtf_text += " \\ql \\fs20 Totali minimi / massimi \\fs20 \\b0\\cell";
          partial_rtf_text += " \\qc  \\b0\\cell";
          partial_rtf_text += " \\qc \\fs16 " + ((getvalmat(dati, "txt5_2ceBILANCIO") == "") ? "" : getvalmat(dati, "txt5_2ceBILANCIO")) + " \\b0\\cell";
          partial_rtf_text += " \\qc \\fs16 " + ((getvalmat(dati, "txt6_2ceBILANCIO") == "") ? "" : getvalmat(dati, "txt6_2ceBILANCIO")) + " \\b0\\cell";

          partial_rtf_text += finerigaTP;

          partial_rtf_text += iniziorigaTP + "\n" + colore3 + cell3m + colore3 + cell4m + colore4 + bordi + cell6m + inizioriga2;

          partial_rtf_text += " \\ql \\fs20 MATERIALITA' - MEDIA fra minimi e massimi \\fs20 \\b0\\cell";
          partial_rtf_text += " \\qc  \\b0\\cell";
          partial_rtf_text += " \\qc \\fs16 " + ((getvalmat(dati, "txt7_2ceBILANCIO") == "") ? "" : getvalmat(dati, "txt7_2ceBILANCIO")) + " \\b0\\cell";

          partial_rtf_text += finerigaTP;

          partial_rtf_text += iniziorigaTP + "\n" + colore3 + cell3m + colore4 + bordi + cell4m + colore4 + bordi + cell6m + inizioriga2;

          partial_rtf_text += " \\ql \\fs20 ERRORE TRASCURABILE \\fs20 \\b0\\cell";
          partial_rtf_text += " \\qc \\fs16 " + ((getvalmat(dati, "txt8_2ecBILANCIO") == "") ? "" : getvalmat(dati, "txt8_2ecBILANCIO")) + " \\b0\\cell";
          partial_rtf_text += " \\qc \\fs16 " + ((getvalmat(dati, "txt9_2ceBILANCIO") == "") ? "" : getvalmat(dati, "txt9_2ceBILANCIO")) + " \\b0\\cell";

          partial_rtf_text += finerigaTP;

          partial_rtf_text += iniziorigaTP + "\n" + colore4 + cell3m + colore4 + bordi + cell4m + colore4 + bordi + cell6m + inizioriga2;

          partial_rtf_text += " \\ql \\fs20 Materialità Operativa  \\fs20 \\b0\\cell";
          partial_rtf_text += " \\qc \\fs16 " + ((getvalmat(dati, "txt10_2ecBILANCIO") == "") ? "" : getvalmat(dati, "txt10_2ecBILANCIO")) + " \\b0\\cell";
          partial_rtf_text += " \\qc \\fs16 " + ((getvalmat(dati, "txt12_2ceBILANCIO") == "") ? "" : getvalmat(dati, "txt12_2ceBILANCIO")) + " \\b0\\cell";

          partial_rtf_text += finerigaTP;

          partial_rtf_text += "\\line\\pard\\bgdkdcross\\cfpat1\\shading59110\\tx2291\\par";
          #endregion
        }

        #endregion


      }

      if (ID == "314")
      {
        string cell1ar = "\\clvertalc\\cellx3000";
        string cell3ar = "\\clvertalc\\cellx5800";
        string cell5ar = "\\clvertalc\\cellx8600";

        partial_rtf_text += " \\line \\pard\\keepn\\b\\f0 Ripartizione delle Materialità fa le COMPONENTI:\\b0 \\line \\par\n";

        partial_rtf_text += "\\pard\\keep";

        partial_rtf_text += iniziorigaTP + "\n" + colore2 + bordi + cell1ar + colore2 + bordi + cell3ar + colore2 + bordi + cell5ar + inizioriga2;

        partial_rtf_text += "\\b \\qc \\fs16 COMPONENTI\\b0\\cell";
        partial_rtf_text += "\\b \\qc \\fs16 Materialità Operativa \\b0\\cell";
        partial_rtf_text += "\\b \\qc \\fs16 Errore Tollerabile \\b0\\cell";

        partial_rtf_text += finerigaTP;

        for (int j = 0; j < 1000; j++)
        {
          DataRow dt = null;
          dt = getrowmat(dati, j.ToString());
          if (dt != null)
          {


            partial_rtf_text += iniziorigaTP + "\n" + colore1 + bordi + cell1ar + colore1 + bordi + cell3ar + colore1 + bordi + cell5ar + inizioriga2;

            partial_rtf_text += " \\ql \\fs20 " + (((dt["name"].ToString() == "") ? "" : dt["name"].ToString())) + " \\cell";
            partial_rtf_text += " \\qr \\fs20 " + (((dt["ma"].ToString() == "") ? "" : dt["ma"].ToString())) + " \\cell";
            partial_rtf_text += " \\qr \\fs20 " + (((dt["et"].ToString() == "") ? "" : dt["et"].ToString())) + " \\cell";

            partial_rtf_text += finerigaTP;
          }
        }
      }
      return partial_rtf_text;
    }
    #endregion

    #region Materialita Ipotesi1

    private string getvalmat(DataTable dati, string id)
    {
      foreach (DataRow dtrow in dati.Rows)
      {
        if (dtrow["ID"].ToString().Trim() == id)
          return dtrow["value"].ToString();

      }
      return "";

    }
    private DataRow getrowmat(DataTable dati, string id)
    {
      foreach (DataRow dtrow in dati.Rows)
      {
        if (dtrow["ID"].ToString().Trim() == id)
          return dtrow;

      }
      return null;

    }


    private string AddMaterialitaIpotesi1(XmlNode nodeTree, string ID)
    {

      string partial_rtf_text = "";
      DataTable dati = cBusinessObjects.GetData(int.Parse(ID), typeof(Excel_LimiteMaterialitaSPCE), idcliente, idsessione, idtree);


      bool EsisteMaterialitaDaBilancio = false;

      if (getvalmat(dati, "txt1BILANCIO") != "")
      {
        EsisteMaterialitaDaBilancio = true;
      }

      //if (ID != "314")
      {
        #region parametri di riferimento

        if (EsisteMaterialitaDaBilancio == true)
        {
          partial_rtf_text += "\\pard\\keep";

          if (ID == "314")
          {
            partial_rtf_text += " \\b Materialità TOTALE AGGREGATO \\b0 \\line \\line";
          }
          else
          {
            partial_rtf_text += " \\b Materialità PIANIFICATA \\b0 \\line \\line";
          }

          partial_rtf_text += "\\par";
        }

        partial_rtf_text += "\\pard\\keep";

        partial_rtf_text += iniziorigaTP + "\n" + colore3 + bordi + cell1m + colore3 + bordi + cell2m + colore3 + bordi + cell4m + colore3 + bordi + cell6m + colore3 + bordi + cell7m + inizioriga2;

        partial_rtf_text += " \\qc \\fs16 Parametri di riferimento \\b0\\cell";
        partial_rtf_text += " \\qc \\fs16 Valori di bilancio \\b0\\cell";
        partial_rtf_text += " \\qc \\fs16 Percentuali \\b0\\cell";
        partial_rtf_text += " \\qc \\fs16 Limiti \\b0\\cell";
        partial_rtf_text += " \\qc \\fs16 Incl. \\b0\\cell";

        partial_rtf_text += finerigaTP;

        partial_rtf_text += iniziorigaTP + "\n" + colore3 + bordi + cell1m + colore3 + bordi + cell2m + colore3 + bordi + cell3m + colore3 + bordi + cell4m + colore3 + bordi + cell5m + colore3 + bordi + cell6m + colore3 + bordi + cell7m + inizioriga2;

        partial_rtf_text += " \\qc \\fs16  \\b0\\cell";
        partial_rtf_text += " \\qc \\fs16  \\b0\\cell";
        partial_rtf_text += " \\qc \\fs16 Minima \\b0\\cell";
        partial_rtf_text += " \\qc \\fs16 Massima \\b0\\cell";
        partial_rtf_text += " \\qc \\fs16 Minimo \\b0\\cell";
        partial_rtf_text += " \\qc \\fs16 Massimo \\b0\\cell";
        partial_rtf_text += " \\qc \\fs16  \\b0\\cell";

        partial_rtf_text += finerigaTP;

        partial_rtf_text += iniziorigaTP + "\n" + colore3 + bordi + cell1m + colore3 + bordi + cell2m + colore3 + bordi + cell3m + colore3 + bordi + cell4m + colore3 + bordi + cell5m + colore3 + bordi + cell6m + colore3 + bordi + cell7m + inizioriga2;

        partial_rtf_text += " \\ql \\fs16 Totale Attività \\b0\\cell";
        partial_rtf_text += " \\qr \\fs16 " + ((getvalmat(dati, "txt1") == "") ? "" : getvalmat(dati, "txt1")) + " \\b0\\cell";
        partial_rtf_text += " \\qc \\fs16 " + ((getvalmat(dati, "txt1_p_min") == "") ? "" : getvalmat(dati, "txt1_p_min")) + " \\b0\\cell";
        partial_rtf_text += " \\qc \\fs16 " + ((getvalmat(dati, "txt1_p_max") == "") ? "" : getvalmat(dati, "txt1_p_max")) + " \\b0\\cell";
        partial_rtf_text += " \\qr \\fs16 " + ((getvalmat(dati, "txt1min") == "") ? "" : getvalmat(dati, "txt1min")) + " \\b0\\cell";
        partial_rtf_text += " \\qr \\fs16 " + ((getvalmat(dati, "txt1lmax") == "") ? "" : getvalmat(dati, "txt1lmax")) + " \\b0\\cell";
        partial_rtf_text += " \\qc \\fs16 \\f1 " + ((getvalmat(dati, "chk1") == "") ? checkbox_Cheched : ((Convert.ToBoolean(getvalmat(dati, "chk1")) == true) ? checkbox_Cheched : checkbox_UnCheched)) + " \\f0 \\b0\\cell";

        partial_rtf_text += finerigaTP;

        partial_rtf_text += iniziorigaTP + "\n" + colore3 + bordi + cell1m + colore3 + bordi + cell2m + colore3 + bordi + cell3m + colore3 + bordi + cell4m + colore3 + bordi + cell5m + colore3 + bordi + cell6m + colore3 + bordi + cell7m + inizioriga2;

        partial_rtf_text += " \\ql \\fs16 Patrimonio Netto \\b0\\cell";
        partial_rtf_text += " \\qr \\fs16 " + ((getvalmat(dati, "txt2") == "") ? "" : getvalmat(dati, "txt2")) + " \\b0\\cell";
        partial_rtf_text += " \\qc \\fs16 " + ((getvalmat(dati, "txt2_p_min") == "") ? "" : getvalmat(dati, "txt2_p_min")) + " \\b0\\cell";
        partial_rtf_text += " \\qc \\fs16 " + ((getvalmat(dati, "txt2_p_max") == "") ? "" : getvalmat(dati, "txt2_p_max")) + " \\b0\\cell";
        partial_rtf_text += " \\qr \\fs16 " + ((getvalmat(dati, "txt2lmin") == "") ? "" : getvalmat(dati, "txt2lmin")) + " \\b0\\cell";
        partial_rtf_text += " \\qr \\fs16 " + ((getvalmat(dati, "txt2lmax") == "") ? "" : getvalmat(dati, "txt2lmax")) + " \\b0\\cell";
        partial_rtf_text += " \\qc \\fs16 \\f1 " + ((getvalmat(dati, "chk2") == "") ? checkbox_Cheched : ((Convert.ToBoolean(getvalmat(dati, "chk2")) == true) ? checkbox_Cheched : checkbox_UnCheched)) + " \\f0 \\b0\\cell";


        partial_rtf_text += finerigaTP;

        partial_rtf_text += iniziorigaTP + "\n" + colore3 + bordi + cell1m + colore3 + bordi + cell2m + colore3 + bordi + cell3m + colore3 + bordi + cell4m + colore3 + bordi + cell5m + colore3 + bordi + cell6m + colore3 + bordi + cell7m + inizioriga2;

        partial_rtf_text += " \\ql \\fs16 Ricavi dell'esercizio \\b0\\cell";
        partial_rtf_text += " \\qr \\fs16 " + ((getvalmat(dati, "txt3") == null) ? "" : getvalmat(dati, "txt3")) + " \\b0\\cell";
        partial_rtf_text += " \\qc \\fs16 " + ((getvalmat(dati, "txt3_p_min") == null) ? "" : getvalmat(dati, "txt3_p_min")) + " \\b0\\cell";
        partial_rtf_text += " \\qc \\fs16 " + ((getvalmat(dati, "txt3_p_max") == null) ? "" : getvalmat(dati, "txt3_p_max")) + " \\b0\\cell";
        partial_rtf_text += " \\qr \\fs16 " + ((getvalmat(dati, "txt3lmin") == null) ? "" : getvalmat(dati, "txt3lmin")) + " \\b0\\cell";
        partial_rtf_text += " \\qr \\fs16 " + ((getvalmat(dati, "txt3lmax") == null) ? "" : getvalmat(dati, "txt3lmax")) + " \\b0\\cell";
        partial_rtf_text += " \\qc \\fs16 \\f1 " + ((getvalmat(dati, "chk3") == null) ? checkbox_Cheched : ((Convert.ToBoolean(getvalmat(dati, "chk3")) == true) ? checkbox_Cheched : checkbox_UnCheched)) + " \\f0 \\b0\\cell";

        partial_rtf_text += finerigaTP;

        partial_rtf_text += iniziorigaTP + "\n" + colore3 + bordi + cell1m + colore3 + bordi + cell2m + colore3 + bordi + cell3m + colore3 + bordi + cell4m + colore3 + bordi + cell5m + colore3 + bordi + cell6m + colore3 + bordi + cell7m + inizioriga2;

        partial_rtf_text += " \\ql \\fs16 Risultati ante Imposte \\b0\\cell";
        partial_rtf_text += " \\qr \\fs16 " + ((getvalmat(dati, "txt4") == "") ? "" : getvalmat(dati, "txt4")) + " \\b0\\cell";
        partial_rtf_text += " \\qc \\fs16 " + ((getvalmat(dati, "txt4_p_min") == "") ? "" : getvalmat(dati, "txt4_p_min")) + " \\b0\\cell";
        partial_rtf_text += " \\qc \\fs16 " + ((getvalmat(dati, "txt4_p_max") == "") ? "" : getvalmat(dati, "txt4_p_max")) + " \\b0\\cell";
        partial_rtf_text += " \\qr \\fs16 " + ((getvalmat(dati, "txt4lmin") == "") ? "" : getvalmat(dati, "txt4lmin")) + " \\b0\\cell";
        partial_rtf_text += " \\qr \\fs16 " + ((getvalmat(dati, "txt4lmax") == "") ? "" : getvalmat(dati, "txt4lmax")) + " \\b0\\cell";
        partial_rtf_text += " \\qc \\fs16 \\f1 " + ((getvalmat(dati, "chk4") == "") ? checkbox_Cheched : ((Convert.ToBoolean(getvalmat(dati, "chk4")) == true) ? checkbox_Cheched : checkbox_UnCheched)) + " \\f0 \\b0\\cell";


        partial_rtf_text += finerigaTP;

        partial_rtf_text += "\\line\\pard\\bgdkdcross\\cfpat1\\shading59110\\tx2291\\par";

        #endregion

        /*partial_rtf_text += "\\line\\pard\\keepn\\b\\f0 " + "Dottrina Nazionale" + "\\b0 \\line \\par\n";

        #region DOTTRINA NAZIONALE

        partial_rtf_text += "\\pard\\keep";

        partial_rtf_text += iniziorigaTP + "\n" + colore3 + cell2m + colore3 + bordi + cell4m + colore3 + bordi + cell6m + inizioriga2;

        partial_rtf_text += "\\b \\qc \\b0\\cell";
        partial_rtf_text += "\\b \\qc Percentuali \\b0\\cell";
        partial_rtf_text += "\\b \\qc Limiti \\b0\\cell";

        partial_rtf_text += finerigaTP;

        partial_rtf_text += iniziorigaTP + "\n" + colore3 + cell2m + colore3 + bordi + cell3m + colore3 + bordi + cell4m + colore3 + bordi + cell5m + colore3 + bordi + cell6m + inizioriga2;

        partial_rtf_text += "\\b \\qc  \\b0\\cell";
        partial_rtf_text += "\\b \\qc Minima \\b0\\cell";
        partial_rtf_text += "\\b \\qc Massima \\b0\\cell";
        partial_rtf_text += "\\b \\qc Minimo \\b0\\cell";
        partial_rtf_text += "\\b \\qc Massimo \\b0\\cell";

        partial_rtf_text += finerigaTP;

        partial_rtf_text += iniziorigaTP + "\n" + colore3 + bordi + cell2m + colore3 + bordi + cell3m + colore3 + bordi + cell4m + colore3 + bordi + cell5m + colore3 + bordi + cell6m + inizioriga2;

        partial_rtf_text += "\\b \\ql Totale Attività \\b0\\cell";
        partial_rtf_text += "\\b \\qc 0,50% \\b0\\cell";
        partial_rtf_text += "\\b \\qc 1,00% \\b0\\cell";
        partial_rtf_text += "\\b \\qr " + ((getvalmat(dati, "txt1lmindn")=="") ? "" : getvalmat(dati, "txt1lmindn")) + " \\b0\\cell";
        partial_rtf_text += "\\b \\qr " + ((getvalmat(dati, "txt1lmaxdn")=="") ? "" : getvalmat(dati, "txt1lmaxdn")) + " \\b0\\cell";

        partial_rtf_text += finerigaTP;

        partial_rtf_text += iniziorigaTP + "\n" + colore3 + bordi + cell2m + colore3 + bordi + cell3m + colore3 + bordi + cell4m + colore3 + bordi + cell5m + colore3 + bordi + cell6m + inizioriga2;

        partial_rtf_text += "\\b \\ql Patrimonio Netto \\b0\\cell";
        partial_rtf_text += "\\b \\qc 1,00% \\b0\\cell";
        partial_rtf_text += "\\b \\qc 5,00% \\b0\\cell";
        partial_rtf_text += "\\b \\qr " + ((getvalmat(dati, "txt2lmindn")=="") ? "" : getvalmat(dati, "txt2lmindn")) + " \\b0\\cell";
        partial_rtf_text += "\\b \\qr " + ((getvalmat(dati, "txt2lmaxdn")=="") ? "" : getvalmat(dati, "txt2lmaxdn")) + " \\b0\\cell";

        partial_rtf_text += finerigaTP;

        partial_rtf_text += iniziorigaTP + "\n" + colore3 + bordi + cell2m + colore3 + bordi + cell3m + colore3 + bordi + cell4m + colore3 + bordi + cell5m + colore3 + bordi + cell6m + inizioriga2;

        partial_rtf_text += "\\b \\ql Ricavi dell'esercizio \\b0\\cell";
        partial_rtf_text += "\\b \\qc 0,50% \\b0\\cell";
        partial_rtf_text += "\\b \\qc 1,00% \\b0\\cell";
        partial_rtf_text += "\\b \\qr " + ((getvalmat(dati, "txt3lmindn")=="") ? "" : getvalmat(dati, "txt3lmindn")) + " \\b0\\cell";
        partial_rtf_text += "\\b \\qr " + ((getvalmat(dati, "txt3lmaxdn")=="") ? "" : getvalmat(dati, "txt3lmaxdn")) + " \\b0\\cell";

        partial_rtf_text += finerigaTP;

        partial_rtf_text += iniziorigaTP + "\n" + colore3 + bordi + cell2m + colore3 + bordi + cell3m + colore3 + bordi + cell4m + colore3 + bordi + cell5m + colore3 + bordi + cell6m + inizioriga2;

        partial_rtf_text += "\\b \\ql Risultati ante Imposte \\b0\\cell";
        partial_rtf_text += "\\b \\qc 5,00% \\b0\\cell";
        partial_rtf_text += "\\b \\qc 10,00% \\b0\\cell";
        partial_rtf_text += "\\b \\qr " + ((getvalmat(dati, "txt4lmindn")=="") ? "" : getvalmat(dati, "txt4lmindn")) + " \\b0\\cell";
        partial_rtf_text += "\\b \\qr " + ((getvalmat(dati, "txt4lmaxdn")=="") ? "" : getvalmat(dati, "txt4lmaxdn")) + " \\b0\\cell";

        partial_rtf_text += finerigaTP;

        partial_rtf_text += "\\line\\pard\\bgdkdcross\\cfpat1\\shading59110\\tx2291\\par";

        #endregion

        partial_rtf_text += "\\page\\pard\\keepn\\b\\f0 " + "1° IPOTESI - limite di materialità - media fra tutti i minimi ed i massimi" + "\\b0 \\line \\par\n";
        */

        #region IPOTESI

        partial_rtf_text += "\\pard\\keep";

        partial_rtf_text += iniziorigaTP + "\n" + colore3 + cell3m + colore3 + cell4m + colore3 + bordi + cell5m + colore3 + bordi + cell6m + inizioriga2;

        partial_rtf_text += " \\ql \\fs20 Totali minimi / massimi \\fs20 \\b0\\cell";
        partial_rtf_text += " \\qc \\fs16  \\b0\\cell";
        partial_rtf_text += " \\qc \\fs16 " + ((getvalmat(dati, "txt5") == "") ? "" : getvalmat(dati, "txt5")) + " \\b0\\cell";
        partial_rtf_text += " \\qc \\fs16 " + ((getvalmat(dati, "txt6") == "") ? "" : getvalmat(dati, "txt6")) + " \\b0\\cell";

        partial_rtf_text += finerigaTP;

        partial_rtf_text += iniziorigaTP + "\n" + colore3 + cell3m + colore3 + cell4m + colore3 + bordi + cell6m + inizioriga2;

        partial_rtf_text += " \\ql \\fs20 MATERIALITA' - MEDIA fra minimi e massimi \\fs20 \\b0\\cell";
        partial_rtf_text += " \\qc \\fs16  \\b0\\cell";
        partial_rtf_text += " \\qc \\fs16 " + ((getvalmat(dati, "txt7") == "") ? "" : getvalmat(dati, "txt7")) + " \\b0\\cell";

        partial_rtf_text += finerigaTP;

        partial_rtf_text += iniziorigaTP + "\n" + colore3 + cell3m + colore3 + bordi + cell4m + colore3 + bordi + cell6m + inizioriga2;

        partial_rtf_text += " \\ql \\fs20 ERRORE TRASCURABILE \\fs20 \\b0\\cell";
        partial_rtf_text += " \\qc \\fs16 " + ((getvalmat(dati, "txt8") == "") ? "" : getvalmat(dati, "txt8")) + " \\b0\\cell";
        partial_rtf_text += " \\qc \\fs16 " + ((getvalmat(dati, "txt9") == "") ? "" : getvalmat(dati, "txt9")) + " \\b0\\cell";

        partial_rtf_text += finerigaTP;

        partial_rtf_text += iniziorigaTP + "\n" + colore3 + cell3m + colore3 + bordi + cell4m + colore3 + bordi + cell6m + inizioriga2;

        partial_rtf_text += " \\ql \\fs20 Materialità Operativa  \\fs20 \\b0\\cell";
        partial_rtf_text += " \\qc \\fs16 " + ((getvalmat(dati, "txt10") == "") ? "" : getvalmat(dati, "txt10")) + " \\b0\\cell";
        partial_rtf_text += " \\qc \\fs16 " + ((getvalmat(dati, "txt12") == "") ? "" : getvalmat(dati, "txt12")) + " \\b0\\cell";

        partial_rtf_text += finerigaTP;

        partial_rtf_text += "\\line\\pard\\bgdkdcross\\cfpat1\\shading59110\\tx2291\\par";

        #endregion

      }

      //DA BILANCIO
      if (EsisteMaterialitaDaBilancio == true)
      {
        partial_rtf_text += "\\pard\\keep";

        if (ID == "314")
        {
          partial_rtf_text += " \\b Materialità CONSOLIDATO \\b0 \\line \\line";
        }
        else
        {
          partial_rtf_text += " \\b Materialità BILANCIO \\b0 \\line \\line";
        }

        partial_rtf_text += "\\par";

        partial_rtf_text += "\\pard\\keep";

        partial_rtf_text += iniziorigaTP + "\n" + colore3 + bordi + cell1m + colore3 + bordi + cell2m + colore3 + bordi + cell4m + colore3 + bordi + cell6m + colore3 + bordi + cell7m + inizioriga2;

        partial_rtf_text += " \\qc \\fs16 Parametri di riferimento \\b0\\cell";
        partial_rtf_text += " \\qc \\fs16 Valori di bilancio \\b0\\cell";
        partial_rtf_text += " \\qc \\fs16 Percentuali \\b0\\cell";
        partial_rtf_text += " \\qc \\fs16 Limiti \\b0\\cell";
        partial_rtf_text += " \\qc \\fs16 Incl. \\b0\\cell";

        partial_rtf_text += finerigaTP;

        partial_rtf_text += iniziorigaTP + "\n" + colore3 + bordi + cell1m + colore3 + bordi + cell2m + colore3 + bordi + cell3m + colore3 + bordi + cell4m + colore3 + bordi + cell5m + colore3 + bordi + cell6m + colore3 + bordi + cell7m + inizioriga2;

        partial_rtf_text += " \\qc \\fs16  \\b0\\cell";
        partial_rtf_text += " \\qc \\fs16  \\b0\\cell";
        partial_rtf_text += " \\qc \\fs16 Minima \\b0\\cell";
        partial_rtf_text += " \\qc \\fs16 Massima \\b0\\cell";
        partial_rtf_text += " \\qc \\fs16 Minimo \\b0\\cell";
        partial_rtf_text += " \\qc \\fs16 Massimo \\b0\\cell";
        partial_rtf_text += " \\qc \\fs16  \\b0\\cell";

        partial_rtf_text += finerigaTP;

        partial_rtf_text += iniziorigaTP + "\n" + colore3 + bordi + cell1m + colore3 + bordi + cell2m + colore3 + bordi + cell3m + colore3 + bordi + cell4m + colore3 + bordi + cell5m + colore3 + bordi + cell6m + colore3 + bordi + cell7m + inizioriga2;

        partial_rtf_text += " \\ql \\fs16 Totale Attività \\b0\\cell";
        partial_rtf_text += " \\qr \\fs16 " + ((getvalmat(dati, "txt1BILANCIO") == "") ? "" : getvalmat(dati, "txt1BILANCIO")) + " \\b0\\cell";
        partial_rtf_text += " \\qc \\fs16 " + ((getvalmat(dati, "txt1_p_minBILANCIO") == "") ? "" : getvalmat(dati, "txt1_p_minBILANCIO")) + " \\b0\\cell";
        partial_rtf_text += " \\qc \\fs16 " + ((getvalmat(dati, "txt1_p_maxBILANCIO") == "") ? "" : getvalmat(dati, "txt1_p_maxBILANCIO")) + " \\b0\\cell";
        partial_rtf_text += " \\qr \\fs16 " + ((getvalmat(dati, "txt1minBILANCIO") == "") ? "" : getvalmat(dati, "txt1minBILANCIO")) + " \\b0\\cell";
        partial_rtf_text += " \\qr \\fs16 " + ((getvalmat(dati, "txt1lmaxBILANCIO") == "") ? "" : getvalmat(dati, "txt1lmaxBILANCIO")) + " \\b0\\cell";
        partial_rtf_text += " \\qc \\fs16 \\f1 " + ((getvalmat(dati, "chk1BILANCIO") == "") ? checkbox_Cheched : ((Convert.ToBoolean(getvalmat(dati, "chk1BILANCIO")) == true) ? checkbox_Cheched : checkbox_UnCheched)) + " \\f0 \\b0\\cell";

        partial_rtf_text += finerigaTP;

        partial_rtf_text += iniziorigaTP + "\n" + colore3 + bordi + cell1m + colore3 + bordi + cell2m + colore3 + bordi + cell3m + colore3 + bordi + cell4m + colore3 + bordi + cell5m + colore3 + bordi + cell6m + colore3 + bordi + cell7m + inizioriga2;

        partial_rtf_text += " \\ql \\fs16 Patrimonio Netto \\b0\\cell";
        partial_rtf_text += " \\qr \\fs16 " + ((getvalmat(dati, "txt2BILANCIO") == "") ? "" : getvalmat(dati, "txt2BILANCIO")) + " \\b0\\cell";
        partial_rtf_text += " \\qc \\fs16 " + ((getvalmat(dati, "txt2_p_minBILANCIO") == "") ? "" : getvalmat(dati, "txt2_p_minBILANCIO")) + " \\b0\\cell";
        partial_rtf_text += " \\qc \\fs16 " + ((getvalmat(dati, "txt2_p_maxBILANCIO") == "") ? "" : getvalmat(dati, "txt2_p_maxBILANCIO")) + " \\b0\\cell";
        partial_rtf_text += " \\qr \\fs16 " + ((getvalmat(dati, "txt2lminBILANCIO") == "") ? "" : getvalmat(dati, "txt2lminBILANCIO")) + " \\b0\\cell";
        partial_rtf_text += " \\qr \\fs16 " + ((getvalmat(dati, "txt2lmaxBILANCIO") == "") ? "" : getvalmat(dati, "txt2lmaxBILANCIO")) + " \\b0\\cell";
        partial_rtf_text += " \\qc \\fs16 \\f1 " + ((getvalmat(dati, "chk2BILANCIO") == "") ? checkbox_Cheched : ((Convert.ToBoolean(getvalmat(dati, "chk2BILANCIO")) == true) ? checkbox_Cheched : checkbox_UnCheched)) + " \\f0 \\b0\\cell";

        partial_rtf_text += finerigaTP;

        partial_rtf_text += iniziorigaTP + "\n" + colore3 + bordi + cell1m + colore3 + bordi + cell2m + colore3 + bordi + cell3m + colore3 + bordi + cell4m + colore3 + bordi + cell5m + colore3 + bordi + cell6m + colore3 + bordi + cell7m + inizioriga2;

        partial_rtf_text += " \\ql \\fs16 Ricavi dell'esercizio \\b0\\cell";
        partial_rtf_text += " \\qr \\fs16 " + ((getvalmat(dati, "txt3BILANCIO") == "") ? "" : getvalmat(dati, "txt3BILANCIO")) + " \\b0\\cell";
        partial_rtf_text += " \\qc \\fs16 " + ((getvalmat(dati, "txt3_p_minBILANCIO") == "") ? "" : getvalmat(dati, "txt3_p_minBILANCIO")) + " \\b0\\cell";
        partial_rtf_text += " \\qc \\fs16 " + ((getvalmat(dati, "txt3_p_maxBILANCIO") == "") ? "" : getvalmat(dati, "txt3_p_maxBILANCIO")) + " \\b0\\cell";
        partial_rtf_text += " \\qr \\fs16 " + ((getvalmat(dati, "txt3lminBILANCIO") == "") ? "" : getvalmat(dati, "txt3lminBILANCIO")) + " \\b0\\cell";
        partial_rtf_text += " \\qr \\fs16 " + ((getvalmat(dati, "txt3lmaxBILANCIO") == "") ? "" : getvalmat(dati, "txt3lmaxBILANCIO")) + " \\b0\\cell";
        partial_rtf_text += " \\qc  \\fs16\\f1 " + ((getvalmat(dati, "chk3BILANCIO") == "") ? checkbox_Cheched : ((Convert.ToBoolean(getvalmat(dati, "chk3BILANCIO")) == true) ? checkbox_Cheched : checkbox_UnCheched)) + " \\f0 \\b0\\cell";

        partial_rtf_text += finerigaTP;

        partial_rtf_text += iniziorigaTP + "\n" + colore3 + bordi + cell1m + colore3 + bordi + cell2m + colore3 + bordi + cell3m + colore3 + bordi + cell4m + colore3 + bordi + cell5m + colore3 + bordi + cell6m + colore3 + bordi + cell7m + inizioriga2;

        partial_rtf_text += " \\ql \\fs16 Risultati ante Imposte \\b0\\cell";
        partial_rtf_text += " \\qr \\fs16 " + ((getvalmat(dati, "txt4BILANCIO") == "") ? "" : getvalmat(dati, "txt4BILANCIO")) + " \\b0\\cell";
        partial_rtf_text += " \\qc \\fs16 " + ((getvalmat(dati, "txt4_p_minBILANCIO") == "") ? "" : getvalmat(dati, "txt4_p_minBILANCIO")) + " \\b0\\cell";
        partial_rtf_text += " \\qc \\fs16 " + ((getvalmat(dati, "txt4_p_maxBILANCIO") == "") ? "" : getvalmat(dati, "txt4_p_maxBILANCIO")) + " \\b0\\cell";
        partial_rtf_text += " \\qr \\fs16 " + ((getvalmat(dati, "txt4lminBILANCIO") == "") ? "" : getvalmat(dati, "txt4lminBILANCIO")) + " \\b0\\cell";
        partial_rtf_text += " \\qr \\fs16 " + ((getvalmat(dati, "txt4lmaxBILANCIO") == "") ? "" : getvalmat(dati, "txt4lmaxBILANCIO")) + " \\b0\\cell";
        partial_rtf_text += " \\qc \\f1 " + ((getvalmat(dati, "chk4BILANCIO") == "") ? checkbox_Cheched : ((Convert.ToBoolean(getvalmat(dati, "chk4BILANCIO")) == true) ? checkbox_Cheched : checkbox_UnCheched)) + " \\f0 \\b0\\cell";

        partial_rtf_text += finerigaTP;

        partial_rtf_text += "\\line\\pard\\bgdkdcross\\cfpat1\\shading59110\\tx2291\\par";

        partial_rtf_text += "\\pard\\keep";

        partial_rtf_text += iniziorigaTP + "\n" + colore3 + cell3m + colore3 + cell4m + colore3 + bordi + cell5m + colore3 + bordi + cell6m + inizioriga2;

        partial_rtf_text += " \\ql \\fs20 Totali minimi / massimi \\fs20 \\b0\\cell";
        partial_rtf_text += " \\qc \\fs16  \\b0\\cell";
        partial_rtf_text += " \\qc \\fs16 " + ((getvalmat(dati, "txt5BILANCIO") == "") ? "" : getvalmat(dati, "txt5BILANCIO")) + " \\b0\\cell";
        partial_rtf_text += " \\qc \\fs16 " + ((getvalmat(dati, "txt6BILANCIO") == "") ? "" : getvalmat(dati, "txt6BILANCIO")) + " \\b0\\cell";

        partial_rtf_text += finerigaTP;

        partial_rtf_text += iniziorigaTP + "\n" + colore3 + cell3m + colore3 + cell4m + colore3 + bordi + cell6m + inizioriga2;

        partial_rtf_text += " \\ql \\fs20 MATERIALITA' - MEDIA fra minimi e massimi \\fs20 \\b0\\cell";
        partial_rtf_text += " \\qc \\fs16  \\b0\\cell";
        partial_rtf_text += " \\qc \\fs16 " + ((getvalmat(dati, "txt7BILANCIO") == "") ? "" : getvalmat(dati, "txt7BILANCIO")) + " \\b0\\cell";

        partial_rtf_text += finerigaTP;

        partial_rtf_text += iniziorigaTP + "\n" + colore3 + cell3m + colore3 + bordi + cell4m + colore3 + bordi + cell6m + inizioriga2;

        partial_rtf_text += " \\ql \\fs20 ERRORE TRASCURABILE \\fs20 \\b0\\cell";
        partial_rtf_text += " \\qc \\fs16 " + ((getvalmat(dati, "txt8BILANCIO") == "") ? "" : getvalmat(dati, "txt8BILANCIO")) + " \\b0\\cell";
        partial_rtf_text += " \\qc \\fs16 " + ((getvalmat(dati, "txt9BILANCIO") == "") ? "" : getvalmat(dati, "txt9BILANCIO")) + " \\b0\\cell";

        partial_rtf_text += finerigaTP;

        partial_rtf_text += iniziorigaTP + "\n" + colore3 + cell3m + colore3 + bordi + cell4m + colore3 + bordi + cell6m + inizioriga2;

        partial_rtf_text += " \\ql \\fs20 Materialità Operativa  \\fs20 \\b0\\cell";
        partial_rtf_text += " \\qc \\fs16 " + ((getvalmat(dati, "txt10BILANCIO") == "") ? "" : getvalmat(dati, "txt10BILANCIO")) + " \\b0\\cell";
        partial_rtf_text += " \\qc \\fs16 " + ((getvalmat(dati, "txt12BILANCIO") == "") ? "" : getvalmat(dati, "txt12BILANCIO")) + " \\b0\\cell";

        partial_rtf_text += finerigaTP;

        partial_rtf_text += "\\line\\pard\\bgdkdcross\\cfpat1\\shading59110\\tx2291\\par";
      }

      if (ID == "314")
      {
        string cell1ar = "\\clvertalc\\cellx3000";
        string cell3ar = "\\clvertalc\\cellx5800";
        string cell5ar = "\\clvertalc\\cellx8600";

        partial_rtf_text += " \\line \\pard\\keepn\\b\\f0 Ripartizione delle Materialità fa le COMPONENTI:\\b0 \\line \\par\n";

        partial_rtf_text += "\\pard\\keep";

        partial_rtf_text += iniziorigaTP + "\n" + colore2 + bordi + cell1ar + colore2 + bordi + cell3ar + colore2 + bordi + cell5ar + inizioriga2;

        partial_rtf_text += "\\b \\qc \\fs16 COMPONENTI\\b0\\cell";
        partial_rtf_text += "\\b \\qc \\fs16 Materialità Operativa \\b0\\cell";
        partial_rtf_text += "\\b \\qc \\fs16 Errore Tollerabile \\b0\\cell";

        partial_rtf_text += finerigaTP;

        for (int j = 0; j < 1000; j++)
        {
          DataRow dt = null;
          dt = getrowmat(dati, j.ToString());
          if (dt != null)
          {


            partial_rtf_text += iniziorigaTP + "\n" + colore1 + bordi + cell1ar + colore1 + bordi + cell3ar + colore1 + bordi + cell5ar + inizioriga2;

            partial_rtf_text += " \\ql \\fs20 " + (((dt["name"].ToString() == "") ? "" : dt["name"].ToString())) + " \\cell";
            partial_rtf_text += " \\qr \\fs20 " + (((dt["ma"].ToString() == "") ? "" : dt["ma"].ToString())) + " \\cell";
            partial_rtf_text += " \\qr \\fs20 " + (((dt["et"].ToString() == "") ? "" : dt["et"].ToString())) + " \\cell";

            partial_rtf_text += finerigaTP;
          }
        }
      }

      return partial_rtf_text;
    }
    #endregion

    #region Materialita Ipotesi2
    private string AddMaterialitaIpotesi2(XmlNode nodeTree, string ID)
    {

      string partial_rtf_text = "";
      DataTable dati = cBusinessObjects.GetData(int.Parse(ID), typeof(Excel_LimiteMaterialitaSPCE), idcliente, idsessione, idtree);


      bool EsisteMaterialitaDaBilancio = false;

      if (getvalmat(dati, "txt5_2spBILANCIO") != "")
      {
        EsisteMaterialitaDaBilancio = true;
      }

      #region parametri di riferimento

      if (EsisteMaterialitaDaBilancio == true)
      {
        partial_rtf_text += "\\pard\\keep";

        partial_rtf_text += " \\b Materialità PIANIFICATA \\b0 \\line \\line";

        partial_rtf_text += "\\par";
      }

      partial_rtf_text += "\\pard\\keep";

      partial_rtf_text += iniziorigaTP + "\n" + colore3 + bordi + cell1m + colore3 + bordi + cell2m + colore3 + bordi + cell4m + colore3 + bordi + cell6m + colore3 + bordi + cell7m + inizioriga2;

      //partial_rtf_text += iniziorigaTP + "\n" + colore3 + bordi + cell1m + colore3 + bordi + cell2m + colore3 + bordi + cell4m + colore3 + bordi + cell6m + inizioriga2;

      partial_rtf_text += " \\qc \\fs16 Parametri di riferimento \\b0\\cell";
      partial_rtf_text += " \\qc \\fs16 Valori di bilancio \\b0\\cell";
      partial_rtf_text += " \\qc \\fs16 Percentuali \\b0\\cell";
      partial_rtf_text += " \\qc \\fs16 Limiti \\b0\\cell";
      partial_rtf_text += " \\qc \\fs16 Incl. \\b0\\cell";

      partial_rtf_text += finerigaTP;

      partial_rtf_text += iniziorigaTP + "\n" + colore3 + bordi + cell1m + colore3 + bordi + cell2m + colore3 + bordi + cell3m + colore3 + bordi + cell4m + colore3 + bordi + cell5m + colore3 + bordi + cell6m + colore3 + bordi + cell7m + inizioriga2;

      //partial_rtf_text += iniziorigaTP + "\n" + colore3 + bordi + cell1m + colore3 + bordi + cell2m + colore3 + bordi + cell4m + colore3 + bordi + cell6m + inizioriga2;

      partial_rtf_text += " \\qc  \\b0\\cell";
      partial_rtf_text += " \\qc  \\b0\\cell";
      partial_rtf_text += " \\qc \\fs16 Minima \\b0\\cell";
      partial_rtf_text += " \\qc \\fs16 Massima \\b0\\cell";
      partial_rtf_text += " \\qc \\fs16 Minimo \\b0\\cell";
      partial_rtf_text += " \\qc \\fs16 Massimo \\b0\\cell";
      partial_rtf_text += " \\qc  \\b0\\cell";

      partial_rtf_text += finerigaTP;

      partial_rtf_text += iniziorigaTP + "\n" + colore3 + bordi + cell1m + colore3 + bordi + cell2m + colore3 + bordi + cell3m + colore3 + bordi + cell4m + colore3 + bordi + cell5m + colore3 + bordi + cell6m + colore3 + bordi + cell7m + inizioriga2;

      //partial_rtf_text += iniziorigaTP + "\n" + colore3 + bordi + cell1m + colore3 + bordi + cell2m + colore3 + bordi + cell4m + colore3 + bordi + cell6m + inizioriga2;

      partial_rtf_text += " \\ql \\fs16 Totale Attività \\b0\\cell";
      partial_rtf_text += " \\qr \\fs16 " + ((getvalmat(dati, "txt1") == "") ? "" : getvalmat(dati, "txt1")) + " \\b0\\cell";
      partial_rtf_text += " \\qc \\fs16 " + ((getvalmat(dati, "txt1_p_min") == "") ? "" : getvalmat(dati, "txt1_p_min")) + " \\b0\\cell";
      partial_rtf_text += " \\qc \\fs16 " + ((getvalmat(dati, "txt1_p_max") == "") ? "" : getvalmat(dati, "txt1_p_max")) + " \\b0\\cell";
      partial_rtf_text += " \\qr \\fs16 " + ((getvalmat(dati, "txt1min") == "") ? "" : getvalmat(dati, "txt1min")) + " \\b0\\cell";
      partial_rtf_text += " \\qr \\fs16 " + ((getvalmat(dati, "txt1lmax") == "") ? "" : getvalmat(dati, "txt1lmax")) + " \\b0\\cell";
      partial_rtf_text += " \\qc \\fs16 \\f1 " + ((getvalmat(dati, "chk1") == "") ? checkbox_Cheched : ((Convert.ToBoolean(getvalmat(dati, "chk1")) == true) ? checkbox_Cheched : checkbox_UnCheched)) + " \\f0 \\b0\\cell";

      partial_rtf_text += finerigaTP;

      partial_rtf_text += iniziorigaTP + "\n" + colore3 + bordi + cell1m + colore3 + bordi + cell2m + colore3 + bordi + cell3m + colore3 + bordi + cell4m + colore3 + bordi + cell5m + colore3 + bordi + cell6m + colore3 + bordi + cell7m + inizioriga2;

      //partial_rtf_text += iniziorigaTP + "\n" + colore3 + bordi + cell1m + colore3 + bordi + cell2m + colore3 + bordi + cell4m + colore3 + bordi + cell6m + inizioriga2;

      partial_rtf_text += " \\ql \\fs16 Patrimonio Netto \\b0\\cell";
      partial_rtf_text += " \\qr \\fs16 " + ((getvalmat(dati, "txt2") == "") ? "" : getvalmat(dati, "txt2")) + " \\b0\\cell";
      partial_rtf_text += " \\qc \\fs16 " + ((getvalmat(dati, "txt2_p_min") == "") ? "" : getvalmat(dati, "txt2_p_min")) + " \\b0\\cell";
      partial_rtf_text += " \\qc \\fs16 " + ((getvalmat(dati, "txt2_p_max") == "") ? "" : getvalmat(dati, "txt2_p_max")) + " \\b0\\cell";
      partial_rtf_text += " \\qr \\fs16 " + ((getvalmat(dati, "txt2lmin") == "") ? "" : getvalmat(dati, "txt2lmin")) + " \\b0\\cell";
      partial_rtf_text += " \\qr \\fs16 " + ((getvalmat(dati, "txt2lmax") == "") ? "" : getvalmat(dati, "txt2lmax")) + " \\b0\\cell";
      partial_rtf_text += " \\qc \\fs16 \\f1 " + ((getvalmat(dati, "chk2") == "") ? checkbox_Cheched : ((Convert.ToBoolean(getvalmat(dati, "chk2")) == true) ? checkbox_Cheched : checkbox_UnCheched)) + " \\f0 \\b0\\cell";

      partial_rtf_text += finerigaTP;

      partial_rtf_text += iniziorigaTP + "\n" + colore3 + bordi + cell1m + colore3 + bordi + cell2m + colore3 + bordi + cell3m + colore3 + bordi + cell4m + colore3 + bordi + cell5m + colore3 + bordi + cell6m + colore3 + bordi + cell7m + inizioriga2;

      //partial_rtf_text += iniziorigaTP + "\n" + colore3 + bordi + cell1m + colore3 + bordi + cell2m + colore3 + bordi + cell4m + colore3 + bordi + cell6m + inizioriga2;

      partial_rtf_text += " \\ql \\fs16 Ricavi dell'esercizio \\b0\\cell";
      partial_rtf_text += " \\qr \\fs16 " + ((getvalmat(dati, "txt3") == "") ? "" : getvalmat(dati, "txt3")) + " \\b0\\cell";
      partial_rtf_text += " \\qc \\fs16 " + ((getvalmat(dati, "txt3_p_min") == "") ? "" : getvalmat(dati, "txt3_p_min")) + " \\b0\\cell";
      partial_rtf_text += " \\qc \\fs16 " + ((getvalmat(dati, "txt3_p_max") == "") ? "" : getvalmat(dati, "txt3_p_max")) + " \\b0\\cell";
      partial_rtf_text += " \\qr \\fs16 " + ((getvalmat(dati, "txt3lmin") == "") ? "" : getvalmat(dati, "txt3lmin")) + " \\b0\\cell";
      partial_rtf_text += " \\qr \\fs16 " + ((getvalmat(dati, "txt3lmax") == "") ? "" : getvalmat(dati, "txt3lmax")) + " \\b0\\cell";
      partial_rtf_text += " \\qc \\fs16 \\f1 " + ((getvalmat(dati, "chk3") == "") ? checkbox_Cheched : ((Convert.ToBoolean(getvalmat(dati, "chk3")) == true) ? checkbox_Cheched : checkbox_UnCheched)) + " \\f0 \\b0\\cell";

      partial_rtf_text += finerigaTP;

      partial_rtf_text += iniziorigaTP + "\n" + colore3 + bordi + cell1m + colore3 + bordi + cell2m + colore3 + bordi + cell3m + colore3 + bordi + cell4m + colore3 + bordi + cell5m + colore3 + bordi + cell6m + colore3 + bordi + cell7m + inizioriga2;

      //partial_rtf_text += iniziorigaTP + "\n" + colore3 + bordi + cell1m + colore3 + bordi + cell2m + colore3 + bordi + cell4m + colore3 + bordi + cell6m + inizioriga2;

      partial_rtf_text += " \\ql \\fs16 Risultati ante Imposte \\b0\\cell";
      partial_rtf_text += " \\qr \\fs16 " + ((getvalmat(dati, "txt4") == "") ? "" : getvalmat(dati, "txt4")) + " \\b0\\cell";
      partial_rtf_text += " \\qc \\fs16 " + ((getvalmat(dati, "txt4_p_min") == "") ? "" : getvalmat(dati, "txt4_p_min")) + " \\b0\\cell";
      partial_rtf_text += " \\qc \\fs16 " + ((getvalmat(dati, "txt4_p_max") == "") ? "" : getvalmat(dati, "txt4_p_max")) + " \\b0\\cell";
      partial_rtf_text += " \\qr \\fs16 " + ((getvalmat(dati, "txt4lmin") == "") ? "" : getvalmat(dati, "txt4lmin")) + " \\b0\\cell";
      partial_rtf_text += " \\qr \\fs16 " + ((getvalmat(dati, "txt4lmax") == "") ? "" : getvalmat(dati, "txt4lmax")) + " \\b0\\cell";
      partial_rtf_text += " \\qc \\fs16 \\f1 " + ((getvalmat(dati, "chk4") == "") ? checkbox_Cheched : ((Convert.ToBoolean(getvalmat(dati, "chk4")) == true) ? checkbox_Cheched : checkbox_UnCheched)) + " \\f0 \\b0\\cell";


      partial_rtf_text += finerigaTP;

      partial_rtf_text += "\\line\\pard\\bgdkdcross\\cfpat1\\shading59110\\tx2291\\par";

      #endregion

      /*
      partial_rtf_text += "\\line\\pard\\keepn\\b\\f0 " + "Dottrina Nazionale" + "\\b0 \\line \\par\n";

      #region DOTTRINA NAZIONALE

      partial_rtf_text += "\\pard\\keep";

      partial_rtf_text += iniziorigaTP + "\n" + colore3 + cell2m + colore3 + bordi + cell4m + colore3 + bordi + cell6m + inizioriga2;

      partial_rtf_text += "\\b \\qc \\b0\\cell";
      partial_rtf_text += "\\b \\qc Percentuali \\b0\\cell";
      partial_rtf_text += "\\b \\qc Limiti \\b0\\cell";

      partial_rtf_text += finerigaTP;

partial_rtf_text += iniziorigaTP + "\n" + colore3 + cell2m + colore3 + bordi + cell3m + colore3 + bordi + cell4m + colore3 + bordi + cell5m + colore3 + bordi + cell6m + inizioriga2;

      partial_rtf_text += "\\b \\qc  \\b0\\cell";
      partial_rtf_text += "\\b \\qc Minima \\b0\\cell";
      partial_rtf_text += "\\b \\qc Massima \\b0\\cell";
      partial_rtf_text += "\\b \\qc Minimo \\b0\\cell";
      partial_rtf_text += "\\b \\qc Massimo \\b0\\cell";

partial_rtf_text += finerigaTP;

partial_rtf_text += iniziorigaTP + "\n" + colore3 + bordi + cell2m + colore3 + bordi + cell3m + colore3 + bordi + cell4m + colore3 + bordi + cell5m + colore3 + bordi + cell6m + inizioriga2;

      partial_rtf_text += "\\b \\ql Totale Attività \\b0\\cell";
      partial_rtf_text += "\\b \\qc 0,50% \\b0\\cell";
      partial_rtf_text += "\\b \\qc 1,00% \\b0\\cell";
      partial_rtf_text += "\\b \\qr " + ((getvalmat(dati, "txt1lmindn")=="") ? "" : getvalmat(dati, "txt1lmindn")) + " \\b0\\cell";
      partial_rtf_text += "\\b \\qr " + ((getvalmat(dati, "txt1lmaxdn")=="") ? "" : getvalmat(dati, "txt1lmaxdn")) + " \\b0\\cell";

partial_rtf_text += finerigaTP;

partial_rtf_text += iniziorigaTP + "\n" + colore3 + bordi + cell2m + colore3 + bordi + cell3m + colore3 + bordi + cell4m + colore3 + bordi + cell5m + colore3 + bordi + cell6m + inizioriga2;

      partial_rtf_text += "\\b \\ql Patrimonio Netto \\b0\\cell";
      partial_rtf_text += "\\b \\qc 1,00% \\b0\\cell";
      partial_rtf_text += "\\b \\qc 5,00% \\b0\\cell";
      partial_rtf_text += "\\b \\qr " + ((getvalmat(dati, "txt2lmindn")=="") ? "" : getvalmat(dati, "txt2lmindn")) + " \\b0\\cell";
      partial_rtf_text += "\\b \\qr " + ((getvalmat(dati, "txt2lmaxdn")=="") ? "" : getvalmat(dati, "txt2lmaxdn")) + " \\b0\\cell";

partial_rtf_text += finerigaTP;

partial_rtf_text += iniziorigaTP + "\n" + colore3 + bordi + cell2m + colore3 + bordi + cell3m + colore3 + bordi + cell4m + colore3 + bordi + cell5m + colore3 + bordi + cell6m + inizioriga2;

      partial_rtf_text += "\\b \\ql Ricavi dell'esercizio \\b0\\cell";
      partial_rtf_text += "\\b \\qc 0,50% \\b0\\cell";
      partial_rtf_text += "\\b \\qc 1,00% \\b0\\cell";
      partial_rtf_text += "\\b \\qr " + ((getvalmat(dati, "txt3lmindn")=="") ? "" : getvalmat(dati, "txt3lmindn")) + " \\b0\\cell";
      partial_rtf_text += "\\b \\qr " + ((getvalmat(dati, "txt3lmaxdn")=="") ? "" : getvalmat(dati, "txt3lmaxdn")) + " \\b0\\cell";

partial_rtf_text += finerigaTP;

partial_rtf_text += iniziorigaTP + "\n" + colore3 + bordi + cell2m + colore3 + bordi + cell3m + colore3 + bordi + cell4m + colore3 + bordi + cell5m + colore3 + bordi + cell6m + inizioriga2;

      partial_rtf_text += "\\b \\ql Risultati ante Imposte \\b0\\cell";
      partial_rtf_text += "\\b \\qc 5,00% \\b0\\cell";
      partial_rtf_text += "\\b \\qc 10,00% \\b0\\cell";
      partial_rtf_text += "\\b \\qr " + ((getvalmat(dati, "txt4lmindn")=="") ? "" : getvalmat(dati, "txt4lmindn")) + " \\b0\\cell";
      partial_rtf_text += "\\b \\qr " + ((getvalmat(dati, "txt4lmaxdn")=="") ? "" : getvalmat(dati, "txt4lmaxdn")) + " \\b0\\cell";

partial_rtf_text += finerigaTP;

      partial_rtf_text += "\\line\\pard\\bgdkdcross\\cfpat1\\shading59110\\tx2291\\par";

      #endregion

partial_rtf_text += "\\page\\pard\\keepn\\b\\f0 " + "2° IPOTESI - limite di materialità - medie fra i minimi ed i massimi per S.P. e C.E." + "\\b0 \\line \\par\n";
      */

      #region IPOTESI

      partial_rtf_text += "\\pard\\keep";

      partial_rtf_text += iniziorigaTP + "\n" + colore3 + cell3m + colore3 + cell4m + colore2 + bordi + cell5m + colore2 + bordi + cell6m + inizioriga2;

      partial_rtf_text += " \\ql \\fs20 Totali minimi / massimi \\fs20 \\b0\\cell";
      partial_rtf_text += " \\qc \\fs16  \\b0\\cell";
      partial_rtf_text += " \\qc \\fs16 " + ((getvalmat(dati, "txt5_2sp") == "") ? "" : getvalmat(dati, "txt5_2sp")) + " \\b0\\cell";
      partial_rtf_text += " \\qc \\fs16 " + ((getvalmat(dati, "txt6_2sp") == "") ? "" : getvalmat(dati, "txt6_2sp")) + " \\b0\\cell";

      partial_rtf_text += finerigaTP;

      partial_rtf_text += iniziorigaTP + "\n" + colore3 + cell3m + colore3 + cell4m + colore2 + bordi + cell6m + inizioriga2;

      partial_rtf_text += " \\ql \\fs20 MATERIALITA' - MEDIA fra minimi e massimi \\fs20 \\b0\\cell";
      partial_rtf_text += " \\qc \\fs16  \\b0\\cell";
      partial_rtf_text += " \\qc \\fs16 " + ((getvalmat(dati, "txt7_2sp") == "") ? "" : getvalmat(dati, "txt7_2sp")) + " \\b0\\cell";

      partial_rtf_text += finerigaTP;

      partial_rtf_text += iniziorigaTP + "\n" + colore3 + cell3m + colore2 + bordi + cell4m + colore2 + bordi + cell6m + inizioriga2;

      partial_rtf_text += " \\ql \\fs20 ERRORE TRASCURABILE \\fs20 \\b0\\cell";
      partial_rtf_text += " \\qc \\fs16 " + ((getvalmat(dati, "txt8_2sp") == "") ? "" : getvalmat(dati, "txt8_2sp")) + " \\b0\\cell";
      partial_rtf_text += " \\qc \\fs16 " + ((getvalmat(dati, "txt9_2sp") == "") ? "" : getvalmat(dati, "txt9_2sp")) + " \\b0\\cell";

      partial_rtf_text += finerigaTP;

      partial_rtf_text += iniziorigaTP + "\n" + colore2 + cell3m + colore2 + bordi + cell4m + colore2 + bordi + cell6m + inizioriga2;

      partial_rtf_text += " \\ql \\fs20 Materialità Operativa  \\fs20 \\b0\\cell";
      partial_rtf_text += " \\qc \\fs16 " + ((getvalmat(dati, "txt10_2sp") == "") ? "" : getvalmat(dati, "txt10_2sp")) + " \\b0\\cell";
      partial_rtf_text += " \\qc \\fs16 " + ((getvalmat(dati, "txt12_2sp") == "") ? "" : getvalmat(dati, "txt12_2sp")) + " \\b0\\cell";

      partial_rtf_text += finerigaTP;

      partial_rtf_text += "\\line\\pard\\bgdkdcross\\cfpat1\\shading59110\\tx2291\\par";

      #endregion

      partial_rtf_text += "\\line ";

      #region IPOTESI

      partial_rtf_text += "\\pard\\keep";

      partial_rtf_text += iniziorigaTP + "\n" + colore3 + cell3m + colore3 + cell4m + colore4 + bordi + cell5m + colore4 + bordi + cell6m + inizioriga2;

      partial_rtf_text += " \\ql \\fs20 Totali minimi / massimi \\fs20 \\b0\\cell";
      partial_rtf_text += " \\q \\fs16c  \\b0\\cell";
      partial_rtf_text += " \\qc \\fs16 " + ((getvalmat(dati, "txt5_2ce") == "") ? "" : getvalmat(dati, "txt5_2ce")) + " \\b0\\cell";
      partial_rtf_text += " \\qc \\fs16 " + ((getvalmat(dati, "txt6_2ce") == "") ? "" : getvalmat(dati, "txt6_2ce")) + " \\b0\\cell";

      partial_rtf_text += finerigaTP;

      partial_rtf_text += iniziorigaTP + "\n" + colore3 + cell3m + colore3 + cell4m + colore4 + bordi + cell6m + inizioriga2;

      partial_rtf_text += " \\ql \\fs20 MATERIALITA' - MEDIA fra minimi e massimi \\fs20 \\b0\\cell";
      partial_rtf_text += " \\qc \\fs16  \\b0\\cell";
      partial_rtf_text += " \\qc \\fs16 " + ((getvalmat(dati, "txt7_2ce") == "") ? "" : getvalmat(dati, "txt7_2ce")) + " \\b0\\cell";

      partial_rtf_text += finerigaTP;

      partial_rtf_text += iniziorigaTP + "\n" + colore3 + cell3m + colore4 + bordi + cell4m + colore4 + bordi + cell6m + inizioriga2;

      partial_rtf_text += " \\ql \\fs20 ERRORE TRASCURABILE \\fs20 \\b0\\cell";
      partial_rtf_text += " \\qc \\fs16 " + ((getvalmat(dati, "txt8_2ec") == "") ? "" : getvalmat(dati, "txt8_2ec")) + " \\b0\\cell";
      partial_rtf_text += " \\qc \\fs16 " + ((getvalmat(dati, "txt9_2ce") == "") ? "" : getvalmat(dati, "txt9_2ce")) + " \\b0\\cell";

      partial_rtf_text += finerigaTP;

      partial_rtf_text += iniziorigaTP + "\n" + colore4 + cell3m + colore4 + bordi + cell4m + colore4 + bordi + cell6m + inizioriga2;

      partial_rtf_text += " \\ql \\fs20 Materialità Operativa  \\fs20 \\b0\\cell";
      partial_rtf_text += " \\qc \\fs16 " + ((getvalmat(dati, "txt10_2ec") == "") ? "" : getvalmat(dati, "txt10_2ec")) + " \\b0\\cell";
      partial_rtf_text += " \\qc \\fs16 " + ((getvalmat(dati, "txt12_2ce") == "") ? "" : getvalmat(dati, "txt12_2ce")) + " \\b0\\cell";

      partial_rtf_text += finerigaTP;

      partial_rtf_text += "\\line\\pard\\bgdkdcross\\cfpat1\\shading59110\\tx2291\\par";

      #endregion

      //DA BILANCIO
      if (EsisteMaterialitaDaBilancio == true)
      {
        partial_rtf_text += "\\pard\\keep";

        partial_rtf_text += " \\b Materialità da BILANCIO \\b0 \\line \\line";

        partial_rtf_text += "\\par";

        partial_rtf_text += "\\pard\\keep";

        partial_rtf_text += iniziorigaTP + "\n" + colore3 + bordi + cell1m + colore3 + bordi + cell2m + colore3 + bordi + cell4m + colore3 + bordi + cell6m + colore3 + bordi + cell7m + inizioriga2;

        //partial_rtf_text += iniziorigaTP + "\n" + colore3 + bordi + cell1m + colore3 + bordi + cell2m + colore3 + bordi + cell4m + colore3 + bordi + cell6m + inizioriga2;

        partial_rtf_text += " \\qc \\fs16 Parametri di riferimento \\b0\\cell";
        partial_rtf_text += " \\qc \\fs16 Valori di bilancio \\b0\\cell";
        partial_rtf_text += " \\qc \\fs16 Percentuali \\b0\\cell";
        partial_rtf_text += " \\qc \\fs16 Limiti \\b0\\cell";
        partial_rtf_text += " \\qc \\fs16 Incl. \\b0\\cell";

        partial_rtf_text += finerigaTP;

        partial_rtf_text += iniziorigaTP + "\n" + colore3 + bordi + cell1m + colore3 + bordi + cell2m + colore3 + bordi + cell3m + colore3 + bordi + cell4m + colore3 + bordi + cell5m + colore3 + bordi + cell6m + colore3 + bordi + cell7m + inizioriga2;

        //partial_rtf_text += iniziorigaTP + "\n" + colore3 + bordi + cell1m + colore3 + bordi + cell2m + colore3 + bordi + cell3m + colore3 + bordi + cell4m + colore3 + bordi + cell5m + colore3 + bordi + cell6m + inizioriga2;

        partial_rtf_text += " \\qc \\fs16  \\b0\\cell";
        partial_rtf_text += " \\qc \\fs16  \\b0\\cell";
        partial_rtf_text += " \\qc \\fs16 Minima \\b0\\cell";
        partial_rtf_text += " \\qc \\fs16 Massima \\b0\\cell";
        partial_rtf_text += " \\qc \\fs16 Minimo \\b0\\cell";
        partial_rtf_text += " \\qc \\fs16 Massimo \\b0\\cell";
        partial_rtf_text += " \\qc \\fs16  \\b0\\cell";

        partial_rtf_text += finerigaTP;

        partial_rtf_text += iniziorigaTP + "\n" + colore3 + bordi + cell1m + colore3 + bordi + cell2m + colore3 + bordi + cell3m + colore3 + bordi + cell4m + colore3 + bordi + cell5m + colore3 + bordi + cell6m + colore3 + bordi + cell7m + inizioriga2;

        //partial_rtf_text += iniziorigaTP + "\n" + colore3 + bordi + cell1m + colore3 + bordi + cell2m + colore3 + bordi + cell3m + colore3 + bordi + cell4m + colore3 + bordi + cell5m + colore3 + bordi + cell6m + inizioriga2;

        partial_rtf_text += " \\ql \\fs16 Totale Attività \\b0\\cell";
        partial_rtf_text += " \\qr \\fs16 " + ((getvalmat(dati, "txt1BILANCIO") == "") ? "" : getvalmat(dati, "txt1BILANCIO")) + " \\b0\\cell";
        partial_rtf_text += " \\qc \\fs16 " + ((getvalmat(dati, "txt1_p_minBILANCIO") == "") ? "" : getvalmat(dati, "txt1_p_minBILANCIO")) + " \\b0\\cell";
        partial_rtf_text += " \\qc \\fs16 " + ((getvalmat(dati, "txt1_p_maxBILANCIO") == "") ? "" : getvalmat(dati, "txt1_p_maxBILANCIO")) + " \\b0\\cell";
        partial_rtf_text += " \\qr \\fs16 " + ((getvalmat(dati, "txt1minBILANCIO") == "") ? "" : getvalmat(dati, "txt1minBILANCIO")) + " \\b0\\cell";
        partial_rtf_text += " \\qr \\fs16 " + ((getvalmat(dati, "txt1lmaxBILANCIO") == "") ? "" : getvalmat(dati, "txt1lmaxBILANCIO")) + " \\b0\\cell";
        partial_rtf_text += " \\qc \\fs16 \\f1 " + ((getvalmat(dati, "chk1BILANCIO") == "") ? checkbox_Cheched : ((Convert.ToBoolean(getvalmat(dati, "chk1BILANCIO")) == true) ? checkbox_Cheched : checkbox_UnCheched)) + " \\f0 \\b0\\cell";


        partial_rtf_text += finerigaTP;

        partial_rtf_text += iniziorigaTP + "\n" + colore3 + bordi + cell1m + colore3 + bordi + cell2m + colore3 + bordi + cell3m + colore3 + bordi + cell4m + colore3 + bordi + cell5m + colore3 + bordi + cell6m + colore3 + bordi + cell7m + inizioriga2;

        //partial_rtf_text += iniziorigaTP + "\n" + colore3 + bordi + cell1m + colore3 + bordi + cell2m + colore3 + bordi + cell3m + colore3 + bordi + cell4m + colore3 + bordi + cell5m + colore3 + bordi + cell6m + inizioriga2;

        partial_rtf_text += " \\ql \\fs16 Patrimonio Netto \\b0\\cell";
        partial_rtf_text += " \\qr \\fs16 " + ((getvalmat(dati, "txt2BILANCIO") == "") ? "" : getvalmat(dati, "txt2BILANCIO")) + " \\b0\\cell";
        partial_rtf_text += " \\qc \\fs16 " + ((getvalmat(dati, "txt2_p_minBILANCIO") == "") ? "" : getvalmat(dati, "txt2_p_minBILANCIO")) + " \\b0\\cell";
        partial_rtf_text += " \\qc \\fs16 " + ((getvalmat(dati, "txt2_p_maxBILANCIO") == "") ? "" : getvalmat(dati, "txt2_p_maxBILANCIO")) + " \\b0\\cell";
        partial_rtf_text += " \\qr \\fs16 " + ((getvalmat(dati, "txt2lminBILANCIO") == "") ? "" : getvalmat(dati, "txt2lminBILANCIO")) + " \\b0\\cell";
        partial_rtf_text += " \\qr \\fs16 " + ((getvalmat(dati, "txt2lmaxBILANCIO") == "") ? "" : getvalmat(dati, "txt2lmaxBILANCIO")) + " \\b0\\cell";
        partial_rtf_text += " \\qc \\fs16 \\f1 " + ((getvalmat(dati, "chk2BILANCIO") == "") ? checkbox_Cheched : ((Convert.ToBoolean(getvalmat(dati, "chk2BILANCIO")) == true) ? checkbox_Cheched : checkbox_UnCheched)) + " \\f0 \\b0\\cell";


        partial_rtf_text += finerigaTP;

        partial_rtf_text += iniziorigaTP + "\n" + colore3 + bordi + cell1m + colore3 + bordi + cell2m + colore3 + bordi + cell3m + colore3 + bordi + cell4m + colore3 + bordi + cell5m + colore3 + bordi + cell6m + colore3 + bordi + cell7m + inizioriga2;

        //partial_rtf_text += iniziorigaTP + "\n" + colore3 + bordi + cell1m + colore3 + bordi + cell2m + colore3 + bordi + cell3m + colore3 + bordi + cell4m + colore3 + bordi + cell5m + colore3 + bordi + cell6m + inizioriga2;

        partial_rtf_text += " \\ql \\fs16 Ricavi dell'esercizio \\b0\\cell";
        partial_rtf_text += " \\qr \\fs16 " + ((getvalmat(dati, "txt3BILANCIO") == "") ? "" : getvalmat(dati, "txt3BILANCIO")) + " \\b0\\cell";
        partial_rtf_text += " \\qc \\fs16 " + ((getvalmat(dati, "txt3_p_minBILANCIO") == "") ? "" : getvalmat(dati, "txt3_p_minBILANCIO")) + " \\b0\\cell";
        partial_rtf_text += " \\qc \\fs16 " + ((getvalmat(dati, "txt3_p_maxBILANCIO") == "") ? "" : getvalmat(dati, "txt3_p_maxBILANCIO")) + " \\b0\\cell";
        partial_rtf_text += " \\qr \\fs16 " + ((getvalmat(dati, "txt3lminBILANCIO") == "") ? "" : getvalmat(dati, "txt3lminBILANCIO")) + " \\b0\\cell";
        partial_rtf_text += " \\qr \\fs16 " + ((getvalmat(dati, "txt3lmaxBILANCIO") == "") ? "" : getvalmat(dati, "txt3lmaxBILANCIO")) + " \\b0\\cell";
        partial_rtf_text += " \\qc \\fs16 \\f1 " + ((getvalmat(dati, "chk3BILANCIO") == "") ? checkbox_Cheched : ((Convert.ToBoolean(getvalmat(dati, "chk3BILANCIO")) == true) ? checkbox_Cheched : checkbox_UnCheched)) + " \\f0 \\b0\\cell";


        partial_rtf_text += finerigaTP;

        partial_rtf_text += iniziorigaTP + "\n" + colore3 + bordi + cell1m + colore3 + bordi + cell2m + colore3 + bordi + cell3m + colore3 + bordi + cell4m + colore3 + bordi + cell5m + colore3 + bordi + cell6m + colore3 + bordi + cell7m + inizioriga2;

        //partial_rtf_text += iniziorigaTP + "\n" + colore3 + bordi + cell1m + colore3 + bordi + cell2m + colore3 + bordi + cell3m + colore3 + bordi + cell4m + colore3 + bordi + cell5m + colore3 + bordi + cell6m + inizioriga2;

        partial_rtf_text += " \\ql \\fs16 Risultati ante Imposte \\b0\\cell";
        partial_rtf_text += " \\qr \\fs16 " + ((getvalmat(dati, "txt4BILANCIO") == "") ? "" : getvalmat(dati, "txt4BILANCIO")) + " \\b0\\cell";
        partial_rtf_text += " \\qc \\fs16 " + ((getvalmat(dati, "txt4_p_minBILANCIO") == "") ? "" : getvalmat(dati, "txt4_p_minBILANCIO")) + " \\b0\\cell";
        partial_rtf_text += " \\qc \\fs16 " + ((getvalmat(dati, "txt4_p_maxBILANCIO") == "") ? "" : getvalmat(dati, "txt4_p_maxBILANCIO")) + " \\b0\\cell";
        partial_rtf_text += " \\qr \\fs16 " + ((getvalmat(dati, "txt4lminBILANCIO") == "") ? "" : getvalmat(dati, "txt4lminBILANCIO")) + " \\b0\\cell";
        partial_rtf_text += " \\qr \\fs16 " + ((getvalmat(dati, "txt4lmaxBILANCIO") == "") ? "" : getvalmat(dati, "txt4lmaxBILANCIO")) + " \\b0\\cell";
        partial_rtf_text += " \\qc \\fs16 \\f1 " + ((getvalmat(dati, "chk4BILANCIO") == "") ? checkbox_Cheched : ((Convert.ToBoolean(getvalmat(dati, "chk4BILANCIO")) == true) ? checkbox_Cheched : checkbox_UnCheched)) + " \\f0 \\b0\\cell";


        partial_rtf_text += finerigaTP;

        partial_rtf_text += "\\line\\pard\\bgdkdcross\\cfpat1\\shading59110\\tx2291\\par";

        partial_rtf_text += "\\pard\\keep";

        partial_rtf_text += iniziorigaTP + "\n" + colore3 + cell3m + colore3 + cell4m + colore2 + bordi + cell5m + colore2 + bordi + cell6m + inizioriga2;

        partial_rtf_text += " \\ql \\fs20 Totali minimi / massimi \\fs20 \\b0\\cell";
        partial_rtf_text += " \\qc  \\b0\\cell";
        partial_rtf_text += " \\qc \\fs16 " + ((getvalmat(dati, "txt5_2spBILANCIO") == "") ? "" : getvalmat(dati, "txt5_2spBILANCIO")) + " \\b0\\cell";
        partial_rtf_text += " \\qc \\fs16 " + ((getvalmat(dati, "txt6_2spBILANCIO") == "") ? "" : getvalmat(dati, "txt6_2spBILANCIO")) + " \\b0\\cell";

        partial_rtf_text += finerigaTP;

        partial_rtf_text += iniziorigaTP + "\n" + colore3 + cell3m + colore3 + cell4m + colore2 + bordi + cell6m + inizioriga2;

        partial_rtf_text += " \\ql \\fs20 MATERIALITA' - MEDIA fra minimi e massimi \\fs20 \\b0\\cell";
        partial_rtf_text += " \\qc  \\b0\\cell";
        partial_rtf_text += " \\qc \\fs16 " + ((getvalmat(dati, "txt7_2spBILANCIO") == "") ? "" : getvalmat(dati, "txt7_2spBILANCIO")) + " \\b0\\cell";

        partial_rtf_text += finerigaTP;

        partial_rtf_text += iniziorigaTP + "\n" + colore3 + cell3m + colore2 + bordi + cell4m + colore2 + bordi + cell6m + inizioriga2;

        partial_rtf_text += " \\ql \\fs20 ERRORE TRASCURABILE \\fs20 \\b0\\cell";
        partial_rtf_text += " \\qc " + ((getvalmat(dati, "txt8_2spBILANCIO") == "") ? "" : getvalmat(dati, "txt8_2spBILANCIO")) + " \\b0\\cell";
        partial_rtf_text += " \\qc \\fs16 " + ((getvalmat(dati, "txt9_2spBILANCIO") == "") ? "" : getvalmat(dati, "txt9_2spBILANCIO")) + " \\b0\\cell";

        partial_rtf_text += finerigaTP;

        partial_rtf_text += iniziorigaTP + "\n" + colore2 + cell3m + colore2 + bordi + cell4m + colore2 + bordi + cell6m + inizioriga2;

        partial_rtf_text += " \\ql \\fs20 Materialità Operativa  \\fs20 \\b0\\cell";
        partial_rtf_text += " \\qc " + ((getvalmat(dati, "txt10_2spBILANCIO") == "") ? "" : getvalmat(dati, "txt10_2spBILANCIO")) + " \\b0\\cell";
        partial_rtf_text += " \\qc \\fs16 " + ((getvalmat(dati, "txt12_2spBILANCIO") == "") ? "" : getvalmat(dati, "txt12_2spBILANCIO")) + " \\b0\\cell";

        partial_rtf_text += finerigaTP;

        partial_rtf_text += "\\line\\pard\\bgdkdcross\\cfpat1\\shading59110\\tx2291\\par";

        partial_rtf_text += "\\line ";

        partial_rtf_text += "\\pard\\keep";

        partial_rtf_text += iniziorigaTP + "\n" + colore3 + cell3m + colore3 + cell4m + colore4 + bordi + cell5m + colore4 + bordi + cell6m + inizioriga2;

        partial_rtf_text += " \\ql \\fs20 Totali minimi / massimi \\fs20 \\b0\\cell";
        partial_rtf_text += " \\qc  \\b0\\cell";
        partial_rtf_text += " \\qc \\fs16 " + ((getvalmat(dati, "txt5_2ceBILANCIO") == "") ? "" : getvalmat(dati, "txt5_2ceBILANCIO")) + " \\b0\\cell";
        partial_rtf_text += " \\qc \\fs16 " + ((getvalmat(dati, "txt6_2ceBILANCIO") == "") ? "" : getvalmat(dati, "txt6_2ceBILANCIO")) + " \\b0\\cell";

        partial_rtf_text += finerigaTP;

        partial_rtf_text += iniziorigaTP + "\n" + colore3 + cell3m + colore3 + cell4m + colore4 + bordi + cell6m + inizioriga2;

        partial_rtf_text += " \\ql \\fs20 MATERIALITA' - MEDIA fra minimi e massimi \\fs20 \\b0\\cell";
        partial_rtf_text += " \\qc  \\b0\\cell";
        partial_rtf_text += " \\qc \\fs16 " + ((getvalmat(dati, "txt7_2ceBILANCIO") == "") ? "" : getvalmat(dati, "txt7_2ceBILANCIO")) + " \\b0\\cell";

        partial_rtf_text += finerigaTP;

        partial_rtf_text += iniziorigaTP + "\n" + colore3 + cell3m + colore4 + bordi + cell4m + colore4 + bordi + cell6m + inizioriga2;

        partial_rtf_text += " \\ql \\fs20 ERRORE TRASCURABILE \\fs20 \\b0\\cell";
        partial_rtf_text += " \\qc \\fs16 " + ((getvalmat(dati, "txt8_2ecBILANCIO") == "") ? "" : getvalmat(dati, "txt8_2ecBILANCIO")) + " \\b0\\cell";
        partial_rtf_text += " \\qc \\fs16 " + ((getvalmat(dati, "txt9_2ceBILANCIO") == "") ? "" : getvalmat(dati, "txt9_2ceBILANCIO")) + " \\b0\\cell";

        partial_rtf_text += finerigaTP;

        partial_rtf_text += iniziorigaTP + "\n" + colore4 + cell3m + colore4 + bordi + cell4m + colore4 + bordi + cell6m + inizioriga2;

        partial_rtf_text += " \\ql \\fs20 Materialità Operativa  \\fs20 \\b0\\cell";
        partial_rtf_text += " \\qc \\fs16 " + ((getvalmat(dati, "txt10_2ecBILANCIO") == "") ? "" : getvalmat(dati, "txt10_2ecBILANCIO")) + " \\b0\\cell";
        partial_rtf_text += " \\qc \\fs16 " + ((getvalmat(dati, "txt12_2ceBILANCIO") == "") ? "" : getvalmat(dati, "txt12_2ceBILANCIO")) + " \\b0\\cell";

        partial_rtf_text += finerigaTP;

        partial_rtf_text += "\\line\\pard\\bgdkdcross\\cfpat1\\shading59110\\tx2291\\par";
      }

      return partial_rtf_text;
    }
    #endregion

    #region Materialita Ipotesi3
    private string AddMaterialitaIpotesi3(XmlNode nodeTree, string ID)
    {
      DataTable dati = cBusinessObjects.GetData(int.Parse(ID), typeof(Excel_LimiteMaterialitaSPCE), idcliente, idsessione, idtree);

      string partial_rtf_text = "";


      partial_rtf_text += "\\line\\pard\\keepn\\b\\f0 " + "3° TIPO - limite di materialità - stabilito con criteri alternativi" + "\\b0 \\line \\par\n";

      partial_rtf_text += "\\pard\\keepn \\b Materialità PIANIFICATA \\b0 \\line \\par\n";

      #region IPOTESI

      partial_rtf_text += "\\pard\\keep";

      partial_rtf_text += iniziorigaTP + "\n" + colore3 + cell3m + colore3 + cell4m + colore3 + bordi + cell6m + inizioriga2;

      partial_rtf_text += "\\b \\ql \\fs20 MATERIALITA' SU STATO PATRIMONIALE \\fs20 \\b0\\cell";
      partial_rtf_text += "\\b \\qc  \\b0\\cell";
      partial_rtf_text += "\\b \\qc " + ((getvalmat(dati, "txt7_3sp") == "") ? "" : getvalmat(dati, "txt7_3sp")) + " \\b0\\cell";

      partial_rtf_text += finerigaTP;

      partial_rtf_text += iniziorigaTP + "\n" + colore3 + cell3m + colore3 + bordi + cell4m + colore2 + bordi + cell6m + inizioriga2;

      partial_rtf_text += "\\b \\ql \\fs20 ERRORE TRASCURABILE \\fs20 \\b0\\cell";
      partial_rtf_text += "\\b \\qc " + ((getvalmat(dati, "txt8_3sp") == "") ? "" : getvalmat(dati, "txt8_3sp")) + " \\b0\\cell";
      partial_rtf_text += "\\b \\qc " + ((getvalmat(dati, "txt9_3sp") == "") ? "" : getvalmat(dati, "txt9_3sp")) + " \\b0\\cell";

      partial_rtf_text += finerigaTP;

      partial_rtf_text += iniziorigaTP + "\n" + colore3 + cell3m + colore3 + bordi + cell4m + colore2 + bordi + cell6m + inizioriga2;

      partial_rtf_text += "\\b \\ql \\fs20 Materialità Operativa  \\fs20 \\b0\\cell";
      partial_rtf_text += "\\b \\qc " + ((getvalmat(dati, "txt10_3sp") == "") ? "" : getvalmat(dati, "txt10_3sp")) + " \\b0\\cell";
      partial_rtf_text += "\\b \\qc " + ((getvalmat(dati, "txt12_3sp") == "") ? "" : getvalmat(dati, "txt12_3sp")) + " \\b0\\cell";

      partial_rtf_text += finerigaTP;

      partial_rtf_text += "\\line\\pard\\bgdkdcross\\cfpat1\\shading59110\\tx2291\\par";

      #endregion

      partial_rtf_text += "\\line ";

      #region IPOTESI

      partial_rtf_text += "\\pard\\keep";

      partial_rtf_text += iniziorigaTP + "\n" + colore3 + cell3m + colore3 + cell4m + colore3 + bordi + cell6m + inizioriga2;

      partial_rtf_text += "\\b \\ql \\fs20 MATERIALITA' SU CONTO ECONOMICO \\fs20 \\b0\\cell";
      partial_rtf_text += "\\b \\qc  \\b0\\cell";
      partial_rtf_text += "\\b \\qc " + ((getvalmat(dati, "txt7_3ec") == "") ? "" : getvalmat(dati, "txt7_3ec")) + " \\b0\\cell";

      partial_rtf_text += finerigaTP;

      partial_rtf_text += iniziorigaTP + "\n" + colore3 + cell3m + colore3 + bordi + cell4m + colore4 + bordi + cell6m + inizioriga2;

      partial_rtf_text += "\\b \\ql \\fs20 ERRORE TRASCURABILE \\fs20 \\b0\\cell";
      partial_rtf_text += "\\b \\qc " + ((getvalmat(dati, "txt8_3ec") == "") ? "" : getvalmat(dati, "txt8_3ec")) + " \\b0\\cell";
      partial_rtf_text += "\\b \\qc " + ((getvalmat(dati, "txt9_3ec") == "") ? "" : getvalmat(dati, "txt9_3ec")) + " \\b0\\cell";

      partial_rtf_text += finerigaTP;

      partial_rtf_text += iniziorigaTP + "\n" + colore3 + cell3m + colore3 + bordi + cell4m + colore4 + bordi + cell6m + inizioriga2;

      partial_rtf_text += "\\b \\ql \\fs20 Materialità Operativa  \\fs20 \\b0\\cell";
      partial_rtf_text += "\\b \\qc " + ((getvalmat(dati, "txt10_3ec") == "") ? "" : getvalmat(dati, "txt10_3ec")) + " \\b0\\cell";
      partial_rtf_text += "\\b \\qc " + ((getvalmat(dati, "txt12_3ec") == "") ? "" : getvalmat(dati, "txt12_3ec")) + " \\b0\\cell";

      partial_rtf_text += finerigaTP;

      partial_rtf_text += "\\line\\pard\\bgdkdcross\\cfpat1\\shading59110\\tx2291\\par";

      #endregion

      partial_rtf_text += "\\pard\\keepn \\b Materialità da BILANCIO \\b0 \\line \\par\n";

      #region IPOTESI

      partial_rtf_text += "\\pard\\keep";

      partial_rtf_text += iniziorigaTP + "\n" + colore3 + cell3m + colore3 + cell4m + colore3 + bordi + cell6m + inizioriga2;

      partial_rtf_text += "\\b \\ql \\fs20 MATERIALITA' SU STATO PATRIMONIALE \\fs20 \\b0\\cell";
      partial_rtf_text += "\\b \\qc  \\b0\\cell";
      partial_rtf_text += "\\b \\qc " + ((getvalmat(dati, "txt7_3spBILANCIO") == "") ? "" : getvalmat(dati, "txt7_3spBILANCIO")) + " \\b0\\cell";

      partial_rtf_text += finerigaTP;

      partial_rtf_text += iniziorigaTP + "\n" + colore3 + cell3m + colore3 + bordi + cell4m + colore2 + bordi + cell6m + inizioriga2;

      partial_rtf_text += "\\b \\ql \\fs20 ERRORE TRASCURABILE \\fs20 \\b0\\cell";
      partial_rtf_text += "\\b \\qc " + ((getvalmat(dati, "txt8_3spBILANCIO") == "") ? "" : getvalmat(dati, "txt8_3spBILANCIO")) + " \\b0\\cell";
      partial_rtf_text += "\\b \\qc " + ((getvalmat(dati, "txt9_3spBILANCIO") == "") ? "" : getvalmat(dati, "txt9_3spBILANCIO")) + " \\b0\\cell";

      partial_rtf_text += finerigaTP;

      partial_rtf_text += iniziorigaTP + "\n" + colore3 + cell3m + colore3 + bordi + cell4m + colore2 + bordi + cell6m + inizioriga2;

      partial_rtf_text += "\\b \\ql \\fs20 Materialità Operativa  \\fs20 \\b0\\cell";
      partial_rtf_text += "\\b \\qc " + ((getvalmat(dati, "txt10_3spBILANCIO") == "") ? "" : getvalmat(dati, "txt10_3spBILANCIO")) + " \\b0\\cell";
      partial_rtf_text += "\\b \\qc " + ((getvalmat(dati, "txt12_3spBILANCIO") == "") ? "" : getvalmat(dati, "txt12_3spBILANCIO")) + " \\b0\\cell";

      partial_rtf_text += finerigaTP;

      partial_rtf_text += "\\line\\pard\\bgdkdcross\\cfpat1\\shading59110\\tx2291\\par";

      #endregion

      partial_rtf_text += "\\line ";

      #region IPOTESI

      partial_rtf_text += "\\pard\\keep";

      partial_rtf_text += iniziorigaTP + "\n" + colore3 + cell3m + colore3 + cell4m + colore3 + bordi + cell6m + inizioriga2;

      partial_rtf_text += "\\b \\ql \\fs20 MATERIALITA' SU CONTO ECONOMICO \\fs20 \\b0\\cell";
      partial_rtf_text += "\\b \\qc  \\b0\\cell";
      partial_rtf_text += "\\b \\qc " + ((getvalmat(dati, "txt7_3ecBILANCIO") == "") ? "" : getvalmat(dati, "txt7_3ecBILANCIO")) + " \\b0\\cell";

      partial_rtf_text += finerigaTP;

      partial_rtf_text += iniziorigaTP + "\n" + colore3 + cell3m + colore3 + bordi + cell4m + colore4 + bordi + cell6m + inizioriga2;

      partial_rtf_text += "\\b \\ql \\fs20 ERRORE TRASCURABILE \\fs20 \\b0\\cell";
      partial_rtf_text += "\\b \\qc " + ((getvalmat(dati, "txt8_3ecBILANCIO") == "") ? "" : getvalmat(dati, "txt8_3ecBILANCIO")) + " \\b0\\cell";
      partial_rtf_text += "\\b \\qc " + ((getvalmat(dati, "txt9_3ecBILANCIO") == "") ? "" : getvalmat(dati, "txt9_3ecBILANCIO")) + " \\b0\\cell";

      partial_rtf_text += finerigaTP;

      partial_rtf_text += iniziorigaTP + "\n" + colore3 + cell3m + colore3 + bordi + cell4m + colore4 + bordi + cell6m + inizioriga2;

      partial_rtf_text += "\\b \\ql \\fs20 Materialità Operativa  \\fs20 \\b0\\cell";
      partial_rtf_text += "\\b \\qc " + ((getvalmat(dati, "txt10_3ecBILANCIO") == "") ? "" : getvalmat(dati, "txt10_3ecBILANCIO")) + " \\b0\\cell";
      partial_rtf_text += "\\b \\qc " + ((getvalmat(dati, "txt12_3ecBILANCIO") == "") ? "" : getvalmat(dati, "txt12_3ecBILANCIO")) + " \\b0\\cell";

      partial_rtf_text += finerigaTP;

      partial_rtf_text += "\\line\\pard\\bgdkdcross\\cfpat1\\shading59110\\tx2291\\par";

      #endregion

      return partial_rtf_text;
    }
    #endregion





    #region Confronto Materialita 
    private string AddConfrontoMaterialita(XmlNode nodeTree, string ID, string nomefile)
    {

      DataTable dati = cBusinessObjects.GetData(int.Parse(ID), typeof(ConfrontoMaterialita), idcliente, idsessione, idtree);

#pragma warning disable CS0219 // La variabile è assegnata, ma il suo valore non viene mai usato
      string cell1ncx = "\\clvertalc\\cellx1400";
#pragma warning restore CS0219 // La variabile è assegnata, ma il suo valore non viene mai usato
      string cell2ncx = "\\clvertalc\\cellx2800";
      string cell3ncx = "\\clvertalc\\cellx4300";
      string cell4ncx = "\\clvertalc\\cellx5800";
      string cell5ncx = "\\clvertalc\\cellx7300";
      string cell6ncx = "\\clvertalc\\cellx8800";

      #region DA MATERIALITA'

      XmlDataProviderManager _lm;
      string ID_Materialità_1 = "77";
      string ID_Materialità_2 = "78";
      string ID_Materialità_3 = "199";

      bool Materialità_1 = false;
      bool Materialità_2 = false;
      bool Materialità_3 = false;

      string txt7 = "";
      string txt9 = "";
      string txt12 = "";
      string txt7_2sp = "";
      string txt7_2ce = "";
      string txt7_3sp = "";
      string txt7_3ec = "";
      string txt9_2sp = "";
      string txt9_2ce = "";
      string txt9_3sp = "";
      string txt9_3ec = "";
      string txt12_2sp = "";
      string txt12_2ce = "";
      string txt12_3sp = "";
      string txt12_3ec = "";

      string txt7BILANCIO = "";
      string txt9BILANCIO = "";
      string txt12BILANCIO = "";
      string txt7_2spBILANCIO = "";
      string txt7_2ceBILANCIO = "";
      string txt7_3spBILANCIO = "";
      string txt7_3ecBILANCIO = "";
      string txt9_2spBILANCIO = "";
      string txt9_2ceBILANCIO = "";
      string txt9_3spBILANCIO = "";
      string txt9_3ecBILANCIO = "";
      string txt12_2spBILANCIO = "";
      string txt12_2ceBILANCIO = "";
      string txt12_3spBILANCIO = "";
      string txt12_3ecBILANCIO = "";

      string txt7VALORE = "";
      string txt9VALORE = "";
      string txt12VALORE = "";
      string txt7_2spVALORE = "";
      string txt7_2ceVALORE = "";
      string txt7_3spVALORE = "";
      string txt7_3ecVALORE = "";
      string txt9_2spVALORE = "";
      string txt9_2ceVALORE = "";
      string txt9_3spVALORE = "";
      string txt9_3ecVALORE = "";
      string txt12_2spVALORE = "";
      string txt12_2ceVALORE = "";
      string txt12_3spVALORE = "";
      string txt12_3ecVALORE = "";

      string txt7PERCENTUALE = "";
      string txt9PERCENTUALE = "";
      string txt12PERCENTUALE = "";
      string txt7_2spPERCENTUALE = "";
      string txt7_2cePERCENTUALE = "";
      string txt7_3spPERCENTUALE = "";
      string txt7_3ecPERCENTUALE = "";
      string txt9_2spPERCENTUALE = "";
      string txt9_2cePERCENTUALE = "";
      string txt9_3spPERCENTUALE = "";
      string txt9_3ecPERCENTUALE = "";
      string txt12_2spPERCENTUALE = "";
      string txt12_2cePERCENTUALE = "";
      string txt12_3spPERCENTUALE = "";
      string txt12_3ecPERCENTUALE = "";

      MasterFile mf = MasterFile.Create();
      string FileDataRevisione = mf.GetRevisioneAssociataFromConclusioneFile(nomefile);

      if (FileDataRevisione != "")
      {
        _lm = new XmlDataProviderManager(FileDataRevisione);
      }
      else
      {
        _lm = null;
      }

      DataTable tmpNode = null;

      DataTable tmpNode_true = null;

      string idsessionedatimaterialita = cBusinessObjects.CercaSessione("Conclusione", "Revisione", idsessione.ToString(), cBusinessObjects.idcliente);

      tmpNode = cBusinessObjects.GetData(int.Parse(ID_Materialità_1), typeof(Excel_LimiteMaterialitaSPCE), idcliente, int.Parse(idsessionedatimaterialita), 1);


      string statomat = "";
      DataTable statom = cBusinessObjects.GetData(int.Parse(ID_Materialità_1), typeof(StatoNodi), idcliente, int.Parse(idsessionedatimaterialita), 1);
      foreach (DataRow dd in statom.Rows)
      {
        statomat = dd["Stato"].ToString().Trim();
      }

      if (tmpNode.Rows.Count > 0 && statomat != "" && ((App.TipoTreeNodeStato)(Convert.ToInt32(statomat))) == App.TipoTreeNodeStato.Completato)
      {
        Materialità_1 = true;
        tmpNode_true = tmpNode;
      }


      tmpNode = cBusinessObjects.GetData(int.Parse(ID_Materialità_2), typeof(Excel_LimiteMaterialitaSPCE), idcliente, int.Parse(idsessionedatimaterialita), 1);


      statomat = "";
      statom = cBusinessObjects.GetData(int.Parse(ID_Materialità_2), typeof(StatoNodi), idcliente, int.Parse(idsessionedatimaterialita), 1);
      foreach (DataRow dd in statom.Rows)
      {
        statomat = dd["Stato"].ToString().Trim();
      }

      if (tmpNode.Rows.Count > 0 && statomat != "" && ((App.TipoTreeNodeStato)(Convert.ToInt32(statomat))) == App.TipoTreeNodeStato.Completato)
      {
        Materialità_2 = true;
        tmpNode_true = tmpNode;
      }

      tmpNode = cBusinessObjects.GetData(int.Parse(ID_Materialità_3), typeof(Excel_LimiteMaterialitaSPCE), idcliente, int.Parse(idsessionedatimaterialita), 1);


      statomat = "";
      statom = cBusinessObjects.GetData(int.Parse(ID_Materialità_3), typeof(StatoNodi), idcliente, int.Parse(idsessionedatimaterialita), 1);
      foreach (DataRow dd in statom.Rows)
      {
        statomat = dd["Stato"].ToString().Trim();
      }

      if (tmpNode.Rows.Count > 0 && statomat != "" && ((App.TipoTreeNodeStato)(Convert.ToInt32(statomat))) == App.TipoTreeNodeStato.Completato)
      {
        Materialità_3 = true;
        tmpNode_true = tmpNode;
      }

      if (Materialità_1 == false && Materialità_2 == false && Materialità_3 == false)
      {
        return "";
      }

      if (((Materialità_1) ? 1 : 0) + ((Materialità_2) ? 1 : 0) + ((Materialità_3) ? 1 : 0) >= 2)
      {
        return "";
      }

      if (tmpNode_true != null)
      {
        foreach (DataRow dtrow in tmpNode_true.Rows)
        {
          if (dtrow["ID"].ToString() == "txt7")
            txt7 = dtrow["value"].ToString();
          if (dtrow["ID"].ToString() == "txt7_2sp")
            txt7_2sp = dtrow["value"].ToString();
          if (dtrow["ID"].ToString() == "txt7_2ce")
            txt7_2ce = dtrow["value"].ToString();
          if (dtrow["ID"].ToString() == "txt7_3sp")
            txt7_3sp = dtrow["value"].ToString();
          if (dtrow["ID"].ToString() == "txt7_3ec")
            txt7_3ec = dtrow["value"].ToString();
          if (dtrow["ID"].ToString() == "txt9")
            txt9 = dtrow["value"].ToString();
          if (dtrow["ID"].ToString() == "txt9_2sp")
            txt9_2sp = dtrow["value"].ToString();
          if (dtrow["ID"].ToString() == "txt9_2ce")
            txt9_2ce = dtrow["value"].ToString();
          if (dtrow["ID"].ToString() == "txt9_3ec")
            txt9_3ec = dtrow["value"].ToString();
          if (dtrow["ID"].ToString() == "txt7BILANCIO")
            txt7BILANCIO = dtrow["value"].ToString();
          if (dtrow["ID"].ToString() == "txt7_2spBILANCIO")
            txt7_2spBILANCIO = dtrow["value"].ToString();

          if (dtrow["ID"].ToString() == "txt7_2ceBILANCIO")
            txt7_2ceBILANCIO = dtrow["value"].ToString();

          if (dtrow["ID"].ToString() == "txt7_3spBILANCIO")
            txt7_3spBILANCIO = dtrow["value"].ToString();

          if (dtrow["ID"].ToString() == "txt7_3ecBILANCIO")
            txt7_3ecBILANCIO = dtrow["value"].ToString();

          if (dtrow["ID"].ToString() == "txt9BILANCIO")
            txt9BILANCIO = dtrow["value"].ToString();

          if (dtrow["ID"].ToString() == "txt9_2spBILANCIO")
            txt9_2spBILANCIO = dtrow["value"].ToString();

          if (dtrow["ID"].ToString() == "txt9_2ceBILANCIO")
            txt9_2ceBILANCIO = dtrow["value"].ToString();


          if (dtrow["ID"].ToString() == "txt9_3spBILANCIO")
            txt9_3spBILANCIO = dtrow["value"].ToString();

          if (dtrow["ID"].ToString() == "txt9_3ecBILANCIO")
            txt9_3ecBILANCIO = dtrow["value"].ToString();

          if (dtrow["ID"].ToString() == "txt12")
            txt12 = dtrow["value"].ToString();

          if (dtrow["ID"].ToString() == "txt12_2sp")
            txt12_2sp = dtrow["value"].ToString();

          if (dtrow["ID"].ToString() == "txt12_2sp")
            txt12_2sp = dtrow["value"].ToString();

          if (dtrow["ID"].ToString() == "txt12_2ce")
            txt12_2ce = dtrow["value"].ToString();

          if (dtrow["ID"].ToString() == "txt12_3sp")
            txt12_3sp = dtrow["value"].ToString();

          if (dtrow["ID"].ToString() == "txt12_3ec")
            txt12_3ec = dtrow["value"].ToString();

          if (dtrow["ID"].ToString() == "txt12BILANCIO")
            txt12BILANCIO = dtrow["value"].ToString();

          if (dtrow["ID"].ToString() == "txt12_2spBILANCIO")
            txt12_2spBILANCIO = dtrow["value"].ToString();

          if (dtrow["ID"].ToString() == "txt12_2ceBILANCIO")
            txt12_2ceBILANCIO = dtrow["value"].ToString();

          if (dtrow["ID"].ToString() == "txt12_3spBILANCIO")
            txt12_3spBILANCIO = dtrow["value"].ToString();

          if (dtrow["ID"].ToString() == "txt12_3ecBILANCIO")
            txt12_3ecBILANCIO = dtrow["value"].ToString();


        }
      }
      #endregion

      #region CONFRONTO MATERIALITA' CALCOLO
      txt7VALORE = ConvertNumberNoDecimal((Convert.ToDouble((txt7BILANCIO == "") ? "0" : txt7BILANCIO) - Convert.ToDouble((txt7 == "") ? "0" : txt7)).ToString());
      txt9VALORE = ConvertNumberNoDecimal((Convert.ToDouble((txt9BILANCIO == "") ? "0" : txt9BILANCIO) - Convert.ToDouble((txt9 == "") ? "0" : txt9)).ToString());
      txt12VALORE = ConvertNumberNoDecimal((Convert.ToDouble((txt12BILANCIO == "") ? "0" : txt12BILANCIO) - Convert.ToDouble((txt12 == "") ? "0" : txt12)).ToString());

      txt7_2spVALORE = ConvertNumberNoDecimal((Convert.ToDouble((txt7_2spBILANCIO == "") ? "0" : txt7_2spBILANCIO) - Convert.ToDouble((txt7_2sp == "") ? "0" : txt7_2sp)).ToString());
      txt7_2ceVALORE = ConvertNumberNoDecimal((Convert.ToDouble((txt7_2ceBILANCIO == "") ? "0" : txt7_2ceBILANCIO) - Convert.ToDouble((txt7_2ce == "") ? "0" : txt7_2ce)).ToString());
      txt7_3spVALORE = ConvertNumberNoDecimal((Convert.ToDouble((txt7_3spBILANCIO == "") ? "0" : txt7_3spBILANCIO) - Convert.ToDouble((txt7_3sp == "") ? "0" : txt7_3sp)).ToString());
      txt7_3ecVALORE = ConvertNumberNoDecimal((Convert.ToDouble((txt7_3ecBILANCIO == "") ? "0" : txt7_3ecBILANCIO) - Convert.ToDouble((txt7_3ec == "") ? "0" : txt7_3ec)).ToString());

      txt9_2spVALORE = ConvertNumberNoDecimal((Convert.ToDouble((txt9_2spBILANCIO == "") ? "0" : txt9_2spBILANCIO) - Convert.ToDouble((txt9_2sp == "") ? "0" : txt9_2sp)).ToString());
      txt9_2ceVALORE = ConvertNumberNoDecimal((Convert.ToDouble((txt9_2ceBILANCIO == "") ? "0" : txt9_2ceBILANCIO) - Convert.ToDouble((txt9_2ce == "") ? "0" : txt9_2ce)).ToString());
      txt9_3spVALORE = ConvertNumberNoDecimal((Convert.ToDouble((txt9_3spBILANCIO == "") ? "0" : txt9_3spBILANCIO) - Convert.ToDouble((txt9_3sp == "") ? "0" : txt9_3sp)).ToString());
      txt9_3ecVALORE = ConvertNumberNoDecimal((Convert.ToDouble((txt9_3ecBILANCIO == "") ? "0" : txt9_3ecBILANCIO) - Convert.ToDouble((txt9_3ec == "") ? "0" : txt9_3ec)).ToString());

      txt12_2spVALORE = ConvertNumberNoDecimal((Convert.ToDouble((txt12_2spBILANCIO == "") ? "0" : txt12_2spBILANCIO) - Convert.ToDouble((txt12_2sp == "") ? "0" : txt12_2sp)).ToString());
      txt12_2ceVALORE = ConvertNumberNoDecimal((Convert.ToDouble((txt12_2ceBILANCIO == "") ? "0" : txt12_2ceBILANCIO) - Convert.ToDouble((txt12_2ce == "") ? "0" : txt12_2ce)).ToString());
      txt12_3spVALORE = ConvertNumberNoDecimal((Convert.ToDouble((txt12_3spBILANCIO == "") ? "0" : txt12_3spBILANCIO) - Convert.ToDouble((txt12_3sp == "") ? "0" : txt12_3sp)).ToString());
      txt12_3ecVALORE = ConvertNumberNoDecimal((Convert.ToDouble((txt12_3ecBILANCIO == "") ? "0" : txt12_3ecBILANCIO) - Convert.ToDouble((txt12_3ec == "") ? "0" : txt12_3ec)).ToString());


      txt7PERCENTUALE = ConvertPercentNoSymbol(((Convert.ToDouble((txt7BILANCIO == "") ? "0" : txt7BILANCIO) - Convert.ToDouble((txt7 == "") ? "0" : txt7)) / Convert.ToDouble((txt7 == "") ? "0" : txt7)).ToString());
      txt9PERCENTUALE = ConvertPercentNoSymbol(((Convert.ToDouble((txt9BILANCIO == "") ? "0" : txt9BILANCIO) - Convert.ToDouble((txt9 == "") ? "0" : txt9)) / Convert.ToDouble((txt9 == "") ? "0" : txt9)).ToString());
      txt12PERCENTUALE = ConvertPercentNoSymbol(((Convert.ToDouble((txt12BILANCIO == "") ? "0" : txt12BILANCIO) - Convert.ToDouble((txt12 == "") ? "0" : txt12)) / Convert.ToDouble((txt12 == "") ? "0" : txt12)).ToString());

      txt7_2spPERCENTUALE = ConvertPercentNoSymbol(((Convert.ToDouble((txt7_2spBILANCIO == "") ? "0" : txt7_2spBILANCIO) - Convert.ToDouble((txt7_2sp == "") ? "0" : txt7_2sp)) / Convert.ToDouble((txt7_2sp == "") ? "0" : txt7_2sp)).ToString());
      txt7_2cePERCENTUALE = ConvertPercentNoSymbol(((Convert.ToDouble((txt7_2ceBILANCIO == "") ? "0" : txt7_2ceBILANCIO) - Convert.ToDouble((txt7_2ce == "") ? "0" : txt7_2ce)) / Convert.ToDouble((txt7_2ce == "") ? "0" : txt7_2ce)).ToString());
      txt7_3spPERCENTUALE = ConvertPercentNoSymbol(((Convert.ToDouble((txt7_3spBILANCIO == "") ? "0" : txt7_3spBILANCIO) - Convert.ToDouble((txt7_3sp == "") ? "0" : txt7_3sp)) / Convert.ToDouble((txt7_3sp == "") ? "0" : txt7_3sp)).ToString());
      txt7_3ecPERCENTUALE = ConvertPercentNoSymbol(((Convert.ToDouble((txt7_3ecBILANCIO == "") ? "0" : txt7_3ecBILANCIO) - Convert.ToDouble((txt7_3ec == "") ? "0" : txt7_3ec)) / Convert.ToDouble((txt7_3ec == "") ? "0" : txt7_3ec)).ToString());

      txt9_2spPERCENTUALE = ConvertPercentNoSymbol(((Convert.ToDouble((txt9_2spBILANCIO == "") ? "0" : txt9_2spBILANCIO) - Convert.ToDouble((txt9_2sp == "") ? "0" : txt9_2sp)) / Convert.ToDouble((txt9_2sp == "") ? "0" : txt9_2sp)).ToString());
      txt9_2cePERCENTUALE = ConvertPercentNoSymbol(((Convert.ToDouble((txt9_2ceBILANCIO == "") ? "0" : txt9_2ceBILANCIO) - Convert.ToDouble((txt9_2ce == "") ? "0" : txt9_2ce)) / Convert.ToDouble((txt9_2ce == "") ? "0" : txt9_2ce)).ToString());
      txt9_3spPERCENTUALE = ConvertPercentNoSymbol(((Convert.ToDouble((txt9_3spBILANCIO == "") ? "0" : txt9_3spBILANCIO) - Convert.ToDouble((txt9_3sp == "") ? "0" : txt9_3sp)) / Convert.ToDouble((txt9_3sp == "") ? "0" : txt9_3sp)).ToString());
      txt9_3ecPERCENTUALE = ConvertPercentNoSymbol(((Convert.ToDouble((txt9_3ecBILANCIO == "") ? "0" : txt9_3ecBILANCIO) - Convert.ToDouble((txt9_3ec == "") ? "0" : txt9_3ec)) / Convert.ToDouble((txt9_3ec == "") ? "0" : txt9_3ec)).ToString());

      txt12_2spPERCENTUALE = ConvertPercentNoSymbol(((Convert.ToDouble((txt12_2spBILANCIO == "") ? "0" : txt12_2spBILANCIO) - Convert.ToDouble((txt12_2sp == "") ? "0" : txt12_2sp)) / Convert.ToDouble((txt12_2sp == "") ? "0" : txt12_2sp)).ToString());
      txt12_2cePERCENTUALE = ConvertPercentNoSymbol(((Convert.ToDouble((txt12_2ceBILANCIO == "") ? "0" : txt12_2ceBILANCIO) - Convert.ToDouble((txt12_2ce == "") ? "0" : txt12_2ce)) / Convert.ToDouble((txt12_2ce == "") ? "0" : txt12_2ce)).ToString());
      txt12_3spPERCENTUALE = ConvertPercentNoSymbol(((Convert.ToDouble((txt12_3spBILANCIO == "") ? "0" : txt12_3spBILANCIO) - Convert.ToDouble((txt12_3sp == "") ? "0" : txt12_3sp)) / Convert.ToDouble((txt12_3sp == "") ? "0" : txt12_3sp)).ToString());
      txt12_3ecPERCENTUALE = ConvertPercentNoSymbol(((Convert.ToDouble((txt12_3ecBILANCIO == "") ? "0" : txt12_3ecBILANCIO) - Convert.ToDouble((txt12_3ec == "") ? "0" : txt12_3ec)) / Convert.ToDouble((txt12_3ec == "") ? "0" : txt12_3ec)).ToString());

      #endregion

      string partial_rtf_text = "";

      if (Materialità_1 == true)
      {
        partial_rtf_text += "\\line\\pard\\keepn\\b\\f0 " + "1° TIPO - Media fra minimi e massimi per S.P. e C.E." + "\\b0 \\line \\par\n";
      }
      else if (Materialità_2 == true)
      {
        partial_rtf_text += "\\line\\pard\\keepn\\b\\f0 " + "2° TIPO - Media fra minimi e massimi per S.P. e C.E." + "\\b0 \\line \\par\n";
      }
      else if (Materialità_3 == true)
      {
        partial_rtf_text += "\\line\\pard\\keepn\\b\\f0 " + "3° TIPO - Stabilito con criteri alternativi" + "\\b0 \\line \\par\n";
      }
      #region IPOTESI

      partial_rtf_text += "\\pard\\keep";

      partial_rtf_text += iniziorigaTP + "\n" + colore3 + cell2ncx + colore3 + bordi + cell4ncx + colore3 + bordi + cell6ncx + inizioriga2;

      partial_rtf_text += "\\b \\ql \\b0\\cell";
      partial_rtf_text += "\\b \\qc MATERIALITA' / SIGNIFICATIVITA'\\b0\\cell";
      partial_rtf_text += "\\b \\qc VARIAZIONE \\b0\\cell";

      partial_rtf_text += finerigaTP;

      partial_rtf_text += iniziorigaTP + "\n" + colore3 + cell2ncx + colore3 + bordi + cell3ncx + colore3 + bordi + cell4ncx + colore3 + bordi + cell5ncx + colore3 + bordi + cell6ncx + inizioriga2;

      partial_rtf_text += "\\b \\ql  \\b0\\cell";
      partial_rtf_text += "\\b \\qc PIANIFICATA \\b0\\cell";
      partial_rtf_text += "\\b \\qc DA BILANCIO \\b0\\cell";
      partial_rtf_text += "\\b \\qc VALORE \\b0\\cell";
      partial_rtf_text += "\\b \\qc % \\b0\\cell";

      partial_rtf_text += finerigaTP;

      if (Materialità_1 == true)
      {
        partial_rtf_text += iniziorigaTP + "\n" + colore3 + bordi + cell2ncx + colore3 + bordi + cell3ncx + colore3 + bordi + cell4ncx + colore3 + bordi + cell5ncx + colore3 + bordi + cell6ncx + inizioriga2;

        partial_rtf_text += " \\ql \\fs20 MATERIALITA' \\fs20 \\b0\\cell";
        partial_rtf_text += " \\qr " + txt7 + " \\b0\\cell";
        partial_rtf_text += " \\qr " + txt7BILANCIO + " \\b0\\cell";
        partial_rtf_text += " \\qr " + txt7VALORE + " \\b0\\cell";
        partial_rtf_text += " \\qr " + txt7PERCENTUALE + " \\b0\\cell";

        partial_rtf_text += finerigaTP;

        partial_rtf_text += iniziorigaTP + "\n" + colore3 + bordi + cell2ncx + colore3 + bordi + cell3ncx + colore3 + bordi + cell4ncx + colore3 + bordi + cell5ncx + colore3 + bordi + cell6ncx + inizioriga2;

        partial_rtf_text += " \\ql \\fs20 ERRORE TRASCURABILE \\fs20 \\b0\\cell";
        partial_rtf_text += " \\qr " + txt9 + " \\b0\\cell";
        partial_rtf_text += " \\qr " + txt9BILANCIO + " \\b0\\cell";
        partial_rtf_text += " \\qr " + txt9VALORE + " \\b0\\cell";
        partial_rtf_text += " \\qr " + txt9PERCENTUALE + " \\b0\\cell";

        partial_rtf_text += finerigaTP;

        partial_rtf_text += iniziorigaTP + "\n" + colore3 + bordi + cell2ncx + colore3 + bordi + cell3ncx + colore3 + bordi + cell4ncx + colore3 + bordi + cell5ncx + colore3 + bordi + cell6ncx + inizioriga2;

        partial_rtf_text += " \\ql \\fs20 MATERIALITA' OPERATIVA \\fs20 \\b0\\cell";
        partial_rtf_text += " \\qr " + txt12 + " \\b0\\cell";
        partial_rtf_text += " \\qr " + txt12BILANCIO + " \\b0\\cell";
        partial_rtf_text += " \\qr " + txt12VALORE + " \\b0\\cell";
        partial_rtf_text += " \\qr " + txt12PERCENTUALE + " \\b0\\cell";

        partial_rtf_text += finerigaTP;
      }
      else if (Materialità_2 == true)
      {
        partial_rtf_text += iniziorigaTP + "\n" + colore3 + bordi + cell2ncx + colore3 + bordi + cell3ncx + colore3 + bordi + cell4ncx + colore3 + bordi + cell5ncx + colore3 + bordi + cell6ncx + inizioriga2;

        partial_rtf_text += " \\ql \\fs20 MATERIALITA' S.P. \\fs20 \\b0\\cell";
        partial_rtf_text += " \\qr " + txt7_2sp + " \\b0\\cell";
        partial_rtf_text += " \\qr " + txt7_2spBILANCIO + " \\b0\\cell";
        partial_rtf_text += " \\qr " + txt7_2spVALORE + " \\b0\\cell";
        partial_rtf_text += " \\qr " + txt7_2spPERCENTUALE + " \\b0\\cell";

        partial_rtf_text += finerigaTP;

        partial_rtf_text += iniziorigaTP + "\n" + colore3 + bordi + cell2ncx + colore3 + bordi + cell3ncx + colore3 + bordi + cell4ncx + colore3 + bordi + cell5ncx + colore3 + bordi + cell6ncx + inizioriga2;

        partial_rtf_text += " \\ql \\fs20 ERRORE TRASCURABILE \\fs20 \\b0\\cell";
        partial_rtf_text += " \\qr " + txt9_2sp + " \\b0\\cell";
        partial_rtf_text += " \\qr " + txt9_2spBILANCIO + " \\b0\\cell";
        partial_rtf_text += " \\qr " + txt9_2spVALORE + " \\b0\\cell";
        partial_rtf_text += " \\qr " + txt9_2spPERCENTUALE + " \\b0\\cell";

        partial_rtf_text += finerigaTP;

        partial_rtf_text += iniziorigaTP + "\n" + colore3 + bordi + cell2ncx + colore3 + bordi + cell3ncx + colore3 + bordi + cell4ncx + colore3 + bordi + cell5ncx + colore3 + bordi + cell6ncx + inizioriga2;

        partial_rtf_text += " \\ql \\fs20 MATERIALITA' OPERATIVA \\fs20 \\b0\\cell";
        partial_rtf_text += " \\qr " + txt12_2sp + " \\b0\\cell";
        partial_rtf_text += " \\qr " + txt12_2spBILANCIO + " \\b0\\cell";
        partial_rtf_text += " \\qr " + txt12_2spVALORE + " \\b0\\cell";
        partial_rtf_text += " \\qr " + txt12_2spPERCENTUALE + " \\b0\\cell";

        partial_rtf_text += finerigaTP;

        partial_rtf_text += iniziorigaTP + "\n" + colore3 + bordi + cell2ncx + colore3 + bordi + cell3ncx + colore3 + bordi + cell4ncx + colore3 + bordi + cell5ncx + colore3 + bordi + cell6ncx + inizioriga2;

        partial_rtf_text += " \\ql \\fs20 MATERIALITA' C.E. \\fs20 \\b0\\cell";
        partial_rtf_text += " \\qr " + txt7_2ce + " \\b0\\cell";
        partial_rtf_text += " \\qr " + txt7_2ceBILANCIO + " \\b0\\cell";
        partial_rtf_text += " \\qr " + txt7_2ceVALORE + " \\b0\\cell";
        partial_rtf_text += " \\qr " + txt7_2cePERCENTUALE + " \\b0\\cell";

        partial_rtf_text += finerigaTP;

        partial_rtf_text += iniziorigaTP + "\n" + colore3 + bordi + cell2ncx + colore3 + bordi + cell3ncx + colore3 + bordi + cell4ncx + colore3 + bordi + cell5ncx + colore3 + bordi + cell6ncx + inizioriga2;

        partial_rtf_text += " \\ql \\fs20 ERRORE TRASCURABILE \\fs20 \\b0\\cell";
        partial_rtf_text += " \\qr " + txt9_2ce + " \\b0\\cell";
        partial_rtf_text += " \\qr " + txt9_2ceBILANCIO + " \\b0\\cell";
        partial_rtf_text += " \\qr " + txt9_2ceVALORE + " \\b0\\cell";
        partial_rtf_text += " \\qr " + txt9_2cePERCENTUALE + " \\b0\\cell";

        partial_rtf_text += finerigaTP;

        partial_rtf_text += iniziorigaTP + "\n" + colore3 + bordi + cell2ncx + colore3 + bordi + cell3ncx + colore3 + bordi + cell4ncx + colore3 + bordi + cell5ncx + colore3 + bordi + cell6ncx + inizioriga2;

        partial_rtf_text += " \\ql \\fs20 MATERIALITA' OPERATIVA \\fs20 \\b0\\cell";
        partial_rtf_text += " \\qr " + txt12_2ce + " \\b0\\cell";
        partial_rtf_text += " \\qr " + txt12_2ceBILANCIO + " \\b0\\cell";
        partial_rtf_text += " \\qr " + txt12_2ceVALORE + " \\b0\\cell";
        partial_rtf_text += " \\qr " + txt12_2cePERCENTUALE + " \\b0\\cell";

        partial_rtf_text += finerigaTP;
      }
      else if (Materialità_3 == true)
      {
        partial_rtf_text += iniziorigaTP + "\n" + colore3 + bordi + cell2ncx + colore3 + bordi + cell3ncx + colore3 + bordi + cell4ncx + colore3 + bordi + cell5ncx + colore3 + bordi + cell6ncx + inizioriga2;

        partial_rtf_text += " \\ql \\fs20 MATERIALITA'  S.P. \\fs20 \\b0\\cell";
        partial_rtf_text += " \\qr " + txt7_3sp + " \\b0\\cell";
        partial_rtf_text += " \\qr " + txt7_3spBILANCIO + " \\b0\\cell";
        partial_rtf_text += " \\qr " + txt7_3spVALORE + " \\b0\\cell";
        partial_rtf_text += " \\qr " + txt7_3spPERCENTUALE + " \\b0\\cell";

        partial_rtf_text += finerigaTP;

        partial_rtf_text += iniziorigaTP + "\n" + colore3 + bordi + cell2ncx + colore3 + bordi + cell3ncx + colore3 + bordi + cell4ncx + colore3 + bordi + cell5ncx + colore3 + bordi + cell6ncx + inizioriga2;

        partial_rtf_text += " \\ql \\fs20 ERRORE TRASCURABILE \\fs20 \\b0\\cell";
        partial_rtf_text += " \\qr " + txt9_3sp + " \\b0\\cell";
        partial_rtf_text += " \\qr " + txt9_3spBILANCIO + " \\b0\\cell";
        partial_rtf_text += " \\qr " + txt9_3spVALORE + " \\b0\\cell";
        partial_rtf_text += " \\qr " + txt9_3spPERCENTUALE + " \\b0\\cell";

        partial_rtf_text += finerigaTP;

        partial_rtf_text += iniziorigaTP + "\n" + colore3 + bordi + cell2ncx + colore3 + bordi + cell3ncx + colore3 + bordi + cell4ncx + colore3 + bordi + cell5ncx + colore3 + bordi + cell6ncx + inizioriga2;

        partial_rtf_text += " \\ql \\fs20 MATERIALITA' OPERATIVA \\fs20 \\b0\\cell";
        partial_rtf_text += " \\qr " + txt12_3sp + " \\b0\\cell";
        partial_rtf_text += " \\qr " + txt12_3spBILANCIO + " \\b0\\cell";
        partial_rtf_text += " \\qr " + txt12_3spVALORE + " \\b0\\cell";
        partial_rtf_text += " \\qr " + txt12_3spPERCENTUALE + " \\b0\\cell";

        partial_rtf_text += finerigaTP;

        partial_rtf_text += iniziorigaTP + "\n" + colore3 + bordi + cell2ncx + colore3 + bordi + cell3ncx + colore3 + bordi + cell4ncx + colore3 + bordi + cell5ncx + colore3 + bordi + cell6ncx + inizioriga2;

        partial_rtf_text += " \\ql \\fs20 MATERIALITA' C.E.\\fs20 \\b0\\cell";
        partial_rtf_text += " \\qr " + txt7_3ec + " \\b0\\cell";
        partial_rtf_text += " \\qr " + txt7_3ecBILANCIO + " \\b0\\cell";
        partial_rtf_text += " \\qr " + txt7_3ecVALORE + " \\b0\\cell";
        partial_rtf_text += " \\qr " + txt7_3ecPERCENTUALE + " \\b0\\cell";

        partial_rtf_text += finerigaTP;

        partial_rtf_text += iniziorigaTP + "\n" + colore3 + bordi + cell2ncx + colore3 + bordi + cell3ncx + colore3 + bordi + cell4ncx + colore3 + bordi + cell5ncx + colore3 + bordi + cell6ncx + inizioriga2;

        partial_rtf_text += " \\ql \\fs20 ERRORE TRASCURABILE \\fs20 \\b0\\cell";
        partial_rtf_text += " \\qr " + txt9_3ec + " \\b0\\cell";
        partial_rtf_text += " \\qr " + txt9_3ecBILANCIO + " \\b0\\cell";
        partial_rtf_text += " \\qr " + txt9_3ecVALORE + " \\b0\\cell";
        partial_rtf_text += " \\qr " + txt9_3ecPERCENTUALE + " \\b0\\cell";

        partial_rtf_text += finerigaTP;

        partial_rtf_text += iniziorigaTP + "\n" + colore3 + bordi + cell2ncx + colore3 + bordi + cell3ncx + colore3 + bordi + cell4ncx + colore3 + bordi + cell5ncx + colore3 + bordi + cell6ncx + inizioriga2;

        partial_rtf_text += " \\ql \\fs20 MATERIALITA' OPERATIVA \\fs20 \\b0\\cell";
        partial_rtf_text += " \\qr " + txt12_3ec + " \\b0\\cell";
        partial_rtf_text += " \\qr " + txt12_3ecBILANCIO + " \\b0\\cell";
        partial_rtf_text += " \\qr " + txt12_3ecVALORE + " \\b0\\cell";
        partial_rtf_text += " \\qr " + txt12_3ecPERCENTUALE + " \\b0\\cell";

        partial_rtf_text += finerigaTP;
      }

      partial_rtf_text += "\\line\\pard\\bgdkdcross\\cfpat1\\shading59110\\tx2291\\par";

      #endregion

      partial_rtf_text += "\\line ";

      return partial_rtf_text;
    }
    #endregion

    #region Affidamenti
    private string AddAffidamenti(XmlNode nodeTree, string ID)
    {

      DataTable dati = cBusinessObjects.GetData(int.Parse(ID), typeof(Excel_Affidamenti), idcliente, idsessione, idtree);


      string partial_rtf_text = "";
      string partial_partial_rtf_text = "";
      bool rowdone = false;

      ArrayList periodi = new ArrayList();
      foreach (DataRow item in dati.Rows)
      {
        if (item["banca"].ToString() != "" && !periodi.Contains(item["banca"].ToString()))
        {
          periodi.Add(item["banca"].ToString());
        }
      }


      foreach (string periodo in periodi)
      {
        partial_rtf_text = "";
        rowdone = false;

        partial_rtf_text += "\\pard\\keepn\\b\\f0 " + periodo + ":\\b0 \\line \\par\n";
       

        Hashtable Header = new Hashtable();
        Hashtable Colonne = new Hashtable();
        Hashtable Lunghezze = new Hashtable();
        Hashtable Tipologia = new Hashtable();

        Header.Add(1, "TipoAffidamento");
        Colonne.Add(1, "tipoaffidamento");
        Lunghezze.Add(1, 120);
        Tipologia.Add(1, TipologiaDato.TipoAffidamento);
        Header.Add(2, "ad inizio esercizio");
        Colonne.Add(2, "inizio");
        Lunghezze.Add(2, 90);
        Tipologia.Add(2, TipologiaDato.Double);
        Header.Add(3, "alla data verifica");
        Colonne.Add(3, "dataverifica");
        Lunghezze.Add(3, 95);
        Tipologia.Add(3, TipologiaDato.Double);
        Header.Add(4, "utilizzo");
        Colonne.Add(4, "utilizzo");
        Lunghezze.Add(4, 95);
        Tipologia.Add(4, TipologiaDato.Double);
        Header.Add(5, "scadenza");
        Colonne.Add(5, "scadenza");
        Lunghezze.Add(5, 95);
        Tipologia.Add(5, TipologiaDato.Stringa);

        partial_rtf_text += CreateTable(Header, Lunghezze, "16");

        int index = 0;
        foreach (DataRow item in dati.Rows)
        {

          if (item["banca"].ToString() == periodo)
          {
            partial_rtf_text += AddNodoTable(item, index++, Colonne, Tipologia, Lunghezze);

            if ((item["utilizzo"].ToString() != "0" && item["utilizzo"].ToString() != "") || (item["inizio"].ToString() != "0" && item["inizio"].ToString() != "") || (item["scadenza"].ToString() != "0" && item["scadenza"].ToString() != "") || (item["dataverifica"].ToString() != "0" && item["dataverifica"].ToString() != ""))
            {
              rowdone = true;
            }
          }
        }

        partial_rtf_text += "\\pard\\bgdkdcross\\cfpat1\\shading59110\\tx2291\\par";

        if (rowdone)
        {
          partial_partial_rtf_text += partial_rtf_text;
        }
      }

      partial_rtf_text = "";
      rowdone = false;

      partial_rtf_text += "\\pard\\keepn\\b\\f0 RIEPILOGO\\b0 \\line \\par\n";

      List<string> Alias = new List<string>();

      Alias.Add("a");
      Alias.Add("b");
      Alias.Add("c");
      Alias.Add("d");
      Alias.Add("e");
      Alias.Add("f");
      Alias.Add("g");
      Alias.Add("h");
      Alias.Add("i");
      Alias.Add("l");
      Alias.Add("m");
      Alias.Add("n");

      Hashtable htAlias = new Hashtable();
      htAlias.Add("a", "conto corrente");
      htAlias.Add("b", "sbf - riba");
      htAlias.Add("c", "anticipo fatture");
      htAlias.Add("d", "anticipo export");
      htAlias.Add("e", "anticipo import");
      htAlias.Add("f", "chirografario");
      htAlias.Add("g", "mutui ipotecari o similari");
      htAlias.Add("h", "operazioni a termine");
      htAlias.Add("i", "finanza derivata");
      htAlias.Add("l", "garanzie prestate");
      htAlias.Add("m", "altro 1");
      htAlias.Add("n", "altro 2");

      Hashtable htInizio = new Hashtable();
      Hashtable htFine = new Hashtable();
      Hashtable htUtilizzo = new Hashtable();

      foreach (DataRow item in dati.Rows)
      {

        if (item["tipoaffidamento"].ToString() == "")
        {
          continue;
        }

        if (item["tipoaffidamento"].ToString() == "")
        {
          continue;
        }

        if (!htInizio.Contains(item["tipoaffidamento"].ToString()))
        {
          htInizio.Add(item["tipoaffidamento"].ToString(), 0.0);
        }

        if (item["inizio"].ToString() != "")
        {
          double value = 0.0;
          double.TryParse(item["inizio"].ToString(), out value);
          htInizio[item["tipoaffidamento"].ToString()] = (double)htInizio[item["tipoaffidamento"].ToString()] + value;
        }

        if (!htFine.Contains(item["tipoaffidamento"].ToString()))
        {
          htFine.Add(item["tipoaffidamento"].ToString(), 0.0);
        }

        if (item["dataverifica"].ToString() != "")
        {
          double value = 0.0;
          double.TryParse(item["dataverifica"].ToString(), out value);
          htFine[item["tipoaffidamento"].ToString()] = (double)htFine[item["tipoaffidamento"].ToString()] + value;
        }

        if (!htUtilizzo.Contains(item["tipoaffidamento"].ToString()))
        {
          htUtilizzo.Add(item["tipoaffidamento"].ToString(), 0.0);
        }

        if (item["utilizzo"].ToString() != "")
        {
          double value = 0.0;
          double.TryParse(item["utilizzo"].ToString(), out value);
          htUtilizzo[item["tipoaffidamento"].ToString()] = (double)htUtilizzo[item["tipoaffidamento"].ToString()] + value;
        }
      }

      string cell1ar = "\\clvertalc\\cellx3600";
      string cell2ar = "\\clvertalc\\cellx5700";
      string cell3ar = "\\clvertalc\\cellx7800";
      string cell4ar = "\\clvertalc\\cellx9900";

      partial_rtf_text += "\\pard\\keep";

      partial_rtf_text += iniziorigaTP + "\n" + colore2 + bordi + cell1ar + colore2 + bordi + cell2ar + colore2 + bordi + cell3ar + colore2 + bordi + cell4ar + inizioriga2;

      partial_rtf_text += "\\b \\qc \\fs16 Tipo Affidamento \\b0\\cell";
      partial_rtf_text += "\\b \\qc \\fs16 ad inizio esercizio \\b0\\cell";
      partial_rtf_text += "\\b \\qc \\fs16 alla data verifica \\b0\\cell";
      partial_rtf_text += "\\b \\qc \\fs16 utilizzo \\b0\\cell";

      partial_rtf_text += finerigaTP;

      int index2 = 0;

      foreach (string item in Alias)
      {
        double valoretmp = 0.0;
        if (htFine.Contains(item))
        {
          valoretmp = (double)htFine[item];
        }

        if (valoretmp == 0.0)
        {
          continue;
        }

        index2++;

        partial_rtf_text += iniziorigaTP + "\n" + ((index2 % 1 == 0) ? colore3 : colore4) + bordi + cell1ar + ((index2 % 1 == 0) ? colore3 : colore4) + bordi + cell2ar + ((index2 % 1 == 0) ? colore3 : colore4) + bordi + cell3ar + ((index2 % 1 == 0) ? colore3 : colore4) + bordi + cell4ar + inizioriga2;

        partial_rtf_text += " \\ql \\fs20 " + htAlias[item].ToString() + " \\cell";

        double valore = 0.0;
        if (htInizio.Contains(item))
        {
          valore = (double)htInizio[item];
        }

        partial_rtf_text += " \\qr \\fs20 " + ConvertNumber(valore.ToString()) + " \\cell";

        if (htFine.Contains(item))
        {
          valore = (double)htFine[item];
        }

        partial_rtf_text += " \\qr \\fs20 " + ConvertNumber(valore.ToString()) + " \\cell";

        if (htUtilizzo.Contains(item))
        {
          valore = (double)htUtilizzo[item];
        }

        rowdone = true;

        partial_rtf_text += " \\qr \\fs20 " + ConvertNumber(valore.ToString()) + " \\cell";

        partial_rtf_text += finerigaTP;

      }

      partial_rtf_text += iniziorigaTP + "\n" + colore2 + bordi + cell1ar + colore2 + bordi + cell2ar + colore2 + bordi + cell3ar + colore2 + bordi + cell4ar + inizioriga2;

      partial_rtf_text += " \\qc \\fs20 \\b Totale \\bo \\cell";

      double somma = 0.0;
      foreach (DictionaryEntry item in htInizio)
      {
        somma += (double)(item.Value);
      }

      partial_rtf_text += " \\qr \\fs20 \\b " + ConvertNumber(somma.ToString()) + " \\b0 \\cell";

      somma = 0.0;
      foreach (DictionaryEntry item in htFine)
      {
        somma += (double)(item.Value);
      }

      partial_rtf_text += " \\qr \\fs20 \\b " + ConvertNumber(somma.ToString()) + " \\b0 \\cell";

      somma = 0.0;
      foreach (DictionaryEntry item in htUtilizzo)
      {
        somma += (double)(item.Value);
      }

      partial_rtf_text += " \\qr \\fs20 \\b " + ConvertNumber(somma.ToString()) + " \\b0 \\cell";

      partial_rtf_text += finerigaTP;


      partial_rtf_text += "\\line\\pard\\bgdkdcross\\cfpat1\\shading59110\\tx2291\\par";

      if (rowdone)
      {
        partial_partial_rtf_text += partial_rtf_text;
      }

      return partial_partial_rtf_text;
    }
    #endregion

    #region ComponentiConsolidato

    private string AddConsolidatoScope(XmlNode nodeTree, string ID)
    {
      XmlNode nodeData = null;
      string partial_rtf_text = "";
      return "";

      string cell1ar = "\\clvertalc\\cellx3000";
      string cell2ar = "\\clvertalc\\cellx4400";
      string cell3ar = "\\clvertalc\\cellx5800";
      string cell4ar = "\\clvertalc\\cellx7200";
      string cell5ar = "\\clvertalc\\cellx8600";
      string cell6ar = "\\clvertalc\\cellx10200";

      partial_rtf_text += "\\pard\\keepn\\b\\f0 Assegnazione Scope:\\b0 \\line \\par\n";

      partial_rtf_text += "\\pard\\keep";

      partial_rtf_text += iniziorigaTP + "\n" + colore2 + bordi + cell1ar + colore2 + bordi + cell3ar + colore2 + bordi + cell5ar + colore2 + bordi + cell6ar + inizioriga2;

      partial_rtf_text += "\\b \\qc \\fs16 COMPONENTI\\b0\\cell";
      partial_rtf_text += "\\b \\qc \\fs16 ATTIVO \\b0\\cell";
      partial_rtf_text += "\\b \\qc \\fs16 VALORE DELLA PRODUZIONE \\b0\\cell";
      partial_rtf_text += "\\b \\qc \\fs16 SCOPE \\b0\\cell";

      partial_rtf_text += finerigaTP;

      XmlNode itemhere = nodeData.SelectSingleNode("/Dati//Dato[@ID=" + ID + "]");

      for (int j = 0; j < 1000; j++)
      {
        if (itemhere.Attributes["name_" + j.ToString()] == null)
        {
          break;
        }

        partial_rtf_text += iniziorigaTP + "\n" + colore1 + bordi + cell1ar + colore1 + bordi + cell2ar + colore1 + bordi + cell3ar + colore1 + bordi + cell4ar + colore1 + bordi + cell5ar + colore1 + bordi + cell6ar + inizioriga2;

        partial_rtf_text += " \\ql \\fs20 " + ((itemhere.Attributes["name_" + j.ToString()] == null) ? "" : itemhere.Attributes["name_" + j.ToString()].Value) + " \\cell";
        partial_rtf_text += " \\qr \\fs20 " + ((itemhere.Attributes["attivo_" + j.ToString()] == null) ? "" : itemhere.Attributes["attivo_" + j.ToString()].Value) + " \\cell";
        partial_rtf_text += " \\qr \\fs20 " + ((itemhere.Attributes["attivo2_" + j.ToString()] == null) ? "" : itemhere.Attributes["attivo2_" + j.ToString()].Value) + " \\cell";
        partial_rtf_text += " \\qr \\fs20 " + ((itemhere.Attributes["valoreproduzione_" + j.ToString()] == null) ? "" : itemhere.Attributes["valoreproduzione_" + j.ToString()].Value) + " \\cell";
        partial_rtf_text += " \\qr \\fs20 " + ((itemhere.Attributes["valoreproduzione2_" + j.ToString()] == null) ? "" : itemhere.Attributes["valoreproduzione2_" + j.ToString()].Value) + " \\cell";
        partial_rtf_text += " \\qr \\fs20 " + ((itemhere.Attributes["scope_" + j.ToString()] == null) ? "" : itemhere.Attributes["scope_" + j.ToString()].Value) + " \\cell";

        partial_rtf_text += finerigaTP;
      }


      partial_rtf_text += " \\line \\line \\pard\\keepn\\b\\f0 Rischio Specifico:\\b0 \\line \\par\n";

      partial_rtf_text += "\\pard\\keep";

      partial_rtf_text += iniziorigaTP + "\n" + colore2 + bordi + cell1ar + colore2 + bordi + cell6ar + inizioriga2;

      partial_rtf_text += "\\b \\qc \\fs16 COMPONENTI\\b0\\cell";
      partial_rtf_text += "\\b \\qc \\fs16 Rischio Specifico \\b0\\cell";

      partial_rtf_text += finerigaTP;

      for (int j = 0; j < 1000; j++)
      {
        if (itemhere.Attributes["name_" + j.ToString()] == null || itemhere.Attributes["scope_" + j.ToString()] == null || itemhere.Attributes["scope_" + j.ToString()].Value == "")
        {
          break;
        }

        partial_rtf_text += iniziorigaTP + "\n" + colore1 + bordi + cell1ar + colore1 + bordi + cell6ar + inizioriga2;

        partial_rtf_text += " \\ql \\fs20 " + ((itemhere.Attributes["name_" + j.ToString()] == null) ? "" : itemhere.Attributes["name_" + j.ToString()].Value) + " \\cell";
        partial_rtf_text += " \\qr \\fs20 " + ((itemhere.Attributes["nota_" + j.ToString()] == null) ? "" : itemhere.Attributes["nota_" + j.ToString()].Value) + " \\cell";

        partial_rtf_text += finerigaTP;
      }


      partial_rtf_text += " \\line \\line \\pard\\keepn\\b\\f0 Raggruppamento per Scope:\\b0 \\line \\par\n";

      partial_rtf_text += "\\pard\\keep";

      partial_rtf_text += iniziorigaTP + "\n" + colore2 + bordi + cell1ar + colore2 + bordi + cell3ar + colore2 + bordi + cell5ar + inizioriga2;

      partial_rtf_text += "\\b \\qc \\fs16 COMPONENTI\\b0\\cell";
      partial_rtf_text += "\\b \\qc \\fs16 ATTIVO \\b0\\cell";
      partial_rtf_text += "\\b \\qc \\fs16 VALORE DELLA PRODUZIONE \\b0\\cell";

      partial_rtf_text += finerigaTP;

      for (int j = 0; j < 1000; j++)
      {
        if (itemhere.Attributes["scope_name_" + j.ToString()] == null)
        {
          break;
        }

        partial_rtf_text += iniziorigaTP + "\n" + colore1 + bordi + cell1ar + colore1 + bordi + cell2ar + colore1 + bordi + cell3ar + colore1 + bordi + cell4ar + colore1 + bordi + cell5ar + inizioriga2;

        partial_rtf_text += " \\ql \\fs20 " + ((itemhere.Attributes["scope_name_" + j.ToString()] == null) ? "" : itemhere.Attributes["name_" + j.ToString()].Value) + " \\cell";
        partial_rtf_text += " \\qr \\fs20 " + ((itemhere.Attributes["scope_attivo_" + j.ToString()] == null) ? "" : itemhere.Attributes["attivo_" + j.ToString()].Value) + " \\cell";
        partial_rtf_text += " \\qr \\fs20 " + ((itemhere.Attributes["scope_attivo2_" + j.ToString()] == null) ? "" : itemhere.Attributes["attivo2_" + j.ToString()].Value) + " \\cell";
        partial_rtf_text += " \\qr \\fs20 " + ((itemhere.Attributes["scope_valoreproduzione_" + j.ToString()] == null) ? "" : itemhere.Attributes["valoreproduzione_" + j.ToString()].Value) + " \\cell";
        partial_rtf_text += " \\qr \\fs20 " + ((itemhere.Attributes["scope_valoreproduzione2_" + j.ToString()] == null) ? "" : itemhere.Attributes["valoreproduzione2_" + j.ToString()].Value) + " \\cell";

        partial_rtf_text += finerigaTP;
      }

      return partial_rtf_text;
    }

    private string ComponentiConsolidato(XmlNode nodeTree, string ID)
    {

      DataTable dati = cBusinessObjects.GetData(int.Parse(ID), typeof(Excel_Consolidato), idcliente, idsessione, idtree);

      string cell1ar = "\\clvertalc\\cellx900";
      string cell2ar = "\\clvertalc\\cellx5000";
      string cell3ar = "\\clvertalc\\cellx8000";
      string cell4ar = "\\clvertalc\\cellx9900";

      string partial_rtf_text = "";
      string partial_partial_rtf_text = "";
      DataRow itemTot = null;

      foreach (DataRow item in dati.Rows)
      {
        itemTot = item;
        partial_rtf_text = "";

        partial_rtf_text += "\\pard\\keepn\\b\\f0 " + item["name"].ToString() + ":\\b0 \\line \\par\n";

        string metodoconsolidamento = "";
        switch (item["metodoconsolidamento"].ToString())
        {
          case "1":
            metodoconsolidamento = "Integrale";
            break;
          case "2":
            metodoconsolidamento = "Proporzionale";
            break;
          case "3":
            metodoconsolidamento = "Patrimonio Netto";
            break;
          default:
            break;
        }


        string scope = "";
        switch (item["scope"].ToString())
        {
          case "1":
            scope = "Full Audit";
            break;
          case "2":
            scope = "Limited";
            break;
          case "3":
            scope = "Desk Review";
            break;
          case "4":
            scope = "Altro";
            break;
          default:
            break;
        }

        partial_rtf_text += iniziorigaTP + "\n" + colore1 + cell1ar + colore1 + cell2ar + colore1 + cell4ar + inizioriga2;

        partial_rtf_text += " \\ql \\fs20 \\cell";
        partial_rtf_text += " \\ql \\fs20 " + "Denominazione:" + " \\cell";
        partial_rtf_text += " \\ql \\fs20 " + item["denominazione"].ToString() + " \\cell";

        partial_rtf_text += finerigaTP;

        partial_rtf_text += iniziorigaTP + "\n" + colore1 + cell1ar + colore1 + cell2ar + colore1 + cell4ar + inizioriga2;

        partial_rtf_text += " \\ql \\fs20 \\cell";
        partial_rtf_text += " \\ql \\fs20 " + "Codice Fiscale:" + " \\cell";
        partial_rtf_text += " \\ql \\fs20 " + item["CF"].ToString() + " \\cell";

        partial_rtf_text += finerigaTP;

        partial_rtf_text += iniziorigaTP + "\n" + colore1 + cell1ar + colore1 + cell2ar + colore1 + cell4ar + inizioriga2;

        partial_rtf_text += " \\ql \\fs20 \\cell";
        partial_rtf_text += " \\ql \\fs20 " + "Sede:" + " \\cell";
        partial_rtf_text += " \\ql \\fs20 " + item["sede"].ToString() + " \\cell";

        partial_rtf_text += finerigaTP;

        partial_rtf_text += iniziorigaTP + "\n" + colore1 + cell1ar + colore1 + cell2ar + colore1 + cell4ar + inizioriga2;

        partial_rtf_text += " \\ql \\fs20 \\cell";
        partial_rtf_text += " \\ql \\fs20 " + "Revisore:" + " \\cell";
        partial_rtf_text += " \\ql \\fs20 " + item["revisore"].ToString() + " \\cell";

        partial_rtf_text += finerigaTP;

        partial_rtf_text += iniziorigaTP + "\n" + colore1 + cell1ar + colore1 + cell2ar + colore1 + cell4ar + inizioriga2;

        partial_rtf_text += " \\ql \\fs20 \\cell";
        partial_rtf_text += " \\ql \\fs20 " + "Metodo di Consolidamento:" + " \\cell";
        partial_rtf_text += " \\ql \\fs20 " + metodoconsolidamento + " \\cell";

        partial_rtf_text += finerigaTP;

        partial_rtf_text += iniziorigaTP + "\n" + colore1 + cell1ar + colore1 + cell2ar + colore1 + cell3ar + inizioriga2;
        partial_rtf_text += " \\ql \\fs20 \\cell";
        partial_rtf_text += " \\ql \\fs20 \\cell";
        partial_rtf_text += " \\ql \\fs20 \\cell";
        partial_rtf_text += finerigaTP;

        partial_rtf_text += iniziorigaTP + "\n" + colore1 + cell1ar + colore1 + bordi + cell2ar + colore1 + bordi + cell3ar + inizioriga2;

        partial_rtf_text += " \\ql \\fs20 \\cell";
        partial_rtf_text += " \\ql \\fs20 " + "ATTIVO" + " \\cell";
        partial_rtf_text += " \\qr \\fs20 " + item["attivo"].ToString() + " \\cell";

        partial_rtf_text += finerigaTP;

        partial_rtf_text += iniziorigaTP + "\n" + colore1 + cell1ar + colore1 + bordi + cell2ar + colore1 + bordi + cell3ar + inizioriga2;

        partial_rtf_text += " \\ql \\fs20 \\cell";
        partial_rtf_text += " \\ql \\fs20 " + "PASSIVO" + " \\cell";
        partial_rtf_text += " \\qr \\fs20 " + item["passivo"].ToString() + " \\cell";

        partial_rtf_text += finerigaTP;

        partial_rtf_text += iniziorigaTP + "\n" + colore1 + cell1ar + colore1 + bordi + cell2ar + colore1 + bordi + cell3ar + inizioriga2;

        partial_rtf_text += " \\ql \\fs20 \\cell";
        partial_rtf_text += " \\ql \\fs20 " + "PATRIMONIO NETTO" + " \\cell";
        partial_rtf_text += " \\qr \\fs20 " + item["patrimonionetto"].ToString() + " \\cell";

        partial_rtf_text += finerigaTP;

        partial_rtf_text += iniziorigaTP + "\n" + colore1 + cell1ar + colore1 + bordi + cell2ar + colore1 + bordi + cell3ar + inizioriga2;

        partial_rtf_text += " \\ql \\fs20 \\cell";
        partial_rtf_text += " \\ql \\fs20 " + "VALORE DELLA PRODUZIONE" + " \\cell";
        partial_rtf_text += " \\qr \\fs20 " + item["valoreproduzione"].ToString() + " \\cell";

        partial_rtf_text += finerigaTP;

        partial_rtf_text += iniziorigaTP + "\n" + colore1 + cell1ar + colore1 + bordi + cell2ar + colore1 + bordi + cell3ar + inizioriga2;

        partial_rtf_text += " \\ql \\fs20 \\cell";
        partial_rtf_text += " \\ql \\fs20 " + "VALORE -(COSTI) PRODUZIONE" + " \\cell";
        partial_rtf_text += " \\qr \\fs20 " + item["produzionesenzacosti"].ToString() + " \\cell";

        partial_rtf_text += finerigaTP;

        partial_rtf_text += iniziorigaTP + "\n" + colore1 + cell1ar + colore1 + bordi + cell2ar + colore1 + bordi + cell3ar + inizioriga2;

        partial_rtf_text += " \\ql \\fs20 \\cell";
        partial_rtf_text += " \\ql \\fs20 " + "Risultato Ante Imposte" + " \\cell";
        partial_rtf_text += " \\qr \\fs20 " + item["risultatoanteimposte"].ToString() + " \\cell";

        partial_rtf_text += finerigaTP;

        partial_rtf_text += iniziorigaTP + "\n" + colore1 + cell1ar + colore1 + bordi + cell2ar + colore1 + bordi + cell3ar + inizioriga2;

        partial_rtf_text += " \\ql \\fs20 \\cell";
        partial_rtf_text += " \\ql \\fs20 " + "Risultato Netto" + " \\cell";
        partial_rtf_text += " \\qr \\fs20 " + item["risultatonetto"].ToString() + " \\cell";

        partial_rtf_text += finerigaTP;

        partial_rtf_text += iniziorigaTP + "\n" + colore1 + cell1ar + colore1 + cell2ar + colore1 + cell3ar + inizioriga2;
        partial_rtf_text += " \\ql \\fs20 \\cell";
        partial_rtf_text += " \\ql \\fs20 \\cell";
        partial_rtf_text += " \\ql \\fs20 \\cell";
        partial_rtf_text += finerigaTP;

        partial_rtf_text += iniziorigaTP + "\n" + colore1 + cell1ar + colore1 + cell2ar + colore1 + cell4ar + inizioriga2;

        partial_rtf_text += " \\ql \\fs20 \\cell";
        partial_rtf_text += " \\ql \\fs20 " + "SCOPE:" + " \\cell";
        partial_rtf_text += " \\ql \\fs20 " + scope + " \\cell";

        partial_rtf_text += finerigaTP;

        partial_rtf_text += "\\pard\\bgdkdcross\\cfpat1\\shading59110\\tx2291\\par";

        partial_partial_rtf_text += partial_rtf_text;
      }

      cell1ar = "\\clvertalc\\cellx3000";
      cell2ar = "\\clvertalc\\cellx4400";
      cell3ar = "\\clvertalc\\cellx5800";
      cell4ar = "\\clvertalc\\cellx7200";
      string cell5ar = "\\clvertalc\\cellx8600";
      string cell6ar = "\\clvertalc\\cellx10200";

      partial_rtf_text = "";

      partial_rtf_text += "\\pard\\keepn\\b\\f0 RIEPILOGO\\b0 \\line \\par\n";

      partial_rtf_text += "\\pard\\keep";
      if (itemTot != null)
      {
        partial_rtf_text += iniziorigaTP + "\n" + colore2 + bordi + cell1ar + colore2 + bordi + cell2ar + colore2 + bordi + cell3ar + colore2 + bordi + cell4ar + colore2 + bordi + cell5ar + colore2 + bordi + cell6ar + inizioriga2;
        partial_rtf_text += "\\b \\qc \\fs16  \\b0\\cell";
        partial_rtf_text += "\\b \\qc \\fs16 TOTALE AGGREGATO \\b0\\cell";
        partial_rtf_text += "\\b \\qc \\fs16 DATI CONSOLIDATO \\b0\\cell";
        partial_rtf_text += "\\b \\qc \\fs16 DIFF \\b0\\cell";
        partial_rtf_text += "\\b \\qc \\fs16 SALDI SCRITT.CONS. \\b0\\cell";
        partial_rtf_text += "\\b \\qc \\fs16 CHECK \\b0\\cell";

        partial_rtf_text += finerigaTP;


        partial_rtf_text += iniziorigaTP + "\n" + colore1 + bordi + cell1ar + colore1 + bordi + cell2ar + colore1 + bordi + cell3ar + colore1 + bordi + cell4ar + colore1 + bordi + cell5ar + colore1 + bordi + cell6ar + inizioriga2;

        partial_rtf_text += " \\ql \\fs20 " + "ATTIVO" + " \\cell";
        partial_rtf_text += " \\qr \\fs20 " + ((itemTot["attivoTOT"] == null) ? "" : itemTot["attivoTOT"].ToString()) + " \\cell";
        partial_rtf_text += " \\qr \\fs20 " + ((itemTot["attivo"] == null) ? "" : itemTot["attivo"].ToString()) + " \\cell";
        partial_rtf_text += " \\qr \\fs20 " + ((itemTot["attivoCHECK"] == null) ? "" : itemTot["attivoCHECK"].ToString()) + " \\cell";
        partial_rtf_text += " \\qr \\fs20 " + ((itemTot["attivo2"] == null) ? "" : itemTot["attivo2"].ToString()) + " \\cell";
        partial_rtf_text += " \\qr \\fs20 " + ((itemTot["attivoCHECK2"] == null) ? "" : itemTot["attivoCHECK2"].ToString()) + " \\cell";

        partial_rtf_text += finerigaTP;

        partial_rtf_text += iniziorigaTP + "\n" + colore1 + bordi + cell1ar + colore1 + bordi + cell2ar + colore1 + bordi + cell3ar + colore1 + bordi + cell4ar + colore1 + bordi + cell5ar + colore1 + bordi + cell6ar + inizioriga2;

        partial_rtf_text += " \\ql \\fs20 " + "PASSIVO" + " \\cell";
        partial_rtf_text += " \\qr \\fs20 " + ((itemTot["passivoTOT"] == null) ? "" : itemTot["passivoTOT"].ToString()) + " \\cell";
        partial_rtf_text += " \\qr \\fs20 " + ((itemTot["passivo"] == null) ? "" : itemTot["passivo"].ToString()) + " \\cell";
        partial_rtf_text += " \\qr \\fs20 " + ((itemTot["passivoCHECK"] == null) ? "" : itemTot["passivoCHECK"].ToString()) + " \\cell";
        partial_rtf_text += " \\qr \\fs20 " + ((itemTot["passivo2"] == null) ? "" : itemTot["passivo2"].ToString()) + " \\cell";
        partial_rtf_text += " \\qr \\fs20 " + ((itemTot["passivoCHECK2"] == null) ? "" : itemTot["passivoCHECK2"].ToString()) + " \\cell";

        partial_rtf_text += finerigaTP;

        partial_rtf_text += iniziorigaTP + "\n" + colore1 + bordi + cell1ar + colore1 + bordi + cell2ar + colore1 + bordi + cell3ar + colore1 + bordi + cell4ar + colore1 + bordi + cell5ar + colore1 + bordi + cell6ar + inizioriga2;

        partial_rtf_text += " \\ql \\fs20 " + "PATRIMONIO NETTO" + " \\cell";
        partial_rtf_text += " \\qr \\fs20 " + ((itemTot["patrimonionettoTOT"] == null) ? "" : itemTot["patrimonionettoTOT"].ToString()) + " \\cell";
        partial_rtf_text += " \\qr \\fs20 " + ((itemTot["patrimonionetto"] == null) ? "" : itemTot["patrimonionetto"].ToString()) + " \\cell";
        partial_rtf_text += " \\qr \\fs20 " + ((itemTot["patrimonionettoCHECK"] == null) ? "" : itemTot["patrimonionettoCHECK"].ToString()) + " \\cell";
        partial_rtf_text += " \\qr \\fs20 " + ((itemTot["patrimonionetto2"] == null) ? "" : itemTot["patrimonionetto2"].ToString()) + " \\cell";
        partial_rtf_text += " \\qr \\fs20 " + ((itemTot["patrimonionettoCHECK2"] == null) ? "" : itemTot["patrimonionettoCHECK2"].ToString()) + " \\cell";

        partial_rtf_text += finerigaTP;

        partial_rtf_text += iniziorigaTP + "\n" + colore1 + bordi + cell1ar + colore1 + bordi + cell2ar + colore1 + bordi + cell3ar + colore1 + bordi + cell4ar + colore1 + bordi + cell5ar + colore1 + bordi + cell6ar + inizioriga2;

        partial_rtf_text += " \\ql \\fs20 " + "VALORE DELLA PRODUZIONE" + " \\cell";
        partial_rtf_text += " \\qr \\fs20 " + ((itemTot["valoreproduzioneTOT"] == null) ? "" : itemTot["valoreproduzioneTOT"].ToString()) + " \\cell";
        partial_rtf_text += " \\qr \\fs20 " + ((itemTot["valoreproduzione"] == null) ? "" : itemTot["valoreproduzione"].ToString()) + " \\cell";
        partial_rtf_text += " \\qr \\fs20 " + ((itemTot["valoreproduzioneCHECK"] == null) ? "" : itemTot["valoreproduzioneCHECK"].ToString()) + " \\cell";
        partial_rtf_text += " \\qr \\fs20 " + ((itemTot["valoreproduzione2"] == null) ? "" : itemTot["valoreproduzione2"].ToString()) + " \\cell";
        partial_rtf_text += " \\qr \\fs20 " + ((itemTot["valoreproduzioneCHECK2"] == null) ? "" : itemTot["valoreproduzioneCHECK2"].ToString()) + " \\cell";

        partial_rtf_text += finerigaTP;

        partial_rtf_text += iniziorigaTP + "\n" + colore1 + bordi + cell1ar + colore1 + bordi + cell2ar + colore1 + bordi + cell3ar + colore1 + bordi + cell4ar + colore1 + bordi + cell5ar + colore1 + bordi + cell6ar + inizioriga2;

        partial_rtf_text += " \\ql \\fs20 " + "VALORE -(COSTI) PRODUZIONE" + " \\cell";
        partial_rtf_text += " \\qr \\fs20 " + ((itemTot["produzionesenzacostiTOT"] == null) ? "" : itemTot["produzionesenzacostiTOT"].ToString()) + " \\cell";
        partial_rtf_text += " \\qr \\fs20 " + ((itemTot["produzionesenzacosti"] == null) ? "" : itemTot["produzionesenzacosti"].ToString()) + " \\cell";
        partial_rtf_text += " \\qr \\fs20 " + ((itemTot["produzionesenzacostiCHECK"] == null) ? "" : itemTot["produzionesenzacostiCHECK"].ToString()) + " \\cell";
        partial_rtf_text += " \\qr \\fs20 " + ((itemTot["produzionesenzacosti2"] == null) ? "" : itemTot["produzionesenzacosti2"].ToString()) + " \\cell";
        partial_rtf_text += " \\qr \\fs20 " + ((itemTot["produzionesenzacostiCHECK2"] == null) ? "" : itemTot["produzionesenzacostiCHECK2"].ToString()) + " \\cell";

        partial_rtf_text += finerigaTP;

        partial_rtf_text += iniziorigaTP + "\n" + colore1 + bordi + cell1ar + colore1 + bordi + cell2ar + colore1 + bordi + cell3ar + colore1 + bordi + cell4ar + colore1 + bordi + cell5ar + colore1 + bordi + cell6ar + inizioriga2;

        partial_rtf_text += " \\ql \\fs20 " + "Risultato Ante Imposte" + " \\cell";
        partial_rtf_text += " \\qr \\fs20 " + ((itemTot["risultatoanteimposteTOT"] == null) ? "" : itemTot["risultatoanteimposteTOT"].ToString()) + " \\cell";
        partial_rtf_text += " \\qr \\fs20 " + ((itemTot["risultatoanteimposte"] == null) ? "" : itemTot["risultatoanteimposte"].ToString()) + " \\cell";
        partial_rtf_text += " \\qr \\fs20 " + ((itemTot["risultatoanteimposteCHECK"] == null) ? "" : itemTot["risultatoanteimposteCHECK"].ToString()) + " \\cell";
        partial_rtf_text += " \\qr \\fs20 " + ((itemTot["risultatoanteimposte2"] == null) ? "" : itemTot["risultatoanteimposte2"].ToString()) + " \\cell";
        partial_rtf_text += " \\qr \\fs20 " + ((itemTot["risultatoanteimposteCHECK2"] == null) ? "" : itemTot["risultatoanteimposteCHECK2"].ToString()) + " \\cell";

        partial_rtf_text += finerigaTP;

        partial_rtf_text += iniziorigaTP + "\n" + colore1 + bordi + cell1ar + colore1 + bordi + cell2ar + colore1 + bordi + cell3ar + colore1 + bordi + cell4ar + colore1 + bordi + cell5ar + colore1 + bordi + cell6ar + inizioriga2;

        partial_rtf_text += " \\ql \\fs20 " + "Risultato Netto" + " \\cell";
        partial_rtf_text += " \\qr \\fs20 " + ((itemTot["risultatonettoTOT"] == null) ? "" : itemTot["risultatonettoTOT"].ToString()) + " \\cell";
        partial_rtf_text += " \\qr \\fs20 " + ((itemTot["risultatonetto"] == null) ? "" : itemTot["risultatonetto"].ToString()) + " \\cell";
        partial_rtf_text += " \\qr \\fs20 " + ((itemTot["risultatonettoCHECK"] == null) ? "" : itemTot["risultatonettoCHECK"].ToString()) + " \\cell";
        partial_rtf_text += " \\qr \\fs20 " + ((itemTot["risultatonetto2"] == null) ? "" : itemTot["risultatonetto2"].ToString()) + " \\cell";
        partial_rtf_text += " \\qr \\fs20 " + ((itemTot["risultatonettoCHECK2"] == null) ? "" : itemTot["risultatonettoCHECK2"].ToString()) + " \\cell";

        partial_rtf_text += finerigaTP;
      }
      partial_partial_rtf_text += partial_rtf_text;

      return partial_partial_rtf_text;
    }
    #endregion

    #region Bilancio
    string cell1bil = "\\clvertalc\\cellx1400";
    string cell2bil = "\\clvertalc\\cellx5400";
    string cell3bil = "\\clvertalc\\cellx7000";
    string cell4bil = "\\clvertalc\\cellx8600";
    string cell5bil = "\\clvertalc\\cellx10200";

    string colore1bil = "\\clcbpat3";
    string colore2bil = "\\clcbpat4";
    string colore3bil = "\\clcbpat2";

    private string AddBilancio(XmlNode nodeTree, string ID, string Titolo)
    {

      bool oldbilancio = true;
      string templateA = "";
      string templateB = "";
      string templateC = "";

      string IDB_Padre = nodeTree.Attributes["ID"].Value;

      string tipoBilancio = "";
      DataTable datibilanciotestata = cBusinessObjects.GetData(int.Parse(IDB_Padre), typeof(Excel_Bilancio_Testata), idcliente, idsessione, idtree);
      DataRow nodeData = null;
      foreach (DataRow dt in datibilanciotestata.Rows)
      {
        nodeData = dt;
      }
      if (nodeData == null)
      {
        return "";
      }

      tipoBilancio = nodeData["tipoBilancio"].ToString();


      if (IDB_Padre == "227" || IDB_Padre == "134" || IDB_Padre == "2016134" || IDB_Padre == "166")
      {
        switch (tipoBilancio)
        {
          case "2016":
            oldbilancio = false;
            templateA = App.AppTemplateBilancio_Attivo2016;
            templateB = App.AppTemplateBilancio_Passivo2016;
            templateC = App.AppTemplateBilancio_ContoEconomico2016;
            break;
          default:
            templateA = App.AppTemplateBilancio_Attivo;
            templateB = App.AppTemplateBilancio_Passivo;
            templateC = App.AppTemplateBilancio_ContoEconomico;
            break;
        }
      }
      else
      {
        switch (tipoBilancio)
        {
          case "Micro":
            oldbilancio = false;
            templateA = App.AppTemplateBilancioMicro_Attivo2016;
            templateB = App.AppTemplateBilancioMicro_Passivo2016;
            templateC = App.AppTemplateBilancioMicro_ContoEconomico2016;
            break;
          case "2016":
            oldbilancio = false;
            templateA = App.AppTemplateBilancioAbbreviato_Attivo2016;
            templateB = App.AppTemplateBilancioAbbreviato_Passivo2016;
            templateC = App.AppTemplateBilancioAbbreviato_ContoEconomico2016;
            break;
          default:
            templateA = App.AppTemplateBilancioAbbreviato_Attivo;
            templateB = App.AppTemplateBilancioAbbreviato_Passivo;
            templateC = App.AppTemplateBilancioAbbreviato_ContoEconomico;
            break;
        }
      }

      XmlDataProviderManager _y = null;

      string partial_rtf_text = "";

      partial_rtf_text += "\\pard\\keep";

      if (Titolo == "" && nodeTree.SelectSingleNode("Node[@ID=" + ID + "]") != null)
      {
        if (nodeTree.SelectSingleNode("Node[@ID=" + ID + "]").Attributes["Tipologia"].Value.Contains("Patrimoniale Attivo"))
        {
          Titolo = "Patrimoniale Attivo";
        }

        if (nodeTree.SelectSingleNode("Node[@ID=" + ID + "]").Attributes["Tipologia"].Value.Contains("Patrimoniale Passivo"))
        {
          Titolo = "Patrimoniale Passivo";
        }

        if (nodeTree.SelectSingleNode("Node[@ID=" + ID + "]").Attributes["Tipologia"].Value.Contains("Conto Economico"))
        {
          Titolo = "Conto Economico";
        }
      }

      switch (Titolo)
      {
        case "Patrimoniale Attivo":
          if (ID == "216" || ID == "2016174" || ID == "2016187")

          {
            RiclassificatoAbbreviatoTBD = true;
            IndiciAbbreviatoTBD = true;

            _y = new XmlDataProviderManager(templateA, true);
          }
          else if (ID == "135" || ID == "2016135")
          {
            RiclassificatoPreliminariTBD = true;
            IndiciPreliminariTBD = true;

            _y = new XmlDataProviderManager(templateA, true);
          }
          else
          {
            RiclassificatoTBD = true;
            IndiciTBD = true;

            _y = new XmlDataProviderManager(templateA, true);
          }
          break;
        case "Patrimoniale Passivo":
          if (ID == "217")
          {
            RiclassificatoAbbreviatoTBD = true;
            IndiciAbbreviatoTBD = true;

            _y = new XmlDataProviderManager(templateB, true);
          }
          else if (ID == "137")
          {
            RiclassificatoPreliminariTBD = true;
            IndiciPreliminariTBD = true;

            _y = new XmlDataProviderManager(templateB, true);
          }
          else
          {
            RiclassificatoTBD = true;
            IndiciTBD = true;

            _y = new XmlDataProviderManager(templateB, true);
          }
          break;
        case "Conto Economico":
          if (ID == "218")
          {

            RiclassificatoAbbreviatoTBD = true;
            IndiciAbbreviatoTBD = true;

            _y = new XmlDataProviderManager(templateC, true);
          }
          else if (ID == "138")
          {
            RiclassificatoPreliminariTBD = true;
            IndiciPreliminariTBD = true;

            _y = new XmlDataProviderManager(templateC, true);
          }
          else
          {

            RiclassificatoTBD = true;
            IndiciTBD = true;

            _y = new XmlDataProviderManager(templateC, true);
          }
          break;
        default:
          break;
      }


      //   string IDInterno = nodeData.Attributes["ID"].Value;

      partial_rtf_text += iniziorigaTP + "\n" + colore1bil + cell1bil + colore1bil + cell2bil + colore1bil + bordi + cell3bil + colore1bil + bordi + cell4bil + colore1bil + bordi + cell5bil + inizioriga2;

      partial_rtf_text += "\\b \\b0\\cell";
      partial_rtf_text += "\\b \\b0\\cell";
      partial_rtf_text += "\\b \\qc " + ((nodeData["TitoloEA"].ToString() != "") ? nodeData["TitoloEA"].ToString() : "ESERCIZIO attuale") + "\\b0\\cell";
      partial_rtf_text += "\\b \\qc " + ((nodeData["TitoloEP"].ToString() != "") ? nodeData["TitoloEP"].ToString() : "ESERCIZIO precedente") + "\\b0\\cell";
      partial_rtf_text += "\\b \\qc Increm. (decrem.)\\b0\\cell";

      partial_rtf_text += finerigaTP;
      DataTable datibilancio = cBusinessObjects.GetData(int.Parse(IDB_Padre), typeof(Excel_Bilancio), idcliente, idsessione, idtree);
      foreach (XmlNode item in _y.Document.SelectNodes("/Dato/MacroGruppo/Bilancio"))
      {
        //foreach (XmlNode nodenodo in nodeData.SelectNodes("/Dati/Dato[@ID='" + IDInterno + "']/Valore[@Titolo='" + Titolo + "']"))
        //{
        DataRow nodenodo = null;
        foreach (DataRow dt in datibilancio.Rows)
        {
          if (dt["ID"].ToString() == item.Attributes["ID"].Value)
            nodenodo = dt;
        }
        if (nodenodo == null)
          continue;
        if (oldbilancio == true && (item.Attributes["ID"].Value == "40" || item.Attributes["ID"].Value == "80" || item.Attributes["ID"].Value == "138" || item.Attributes["ID"].Value == "175" || item.Attributes["ID"].Value == "827015" || item.Attributes["ID"].Value == "225" || item.Attributes["ID"].Value == "259"))
        {
          partial_rtf_text += " \\pard \\page \\par ";
        }



        if (nodenodo["rigaVuota"].ToString() != "")
        {
          partial_rtf_text += iniziorigaTP + "\n" + colore1bil + cell1bil + colore1bil + cell2bil + colore1bil + cell3bil + colore1bil + cell4bil + colore1bil + cell5bil + inizioriga2;

          partial_rtf_text += "\\cell";
          partial_rtf_text += "\\cell";
          partial_rtf_text += "\\cell";
          partial_rtf_text += "\\cell";
          partial_rtf_text += "\\cell";

          partial_rtf_text += finerigaTP;

          continue;
        }

        partial_rtf_text += iniziorigaTP + "\n" + colore1bil + cell1bil + colore1bil + cell2bil;

        if (nodenodo["noData"].ToString() == "")
        {
          string coloretmp = "";

          if (nodenodo["bg"].ToString() == "")
          {
            coloretmp = colore1bil;
          }
          else
          {
            if (nodenodo["bg"].ToString() == "Green")
            {
              coloretmp = colore2bil;
            }
            else
            {
              coloretmp = colore3bil;
            }
          }

          partial_rtf_text += coloretmp + bordi + cell3bil + coloretmp + bordi + cell4bil + coloretmp + bordi + cell5bil + inizioriga2;
        }
        else
        {
          partial_rtf_text += colore1bil + cell3bil + colore1bil + cell4bil + colore1bil + cell5bil + inizioriga2;
        }

        if (nodenodo["paddingCodice"].ToString() != "")
        {
          for (int i = 0; i < (Convert.ToInt32(nodenodo["paddingCodice"].ToString()) / 3); i++)
          {
            partial_rtf_text += spazio;
          }
        }

        partial_rtf_text += " " + ((nodenodo["Codice"].ToString() == "") ? "" : nodenodo["Codice"].ToString()) + "\\cell";
        partial_rtf_text += " " + ((nodenodo["name"].ToString() == "") ? "" : nodenodo["name"].ToString()) + "\\cell";

        if (nodenodo["noData"].ToString() == "")
        {
          partial_rtf_text += " \\qr " + ((nodenodo["EA"].ToString() == "") ? "" : ConvertNumberNoDecimal(nodenodo["EA"].ToString())) + "\\cell";
          partial_rtf_text += " \\qr " + ((nodenodo["EP"].ToString() == "") ? "" : ConvertNumberNoDecimal(nodenodo["EP"].ToString())) + "\\cell";
          partial_rtf_text += " \\qr " + ((nodenodo["DIFF"].ToString() == "") ? "" : ConvertNumberNoDecimal(nodenodo["DIFF"].ToString())) + "\\cell";
        }
        else
        {
          partial_rtf_text += "\\cell";
          partial_rtf_text += "\\cell";
          partial_rtf_text += "\\cell";
        }

        partial_rtf_text += finerigaTP;


        DataTable datiBV = cBusinessObjects.GetData(int.Parse(IDB_Padre), typeof(BilancioVerifica), idcliente, idsessione, idtree);
        List<string> codicidone = new List<string>();
        foreach (DataRow nodeBV in datiBV.Rows)
        {

          if (nodeBV["ID"].ToString() != item.Attributes["ID"].Value)
            continue;

        
          string codice = nodeBV["codice"].ToString();

            bool eaexists = true;
            bool epexists = true;

            if (((nodeBV["esercizio"].ToString() != "") ? nodeBV["esercizio"].ToString() : "") == "EA")
            {
                if(((nodeBV["valore"].ToString() != "") ? nodeBV["valore"].ToString() : "") == "")
                {
                    eaexists = false;
                }
            }
            else
            {
                foreach (DataRow nodeBVtmp in datiBV.Rows)
                {
                    if (nodeBVtmp["ID"].ToString() != item.Attributes["ID"].Value)
                        continue;
                    
                    if (nodeBVtmp["esercizio"].ToString() != "EA")
                        continue;
                               
                    if (nodeBVtmp["valore"].ToString() == "")
                    {
                                
                            eaexists = false;
   
                    }
                }
            }


            if (((nodeBV["esercizio"].ToString() != "") ? nodeBV["esercizio"].ToString() : "") == "EP")
            {
                if (nodeBV["valore"].ToString() != "") 
                {
                    epexists = false;
                }
            }
            else
            {
                foreach (DataRow nodeBVtmp in datiBV.Rows)
                {
                    if (nodeBVtmp["ID"].ToString() != item.Attributes["ID"].Value)
                        continue;
                    if (nodeBVtmp["esercizio"].ToString() != "EP")
                        continue;
                    if (nodeBVtmp["valore"].ToString() == "")
                    {
                        epexists = false;
                    }
                }
                           
            }

            if(eaexists == false && epexists == false)
            {
                continue;
            }



            if(codicidone.Contains(codice))
            {
                continue;
            }
            else
            {
                codicidone.Add(codice);
            }


          partial_rtf_text += iniziorigaTP + "\n" + colore1bil + cell1bil + colore2bil + cell2bil;
          partial_rtf_text += colore2bil + bordi + cell3bil + colore2bil + bordi + cell4bil + colore2bil + bordi + cell5bil + inizioriga2;

          if (nodenodo["paddingCodice"].ToString() != "")
          {
            for (int i = 0; i < (Convert.ToInt32(nodenodo["paddingCodice"].ToString()) / 3); i++)
            {
              partial_rtf_text += spazio;
            }
          }

          partial_rtf_text += " " + "" + "\\cell";
          partial_rtf_text += " \\i\\fs14 " + ((nodeBV["codice"].ToString() == "") ? "" : nodeBV["codice"].ToString()) + " - " + ((nodeBV["titolo"].ToString() == "") ? "" : ((nodeBV["titolo"].ToString().Length > 30) ? nodeBV["titolo"].ToString().Substring(0, 30) : nodeBV["titolo"].ToString())) + "\\fs24\\i0\\cell";

          string EAValue = "";
          string EPValue = "";
          string DiffValue = "";

          if (((nodeBV["esercizio"].ToString() != "") ? nodeBV["esercizio"].ToString() : "") == "EA")
          {
            EAValue = ((nodeBV["valore"].ToString() != "") ? nodeBV["valore"].ToString() : "");
          }
          else
          {
            DataTable datiBVtmp = cBusinessObjects.GetData(int.Parse(IDB_Padre), typeof(BilancioVerifica), idcliente, idsessione, idtree);
                
            foreach (DataRow nodeBVtmp in datiBVtmp.Rows)
            {
               if (nodeBVtmp["ID"].ToString() !=  item.Attributes["ID"].Value)
                        continue;
              if (nodeBVtmp["esercizio"].ToString() == "EA" && nodeBVtmp["codice"].ToString() == codice)
                EAValue = nodeBVtmp["valore"].ToString();
            }

          }

          if (((nodeBV["esercizio"].ToString() != "") ? nodeBV["esercizio"].ToString() : "") == "EP")
          {
            EPValue = ((nodeBV["valore"].ToString() != "") ? nodeBV["valore"].ToString() : "");
          }
          else
          {
         
           DataTable datiBVtmp = cBusinessObjects.GetData(int.Parse(IDB_Padre), typeof(BilancioVerifica), idcliente, idsessione, idtree);
              foreach (DataRow nodeBVtmp in datiBVtmp.Rows)
              {
               if (nodeBVtmp["ID"].ToString() !=  item.Attributes["ID"].Value)
                        continue;
                if (nodeBVtmp["esercizio"].ToString() == "EP" && nodeBVtmp["codice"].ToString() == codice)
                 EPValue = nodeBVtmp["valore"].ToString();
             }
          }

          double valueea = 0.0;
          double valueep = 0.0;
          double valuediff = 0.0;

          double.TryParse(EAValue, out valueea);
          double.TryParse(EPValue, out valueep);
          valuediff = valueea - valueep;

          DiffValue = ConvertNumber(valuediff.ToString());

          partial_rtf_text += " \\qr\\i\\fs14 " + EAValue + "\\fs24\\i0\\cell";
          partial_rtf_text += " \\qr\\i\\fs14 " + EPValue + "\\fs24\\i0\\cell";
          partial_rtf_text += " \\qr\\i\\fs14 " + DiffValue + "\\fs24\\i0\\cell";
          partial_rtf_text += finerigaTP;

        }
      }

      partial_rtf_text += " \\pard\\bgdkdcross\\cfpat1\\shading59110\\tx2291\\par";

      return partial_rtf_text;
    }
    #endregion

    #region Bilancio Riclassificato
    string cell1r = "\\clvertalc\\cellx3000";
    string cell2r = "\\clvertalc\\cellx4600";
    string cell3r = "\\clvertalc\\cellx5800";
    string cell4r = "\\clvertalc\\cellx7400";
    string cell5r = "\\clvertalc\\cellx8600";
    string cell6r = "\\clvertalc\\cellx10000";

    private string AddBilancioRiclassificato(XmlNode nodeTree, string ID)
    {

      string partial_rtf_text = " ";

      if (!TitoloVerbale && !Fascicolo)
      {
        partial_rtf_text += " \\page ";
      }

      // string IDInterno = nodeData.Attributes["ID"].Value;
      DataTable datibilancio = cBusinessObjects.GetData(int.Parse(nodeTree.Attributes["ID"].Value), typeof(Excel_BilancioRiclassificato), idcliente, idsessione, idtree);


      ArrayList al = new ArrayList();
      al.Add("ATTIVO");
      al.Add("PASSIVO");
      al.Add("CONTO ECONOMICO");
      al.Add("SINTESI");

      foreach (string item in al)
      {
        
        if (item == "CONTO ECONOMICO" || item == "SINTESI")
        {
          partial_rtf_text += " \\pard\\keep \\page \\par ";
        }
      
        partial_rtf_text += "\\pard\\keep";

        partial_rtf_text += iniziorigaTP + "\n" + colore2 + bordi + ((item != "SINTESI") ? cell1r : cell2r) + colore2 + bordi + ((item != "SINTESI") ? cell2r : cell4r) + colore2 + bordi + ((item != "SINTESI") ? cell3r : cell6r) + ((item != "SINTESI") ? colore2 + bordi + cell4r + colore2 + bordi + cell5r + colore2 + bordi + cell6r : "") + inizioriga2;

        partial_rtf_text += "\\b \\qc " + ((item != "SINTESI") ? item : "STATO PATRIMONIALE RICLASSIFICATO") + "\\b0\\cell";
        partial_rtf_text += "\\b \\qc " + "ESERCIZIO attuale" + "\\b0\\cell";

        if (item != "SINTESI")
        {
          partial_rtf_text += "\\b \\qc " + "%" + "\\b0\\cell";
        }

        partial_rtf_text += "\\b \\qc " + "ESERCIZIO precedente" + "\\b0\\cell";

        if (item != "SINTESI")
        {
          partial_rtf_text += "\\b \\qc " + "%" + "\\b0\\cell";
          partial_rtf_text += "\\b \\qc " + "variazione" + "\\b0\\cell";
        }

        partial_rtf_text += finerigaTP;
        int maxrow = 0;
        string xx;
        foreach (DataRow dt in datibilancio.Rows)
        {
          xx = dt["row"].ToString();
          if (xx == "") xx = "-1";
          if (dt["Titolo"].ToString() == item && int.Parse(xx)>maxrow)   
                        maxrow = int.Parse(dt["row"].ToString());
             
        }
        for (int j = 0; j <= maxrow; j++)
        {
            DataRow nodenodo = null;

            foreach (DataRow dt in datibilancio.Rows)
            {
                if (dt["Titolo"].ToString() == item && dt["row"].ToString() == j.ToString())
                    nodenodo = dt;
            }
            if (nodenodo != null)
            {
                if (nodenodo["tipo"].ToString() == "spazio")
                {
                    partial_rtf_text += iniziorigaTP + " " + colore3 + ((item != "SINTESI") ? cell1r : cell2r) + colore3 + ((item != "SINTESI") ? cell2r : cell4r) + colore3 + ((item != "SINTESI") ? cell3r : cell6r) + ((item != "SINTESI") ? colore3 + cell4r + colore3 + cell5r + colore3 + cell6r : "") + inizioriga2;
                    partial_rtf_text += "\\cell" + "\\cell" + "\\cell" + ((item != "SINTESI") ? "\\cell \\cell \\cell" : "");
                    partial_rtf_text += finerigaTP;
                    continue;
                }

                if (nodenodo["tipo"].ToString() == "rigarossa")
                {
                    partial_rtf_text += "{\\pard \\brdrb \\brdrs\\brdrw1\\brsp1 {\\fs1\\~}\\par \\pard}";
                    continue;
                }

                partial_rtf_text += iniziorigaTP + " " + (((nodenodo["tipo"].ToString() != "totale" && nodenodo["tipo"].ToString() != "semitotale" && nodenodo["tipo"].ToString() != "grantotale")) ? colore3 : ((nodenodo["name"].ToString() != "Capitale immobilizzato" && nodenodo["name"].ToString() != "Capitale circolante netto") ? colore4 : colore3)) + ((item != "SINTESI") ? cell1r : cell2r) + (((nodenodo["tipo"].ToString() != "totale" && nodenodo["tipo"].ToString() != "semitotale" && nodenodo["tipo"].ToString() != "grantotale")) ? colore3 : ((nodenodo["name"].ToString() != "Capitale immobilizzato" && nodenodo["name"].ToString() != "Capitale circolante netto") ? colore4 : colore3)) + ((item != "SINTESI") ? cell2r : cell4r) + (((nodenodo["tipo"].ToString() != "totale" && nodenodo["tipo"].ToString() != "semitotale" && nodenodo["tipo"].ToString() != "grantotale")) ? colore3 : ((nodenodo["name"].ToString() != "Capitale immobilizzato" && nodenodo["name"].ToString() != "Capitale circolante netto") ? colore4 : colore3)) + ((item != "SINTESI") ? cell3r : cell6r) + ((item != "SINTESI") ? (((nodenodo["tipo"].ToString() != "totale" && nodenodo["tipo"].ToString() != "semitotale" && nodenodo["tipo"].ToString() != "grantotale")) ? colore3 : ((nodenodo["name"].ToString() != "Capitale immobilizzato" && nodenodo["name"].ToString() != "Capitale circolante netto") ? colore4 : colore3)) + cell4r + (((nodenodo["tipo"].ToString() != "totale" && nodenodo["tipo"].ToString() != "semitotale" && nodenodo["tipo"].ToString() != "grantotale")) ? colore3 : ((nodenodo["name"].ToString() != "Capitale immobilizzato" && nodenodo["name"].ToString() != "Capitale circolante netto") ? colore4 : colore3)) + cell5r + (((nodenodo["tipo"].ToString() != "totale" && nodenodo["tipo"].ToString() != "semitotale" && nodenodo["tipo"].ToString() != "grantotale")) ? colore3 : ((nodenodo["name"].ToString() != "Capitale immobilizzato" && nodenodo["name"].ToString() != "Capitale circolante netto") ? colore4 : colore3)) + cell6r : "") + inizioriga2;

                if (nodenodo["tipo"].ToString() == "titolo")
                {
                    partial_rtf_text += " " + ((nodenodo["name"].ToString() == "") ? "" : nodenodo["name"].ToString()) + "\\cell";

                    partial_rtf_text += " " + "\\cell";

                    if (item != "SINTESI")
                    {
                        partial_rtf_text += " " + "\\cell";
                    }

                    partial_rtf_text += " " + "\\cell";

                    if (item != "SINTESI")
                    {
                        partial_rtf_text += " " + "\\cell";
                        partial_rtf_text += " " + "\\cell";
                    }

                    partial_rtf_text += finerigaTP;
                    continue;
                }

                partial_rtf_text += (((nodenodo["tipo"].ToString() != "totale" && nodenodo["tipo"].ToString() != "semitotale")) ? "" : " \\b ");

                partial_rtf_text += " " + ((nodenodo["name"].ToString() == "") ? "" : nodenodo["name"].ToString()) + "\\cell";
                partial_rtf_text += " \\qr " + ((nodenodo["EA"].ToString() == "") ? "" : ConvertNumberNoDecimal(nodenodo["EA"].ToString())) + "\\cell";

                if (item != "SINTESI")
                {
                    partial_rtf_text += " \\qr " + ((nodenodo["PERCENT_EA"].ToString() == "" || nodenodo["PERCENT_EA"].ToString().Trim() == "0,00%") ? "" : (nodenodo["PERCENT_EA"].ToString())) + "\\cell";
                }

                partial_rtf_text += " \\qr " + ((nodenodo["EP"].ToString() == "") ? "" : ConvertNumberNoDecimal(nodenodo["EP"].ToString())) + "\\cell";

                if (item != "SINTESI")
                {
                    partial_rtf_text += " \\qr " + ((nodenodo["PERCENT_EP"].ToString() == "" || nodenodo["PERCENT_EP"].ToString().Trim() == "0,00%") ? "" : (nodenodo["PERCENT_EP"].ToString())) + "\\cell";
                    partial_rtf_text += " \\qr " + ((nodenodo["DIFF"].ToString() == "") ? "" : ConvertNumberNoDecimal(nodenodo["DIFF"].ToString())) + "\\cell";
                }

                partial_rtf_text += " \\b0 ";

                partial_rtf_text += finerigaTP;

            }
        }
        partial_rtf_text += "\\line\\pard\\bgdkdcross\\cfpat1\\shading59110\\tx2291\\par";
      }

      return partial_rtf_text;
    }
    #endregion

 
    string Dcell1bi = "\\clvertalc\\cellx3000";
    string Dcell2bi = "\\clvertalc\\cellx4500";
    string Dcell3bi = "\\clvertalc\\cellx6700";
    string Dcell4bi = "\\clvertalc\\cellx8300";
    string Dcell5bi = "\\clvertalc\\cellx9900";
      
    
    private string AddAccettazionedelrischio_6_1(XmlNode nodeTree, string ID)
    {
        DataRow cdt = null;
        DataTable dati = cBusinessObjects.GetData(int.Parse(nodeTree.Attributes["ID"].Value), typeof(Accettazionedelrischio_6_1), idcliente, idsessione, idtree);
        foreach (DataRow dt in dati.Rows)
            {
                cdt = dt;
            }
        string partial_rtf_text = "";
        if (cdt == null)
            cdt = dati.Rows.Add();
       
        partial_rtf_text += "\\pard\\keep";

        partial_rtf_text += " \\b Accettazione del rischio \\b0 \\line \\line";

        partial_rtf_text += "\\par";

        partial_rtf_text += "\\pard\\keep";
        string riganobordo=inizioriga + "\n" + colore1 +  "\\clvertalc\\cellx7500" +colore1 +  "\\clvertalc\\cellx9000"  + inizioriga2;

  
        partial_rtf_text += riganobordo;
        partial_rtf_text += " \\ql \\b " + "A seguito delle informazioni ottenute, e raccolte nelle carte di lavoro collegate alle attività preliminari all'accettazione dell'incarico, si determina la valutazione del rischio di incarico" + "\\b0 \\cell";
       
        partial_rtf_text += " \\qr \\b " +  cdt["rischio"].ToString() + "\\b0 \\cell";
   
        partial_rtf_text += fineriga;

        return partial_rtf_text;

      }


    private string AddDichiarazione_redditi_6_1(XmlNode nodeTree, string ID)
    {
        DataRow cdt = null;
        DataTable dati = cBusinessObjects.GetData(int.Parse(nodeTree.Attributes["ID"].Value), typeof(DichiarazioneRedditi_6_1), idcliente, idsessione, idtree);
        foreach (DataRow dt in dati.Rows)
            {
                cdt = dt;
            }
        string partial_rtf_text = "";
        if (cdt == null)
            cdt = dati.Rows.Add();

        //STIMA ORE
        partial_rtf_text += "\\pard\\keep";

        partial_rtf_text += " \\b Dichiarazione dei redditi \\b0 \\line \\line";

        partial_rtf_text += "\\par";

        partial_rtf_text += "\\pard\\keep";
        string riganobordo=inizioriga + "\n" + colore1 +  Dcell1bi +colore1 + Dcell2bi +colore1 + Dcell3bi +colore1 + Dcell4bi +colore1 + Dcell5bi + inizioriga2;

        string rigabordo=inizioriga + "\n" +bordodown+ colore1 +  Dcell1bi + bordodown+colore1 + Dcell2bi +bordodown+colore1 + Dcell3bi +bordodown+colore1 + Dcell4bi +bordodown+colore1 + Dcell5bi + inizioriga2; ;

        partial_rtf_text += riganobordo;
        partial_rtf_text += " \\qr \\b " + "Periodo d'imposta" + "\\b0 \\cell";
        partial_rtf_text += " \\qr\\cell";
        partial_rtf_text += " \\qr \\b " +  cdt["periodo_imposta"].ToString() + "\\b0 \\cell";
        partial_rtf_text += " \\qr\\cell";
        partial_rtf_text += " \\qr\\cell";
        partial_rtf_text += fineriga;
     

        partial_rtf_text += " \\qr\\cell";
        partial_rtf_text += " \\qr " +  cdt["H1"].ToString() + " \\cell";
        partial_rtf_text += " \\qr " +  cdt["H2"].ToString() + " \\cell";
        partial_rtf_text += " \\qr " +  cdt["H3"].ToString() + " \\cell";
        partial_rtf_text += " \\qr " +  cdt["H4"].ToString() + " \\cell";
        partial_rtf_text += fineriga;

        partial_rtf_text += "\\line\\pard\\bgdkdcross\\cfpat1\\shading59110\\tx2291\\par";
        partial_rtf_text += "\\pard\\keep";
        partial_rtf_text += riganobordo;
   
        partial_rtf_text += " \\qr " + "Data di presentazione della dichiarazione" + " \\cell";
        partial_rtf_text += " \\qr " +  cdt["C1R1"].ToString() + " \\cell";
        partial_rtf_text += " \\qr " +  cdt["C2R1"].ToString() + " \\cell";
        partial_rtf_text += " \\qr " +  cdt["C3R1"].ToString() + " \\cell";
        partial_rtf_text += " \\qr " +  cdt["C4R1"].ToString() + " \\cell";
        partial_rtf_text += fineriga;
        
        partial_rtf_text += " \\qr " + "In via telematica diretta - n° protocollo" + " \\cell";
        partial_rtf_text += " \\qr " +  cdt["C1R2"].ToString() + " \\cell";
        partial_rtf_text += " \\qr " +  cdt["C2R2"].ToString() + " \\cell";
        partial_rtf_text += " \\qr " +  cdt["C3R2"].ToString() + " \\cell";
        partial_rtf_text += " \\qr " +  cdt["C4R2"].ToString() + " \\cell";
        partial_rtf_text += fineriga;

        partial_rtf_text += " \\qr " + "Intermediario" + " \\cell";
        partial_rtf_text += " \\qr " +  cdt["C1R3"].ToString() + " \\cell";
        partial_rtf_text += " \\qr " +  cdt["C2R3"].ToString() + " \\cell";
        partial_rtf_text += " \\qr " +  cdt["C3R3"].ToString() + " \\cell";
        partial_rtf_text += " \\qr " +  cdt["C4R3"].ToString() + " \\cell";
        partial_rtf_text += fineriga;     
        
        partial_rtf_text += " \\qr " + "Protocollo intermediario" + " \\cell";
        partial_rtf_text += " \\qr " +  cdt["C1R4"].ToString() + " \\cell";
        partial_rtf_text += " \\qr " +  cdt["C2R4"].ToString() + " \\cell";
        partial_rtf_text += " \\qr " +  cdt["C3R4"].ToString() + " \\cell";
        partial_rtf_text += " \\qr " +  cdt["C4R4"].ToString() + " \\cell";
        partial_rtf_text += fineriga;        
        

        partial_rtf_text += " \\qr " + "Imposta dovuta per il periodo (credito/debito)" + " \\cell";
        partial_rtf_text += " \\qr " +  cdt["C1R5"].ToString() + " \\cell";
        partial_rtf_text += " \\qr " +  cdt["C2R5"].ToString() + " \\cell";
        partial_rtf_text += " \\qr " +  cdt["C3R5"].ToString() + " \\cell";
        partial_rtf_text += " \\qr " +  cdt["C4R5"].ToString() + " \\cell";
        partial_rtf_text += fineriga;  
 
        partial_rtf_text += "\\line\\pard\\bgdkdcross\\cfpat1\\shading59110\\tx2291\\par";
        partial_rtf_text += "\\pard\\keep";
        partial_rtf_text += rigabordo;
     
        double ttot = 0;
        double temp = 0;
        string txtTotale_debitiimposta = "";
          
        double.TryParse(cdt["C1R5"].ToString(), out temp);
        if(temp>0)
            ttot += temp;

        double.TryParse(cdt["C2R5"].ToString(), out temp);
        if(temp>0)
            ttot += temp;

            double.TryParse(cdt["C3R5"].ToString(), out temp);
        if(temp>0)
            ttot += temp;

        double.TryParse(cdt["C4R5"].ToString(), out temp);
        if(temp>0)
            ttot += temp;

        txtTotale_debitiimposta=cBusinessObjects.ConvertInteger(ttot.ToString());

        partial_rtf_text += " \\qr " + "Totale debiti d'imposta" + " \\cell";
        partial_rtf_text += " \\qr\\cell";
        partial_rtf_text += " \\qr \\b " +  txtTotale_debitiimposta + "\\b0 \\cell";
        partial_rtf_text += " \\qr\\cell";
        partial_rtf_text += " \\qr\\cell";
        partial_rtf_text += fineriga;  
 
        partial_rtf_text += "\\line\\pard\\bgdkdcross\\cfpat1\\shading59110\\tx2291\\par";
        partial_rtf_text += "\\pard\\keep";
        partial_rtf_text += riganobordo;
     
        
        partial_rtf_text += " \\qr " + "Primo acconto d'imposta" + " \\cell";
        partial_rtf_text += " \\qr " +  cdt["C1ACC1"].ToString() + " \\cell";
        partial_rtf_text += " \\qr " +  cdt["C2ACC1"].ToString() + " \\cell";
        partial_rtf_text += " \\qr " +  cdt["C3ACC1"].ToString() + " \\cell";
        partial_rtf_text += " \\qr " +  cdt["C4ACC1"].ToString() + " \\cell";
        partial_rtf_text += fineriga;  

        temp = 0;
        string txtTotale = "";
           
        double.TryParse(cdt["C1ACC1"].ToString(), out temp);
        ttot += temp;
        double.TryParse(cdt["C2ACC1"].ToString(), out temp);
        ttot += temp;
        double.TryParse(cdt["C3ACC1"].ToString(), out temp);
        ttot += temp;
        double.TryParse(cdt["C4ACC1"].ToString(), out temp);
        ttot += temp;

        txtTotale=cBusinessObjects.ConvertInteger(ttot.ToString());

        partial_rtf_text += " \\qr " + "Totale" + " \\cell";
        partial_rtf_text += " \\qr\\cell";
        partial_rtf_text += " \\qr \\b " +  txtTotale + "\\b0 \\cell";
        partial_rtf_text += " \\qr\\cell";
        partial_rtf_text += " \\qr\\cell";
        partial_rtf_text += fineriga;  

        partial_rtf_text += " \\qr " + "Compensazioni con altri crediti" + " \\cell";
        partial_rtf_text += " \\qr\\cell";
        partial_rtf_text += " \\qr " +  cdt["compensazione1"].ToString() + " \\cell";
        partial_rtf_text += " \\qr\\cell";
        partial_rtf_text += " \\qr\\cell";
        partial_rtf_text += fineriga;  
 
        temp = 0;
        string txt_saldo_da_pagare = "";

        double.TryParse(cdt["compensazione1"].ToString() , out temp);
        ttot += temp;

        txt_saldo_da_pagare=cBusinessObjects.ConvertInteger(ttot.ToString());


        partial_rtf_text += " \\qr " + "Saldo da pagare" + " \\cell";
        partial_rtf_text += " \\qr\\cell";
        partial_rtf_text += " \\qr " +  txt_saldo_da_pagare + " \\cell";
        partial_rtf_text += " \\qr\\cell";
        partial_rtf_text += " \\qr\\cell";
        partial_rtf_text += fineriga;  

        partial_rtf_text += "\\line\\pard\\bgdkdcross\\cfpat1\\shading59110\\tx2291\\par";
        partial_rtf_text += "\\pard\\keep";
      
        partial_rtf_text += inizioriga + "\n" + colore2 + bordi + cell1CeR2 + colore2 + bordi + cell2CeR2 + colore2 + bordi + cell3CeR2 + colore2 + bordi + cell4CeR2+   inizioriga2;

        partial_rtf_text += " \\qc " + "Rateizzi" + "\\cell";
    
        partial_rtf_text += " \\qc " + "Scadenze" + "\\cell";
    
        partial_rtf_text += " \\qc " + "Rata" + "\\cell";
  
        partial_rtf_text += " \\qc " + "Pagato il" + "\\cell";
   
     


        DataTable datirate = cBusinessObjects.GetData(int.Parse(nodeTree.Attributes["ID"].Value), typeof(DichiarazioneRedditi_6_1_Rate), idcliente, idsessione, idtree);

        foreach (DataRow node in datirate.Rows)
        {
                   
            partial_rtf_text += inizioriga + "\n" + colore1 + bordi + cell1CeR2 + colore1 + bordi + cell2CeR2 + colore1 + bordi + cell3CeR2  + colore1 + bordi + cell4CeR2 + inizioriga2;
            partial_rtf_text += " \\qc " + node["ID"].ToString() + " \\cell";
            partial_rtf_text += " \\qc " + node["scadenze"].ToString() + " \\cell";
            partial_rtf_text += " \\ql " + node["rata"].ToString() + " \\cell";
            partial_rtf_text += " \\ql " + node["pagatoil"].ToString() + " \\cell";
    
            partial_rtf_text += fineriga;
      
        }
        
        partial_rtf_text += "\\line\\pard\\bgdkdcross\\cfpat1\\shading59110\\tx2291\\par";
        partial_rtf_text += "\\line";
        partial_rtf_text += "\\pard\\keep";
        partial_rtf_text += riganobordo;
       
       
        

        partial_rtf_text += " \\qr " + "Secondo acconto d'imposta" + " \\cell";
        partial_rtf_text += " \\qr " +  cdt["C1ACC2"].ToString() + " \\cell";
        partial_rtf_text += " \\qr " +  cdt["C2ACC2"].ToString() + " \\cell";
        partial_rtf_text += " \\qr " +  cdt["C3ACC2"].ToString() + " \\cell";
        partial_rtf_text += " \\qr " +  cdt["C4ACC2"].ToString() + " \\cell";
        partial_rtf_text += fineriga;  

        
        partial_rtf_text += " \\qr " + "Compensazioni con altri crediti" + " \\cell";
        partial_rtf_text += " \\qr\\cell";
        partial_rtf_text += " \\qr " +  cdt["compensazione2"].ToString() + " \\cell";
        partial_rtf_text += " \\qr\\cell";
        partial_rtf_text += " \\qr\\cell";
        partial_rtf_text += fineriga;  

        temp = 0;
        ttot = 0;

        double.TryParse(cdt["C1ACC2"].ToString() , out temp);
        ttot += temp;
        double.TryParse(cdt["C2ACC2"].ToString() , out temp);
        ttot += temp;
        double.TryParse(cdt["C3ACC2"].ToString() , out temp);
        ttot += temp;
        double.TryParse(cdt["C4ACC2"].ToString() , out temp);
        ttot += temp;

        temp = 0;
        double.TryParse(cdt["compensazione2"].ToString() , out temp);
        ttot += temp;

        string txt_saldo_da_pagare2=cBusinessObjects.ConvertInteger(ttot.ToString());

        partial_rtf_text += " \\qr " + "Saldo da pagare" + " \\cell";
        partial_rtf_text += " \\qr\\cell";
        partial_rtf_text += " \\qr " +  txt_saldo_da_pagare2 + " \\cell";
        partial_rtf_text += " \\qr\\cell";
        partial_rtf_text += " \\qr\\cell";
        partial_rtf_text += fineriga;  

        partial_rtf_text += " \\qr " + "Pagamento avvenuto il" + " \\cell";
        partial_rtf_text += " \\qr\\cell";
        partial_rtf_text += " \\qr " +  cdt["datapagamento"].ToString() + " \\cell";
        partial_rtf_text += " \\qr\\cell";
        partial_rtf_text += " \\qr\\cell";
        partial_rtf_text += fineriga;  
        
        

        partial_rtf_text += "\\line\\pard\\bgdkdcross\\cfpat1\\shading59110\\tx2291\\par";

        partial_rtf_text += "\\line";

      return partial_rtf_text;
    }


    #region Bilancio Indici
    string cell1bi = "\\clvertalc\\cellx5800";
    string cell2bi = "\\clvertalc\\cellx7880";
    string cell3bi = "\\clvertalc\\cellx9960";

    private string AddBilancioIndici(XmlNode nodeTree, string ID)
    {
      DataRow nodenodo = null;
      DataTable dati = cBusinessObjects.GetData(int.Parse(nodeTree.Attributes["ID"].Value), typeof(Excel_BilancioIndici), idcliente, idsessione, idtree);
      foreach (DataRow dt in dati.Rows)
      {
        nodenodo = dt;
      }
      string partial_rtf_text = "";
      if (nodenodo == null)
        return "";

      partial_rtf_text += "\\line\\pard\\keepn\\b\\f0 " + "INDICI DI STRUTTURA" + ":\\b0 \\line \\par\n";

      #region INDICI DI STRUTTURA

      partial_rtf_text += "\\pard\\keep";

      partial_rtf_text += iniziorigaTP + "\n" + colore3 + cell1bi + colore2 + bordi + cell2bi + colore2 + bordi + cell3bi + inizioriga2;

      partial_rtf_text += "\\b \\ql  \\b0\\cell";
      partial_rtf_text += "\\b \\qc ESERCIZIO ATTUALE \\b0\\cell";
      partial_rtf_text += "\\b \\qc ESERCIZIO PRECEDENTE \\b0\\cell";

      partial_rtf_text += finerigaTP;

      partial_rtf_text += iniziorigaTP + " " + colore3 + cell1bi + colore3 + cell2bi + colore3 + cell3bi + inizioriga2;
      partial_rtf_text += "\n \\cell \n \\cell \n \\cell";
      partial_rtf_text += finerigaTP;

      partial_rtf_text += "{\\pard \\brdrb \\brdrs\\brdrw10\\brsp10 {\\fs4\\~}\\par \\pard}";

      partial_rtf_text += iniziorigaTP + "" + colore2 + cell1bi + colore2 + cell2bi + colore2 + cell3bi + inizioriga2;

      partial_rtf_text += "\\b \\ql INDICE DI LIQUIDITA' SECCA \\b0 \\cell";
      partial_rtf_text += "\\b \\qc " + ((nodenodo["txtEA_1"].ToString() == "") ? "" : nodenodo["txtEA_1"].ToString()) + " \\b0\\cell";
      partial_rtf_text += "\\b \\qc " + ((nodenodo["txtEP_1"].ToString() == "") ? "" : nodenodo["txtEP_1"].ToString()) + " \\b0\\cell";

      partial_rtf_text += finerigaTP;

      partial_rtf_text += iniziorigaTP + "" + colore3 + cell1bi + colore3 + cell2bi + colore3 + cell3bi + inizioriga2;

      partial_rtf_text += "\\b \\ql att. corr / pass. corr. \\cell";
      partial_rtf_text += "\\cell";
      partial_rtf_text += "\\cell";

      partial_rtf_text += finerigaTP;

      partial_rtf_text += "{\\pard \\brdrb \\brdrs\\brdrw10\\brsp10 {\\fs4\\~}\\par \\pard}";

      partial_rtf_text += iniziorigaTP + "" + colore2 + cell1bi + colore2 + cell2bi + colore2 + cell3bi + inizioriga2;

      partial_rtf_text += "\\b \\ql INDICE DI LIQUIDITA' CORRENTE \\b0 \\cell";
      partial_rtf_text += "\\b \\qc " + ((nodenodo["txtEA_2"].ToString() == "") ? "" : nodenodo["txtEA_2"].ToString()) + " \\b0\\cell";
      partial_rtf_text += "\\b \\qc " + ((nodenodo["txtEP_2"].ToString() == "") ? "" : nodenodo["txtEP_2"].ToString()) + " \\b0\\cell";

      partial_rtf_text += finerigaTP;

      partial_rtf_text += iniziorigaTP + "" + colore3 + cell1bi + colore3 + cell2bi + colore3 + cell3bi + inizioriga2;

      partial_rtf_text += "\\b \\ql liquidità + magazz. / pass. corr \\cell";
      partial_rtf_text += "\\cell";
      partial_rtf_text += "\\cell";

      partial_rtf_text += finerigaTP;

      partial_rtf_text += "{\\pard \\brdrb \\brdrs\\brdrw10\\brsp10 {\\fs4\\~}\\par \\pard}";

      partial_rtf_text += iniziorigaTP + "" + colore2 + cell1bi + colore2 + cell2bi + colore2 + cell3bi + inizioriga2;

      partial_rtf_text += "\\b \\ql INDICE DI INDEBITAMENTO \\b0 \\cell";
      partial_rtf_text += "\\b \\qc " + ((nodenodo["txtEA_3"].ToString() == "") ? "" : nodenodo["txtEA_3"].ToString()) + " \\b0\\cell";
      partial_rtf_text += "\\b \\qc " + ((nodenodo["txtEP_3"].ToString() == "") ? "" : nodenodo["txtEP_3"].ToString()) + " \\b0\\cell";

      partial_rtf_text += finerigaTP;

      partial_rtf_text += iniziorigaTP + "" + colore3 + cell1bi + colore3 + cell2bi + colore3 + cell3bi + inizioriga2;

      partial_rtf_text += "\\b \\ql mezzi terzi / mezzi propri \\cell";
      partial_rtf_text += "\\cell";
      partial_rtf_text += "\\cell";

      partial_rtf_text += finerigaTP;

      partial_rtf_text += "{\\pard \\brdrb \\brdrs\\brdrw10\\brsp10 {\\fs4\\~}\\par \\pard}";

      partial_rtf_text += iniziorigaTP + "" + colore2 + cell1bi + colore2 + cell2bi + colore2 + cell3bi + inizioriga2;

      partial_rtf_text += "\\b \\ql INDIPENDENZA FINANZIARIA \\b0\\cell";
      partial_rtf_text += "\\b \\qc " + ((nodenodo["txtEA_4"].ToString() == "") ? "" : nodenodo["txtEA_4"].ToString()) + " \\b0\\cell";
      partial_rtf_text += "\\b \\qc " + ((nodenodo["txtEP_4"].ToString() == "") ? "" : nodenodo["txtEP_4"].ToString()) + " \\b0\\cell";

      partial_rtf_text += finerigaTP;

      partial_rtf_text += iniziorigaTP + "" + colore3 + cell1bi + colore3 + cell2bi + colore3 + cell3bi + inizioriga2;

      partial_rtf_text += "\\b \\ql mezzi propri / mezzi terzi \\cell";
      partial_rtf_text += "\\cell";
      partial_rtf_text += "\\cell";

      partial_rtf_text += finerigaTP;

      partial_rtf_text += "{\\pard \\brdrb \\brdrs\\brdrw10\\brsp10 {\\fs4\\~}\\par \\pard}";

      partial_rtf_text += iniziorigaTP + "" + colore2 + cell1bi + colore2 + cell2bi + colore2 + cell3bi + inizioriga2;

      partial_rtf_text += "\\b \\ql INDICE DI STRUTTURA \\b0 \\cell";
      partial_rtf_text += "\\b \\qc " + ((nodenodo["txtEA_5"].ToString() == "") ? "" : nodenodo["txtEA_5"].ToString()) + " \\b0\\cell";
      partial_rtf_text += "\\b \\qc " + ((nodenodo["txtEP_5"].ToString() == "") ? "" : nodenodo["txtEP_5"].ToString()) + " \\b0\\cell";

      partial_rtf_text += finerigaTP;

      partial_rtf_text += iniziorigaTP + "" + colore3 + cell1bi + colore3 + cell2bi + colore3 + cell3bi + inizioriga2;

      partial_rtf_text += "\\b \\ql patr. netto / tot. immobilizz. \\cell";
      partial_rtf_text += "\\cell";
      partial_rtf_text += "\\cell";

      partial_rtf_text += finerigaTP;

      partial_rtf_text += "{\\pard \\brdrb \\brdrs\\brdrw10\\brsp10 {\\fs4\\~}\\par \\pard}";

      partial_rtf_text += iniziorigaTP + "" + colore2 + cell1bi + colore2 + cell2bi + colore2 + cell3bi + inizioriga2;

      partial_rtf_text += "\\b \\ql INDICE DI COPERTURA \\b0 \\cell";
      partial_rtf_text += "\\b \\qc " + ((nodenodo["txtEA_6"].ToString() == "") ? "" : nodenodo["txtEA_6"].ToString()) + " \\b0\\cell";
      partial_rtf_text += "\\b \\qc " + ((nodenodo["txtEP_6"].ToString() == "") ? "" : nodenodo["txtEP_6"].ToString()) + " \\b0\\cell";

      partial_rtf_text += finerigaTP;

      partial_rtf_text += iniziorigaTP + "" + colore3 + cell1bi + colore3 + cell2bi + colore3 + cell3bi + inizioriga2;

      partial_rtf_text += "\\b \\ql patr. netto + deb.m/l / tot. immobilizz. \\cell";
      partial_rtf_text += "\\cell";
      partial_rtf_text += "\\cell";

      partial_rtf_text += finerigaTP;

      partial_rtf_text += "\\line\\pard\\bgdkdcross\\cfpat1\\shading59110\\tx2291\\par";

      #endregion

      partial_rtf_text += "\\line\\pard\\keepn\\b\\f0 " + "INDICI DI REDDITIVITA'" + ":\\b0 \\line \\par\n";

      #region INDICI DI REDDITIVITA'

      partial_rtf_text += "\\pard\\keep";

      partial_rtf_text += iniziorigaTP + "\n" + colore3 + cell1bi + colore2 + bordi + cell2bi + colore2 + bordi + cell3bi + inizioriga2;

      partial_rtf_text += "\\b \\ql  \\b0\\cell";
      partial_rtf_text += "\\b \\qc ESERCIZIO ATTUALE \\b0\\cell";
      partial_rtf_text += "\\b \\qc ESERCIZIO PRECEDENTE \\b0\\cell";

      partial_rtf_text += finerigaTP;

      partial_rtf_text += iniziorigaTP + " " + colore3 + cell1bi + colore3 + cell2bi + colore3 + cell3bi + inizioriga2;
      partial_rtf_text += "\n \\cell \n \\cell \n \\cell";
      partial_rtf_text += finerigaTP;

      partial_rtf_text += "{\\pard \\brdrb \\brdrs\\brdrw10\\brsp10 {\\fs4\\~}\\par \\pard}";

      partial_rtf_text += iniziorigaTP + "" + colore2 + cell1bi + colore2 + cell2bi + colore2 + cell3bi + inizioriga2;

      partial_rtf_text += "\\b \\ql R.O.I. \\b0\\cell";
      partial_rtf_text += "\\b \\qc " + ((nodenodo["txtEA_7"].ToString() == "") ? "" : nodenodo["txtEA_7"].ToString()) + " \\b0\\cell";
      partial_rtf_text += "\\b \\qc " + ((nodenodo["txtEP_7"].ToString() == "") ? "" : nodenodo["txtEP_7"].ToString()) + " \\b0\\cell";

      partial_rtf_text += finerigaTP;

      partial_rtf_text += iniziorigaTP + "" + colore3 + cell1bi + colore3 + cell2bi + colore3 + cell3bi + inizioriga2;

      partial_rtf_text += "\\b \\ql utile operativo / capitale investito \\cell";
      partial_rtf_text += "\\b \\qc \\cell";
      partial_rtf_text += "\\b \\qc \\cell";

      partial_rtf_text += finerigaTP;

      partial_rtf_text += "{\\pard \\brdrb \\brdrs\\brdrw10\\brsp10 {\\fs4\\~}\\par \\pard}";

      partial_rtf_text += iniziorigaTP + "" + colore2 + cell1bi + colore2 + cell2bi + colore2 + cell3bi + inizioriga2;

      partial_rtf_text += "\\b \\ql R.O.E. \\cell";
      partial_rtf_text += "\\b \\qc " + ((nodenodo["txtEA_8"].ToString() == "") ? "" : nodenodo["txtEA_8"].ToString()) + " \\b0\\cell";
      partial_rtf_text += "\\b \\qc " + ((nodenodo["txtEP_8"].ToString() == "") ? "" : nodenodo["txtEP_8"].ToString()) + " \\b0\\cell";

      partial_rtf_text += finerigaTP;

      partial_rtf_text += iniziorigaTP + "" + colore3 + cell1bi + colore3 + cell2bi + colore3 + cell3bi + inizioriga2;

      partial_rtf_text += "\\b \\ql utile netto / patr. netto \\cell";
      partial_rtf_text += "\\b \\qc \\cell";
      partial_rtf_text += "\\b \\qc \\cell";

      partial_rtf_text += finerigaTP;

      partial_rtf_text += "{\\pard \\brdrb \\brdrs\\brdrw10\\brsp10 {\\fs4\\~}\\par \\pard}";

      partial_rtf_text += iniziorigaTP + "" + colore2 + cell1bi + colore2 + cell2bi + colore2 + cell3bi + inizioriga2;

      partial_rtf_text += "\\b \\ql R.O.S. \\b0\\cell";
      partial_rtf_text += "\\b \\qc " + ((nodenodo["txtEA_9"].ToString() == "") ? "" : nodenodo["txtEA_9"].ToString()) + " \\b0\\cell";
      partial_rtf_text += "\\b \\qc " + ((nodenodo["txtEP_9"].ToString() == "") ? "" : nodenodo["txtEP_9"].ToString()) + " \\b0\\cell";

      partial_rtf_text += finerigaTP;

      partial_rtf_text += iniziorigaTP + "" + colore3 + cell1bi + colore3 + cell2bi + colore3 + cell3bi + inizioriga2;

      partial_rtf_text += "\\b \\ql utile operativo / vendite nette \\cell";
      partial_rtf_text += "\\b \\qc \\cell";
      partial_rtf_text += "\\b \\qc \\cell";

      partial_rtf_text += finerigaTP;

      partial_rtf_text += "{\\pard \\brdrb \\brdrs\\brdrw10\\brsp10 {\\fs4\\~}\\par \\pard}";

      partial_rtf_text += iniziorigaTP + "" + colore2 + cell1bi + colore2 + cell2bi + colore2 + cell3bi + inizioriga2;

      partial_rtf_text += "\\b \\ql INDICE TENSIONE FINANZIARIA \\b0 \\cell";
      partial_rtf_text += "\\b \\qc " + ((nodenodo["txtEA_10"].ToString() == "") ? "" : nodenodo["txtEA_10"].ToString()) + " \\b0\\cell";
      partial_rtf_text += "\\b \\qc " + ((nodenodo["txtEP_10"].ToString() == "") ? "" : nodenodo["txtEP_10"].ToString()) + " \\b0\\cell";

      partial_rtf_text += finerigaTP;

      partial_rtf_text += iniziorigaTP + "" + colore3 + cell1bi + colore3 + cell2bi + colore3 + cell3bi + inizioriga2;

      partial_rtf_text += "\\b \\ql risultato operativo / gestione fin. netta \\cell";
      partial_rtf_text += "\\b \\qc \\cell";
      partial_rtf_text += "\\b \\qc \\cell";

      partial_rtf_text += finerigaTP;

      partial_rtf_text += "\\line\\pard\\bgdkdcross\\cfpat1\\shading59110\\tx2291\\par";

      #endregion

      partial_rtf_text += "\\line\\pard\\keepn\\b\\f0 " + "INDICI DI ROTAZIONE" + ":\\b0 \\line \\par\n";

      #region INDICI DI ROTAZIONE

      partial_rtf_text += "\\pard\\keep";

      partial_rtf_text += iniziorigaTP + "\n" + colore3 + cell1bi + colore2 + bordi + cell2bi + colore2 + bordi + cell3bi + inizioriga2;

      partial_rtf_text += "\\b \\ql  \\b0\\cell";
      partial_rtf_text += "\\b \\qc ESERCIZIO ATTUALE \\b0\\cell";
      partial_rtf_text += "\\b \\qc ESERCIZIO PRECEDENTE \\b0\\cell";

      partial_rtf_text += finerigaTP;

      partial_rtf_text += iniziorigaTP + " " + colore3 + cell1bi + colore3 + cell2bi + colore3 + cell3bi + inizioriga2;
      partial_rtf_text += "\n \\cell \n \\cell \n \\cell";
      partial_rtf_text += finerigaTP;

      partial_rtf_text += "{\\pard \\brdrb \\brdrs\\brdrw10\\brsp10 {\\fs4\\~}\\par \\pard}";

      partial_rtf_text += iniziorigaTP + "" + colore2 + cell1bi + colore2 + cell2bi + colore2 + cell3bi + inizioriga2;

      partial_rtf_text += "\\b \\ql ROTAZIONE CREDITI (giorni) \\b0 \\cell";
      partial_rtf_text += "\\b \\qc " + ((nodenodo["txtEA_11"].ToString() == "") ? "" : nodenodo["txtEA_11"].ToString()) + " \\b0\\cell";
      partial_rtf_text += "\\b \\qc " + ((nodenodo["txtEP_11"].ToString() == "") ? "" : nodenodo["txtEP_11"].ToString()) + " \\b0\\cell";

      partial_rtf_text += finerigaTP;

      partial_rtf_text += iniziorigaTP + "" + colore3 + cell1bi + colore3 + cell2bi + colore3 + cell3bi + inizioriga2;

      partial_rtf_text += "\\b \\ql credito / vendite * 365 \\cell";
      partial_rtf_text += "\\b \\qc \\cell";
      partial_rtf_text += "\\b \\qc \\cell";

      partial_rtf_text += finerigaTP;

      partial_rtf_text += "{\\pard \\brdrb \\brdrs\\brdrw10\\brsp10 {\\fs4\\~}\\par \\pard}";

      partial_rtf_text += iniziorigaTP + "" + colore2 + cell1bi + colore2 + cell2bi + colore2 + cell3bi + inizioriga2;

      partial_rtf_text += "\\b \\ql ROTAZ. FORNITORI (giorni) \\b0 \\cell";
      partial_rtf_text += "\\b \\qc " + ((nodenodo["txtEA_12"].ToString() == "") ? "" : nodenodo["txtEA_12"].ToString()) + " \\b0\\cell";
      partial_rtf_text += "\\b \\qc " + ((nodenodo["txtEP_12"].ToString() == "") ? "" : nodenodo["txtEP_12"].ToString()) + " \\b0\\cell";

      partial_rtf_text += finerigaTP;

      partial_rtf_text += iniziorigaTP + "" + colore3 + cell1bi + colore3 + cell2bi + colore3 + cell3bi + inizioriga2;

      partial_rtf_text += "\\b \\ql fornitori / acquisti *365 \\cell";
      partial_rtf_text += "\\b \\qc \\cell";
      partial_rtf_text += "\\b \\qc \\cell";

      partial_rtf_text += finerigaTP;

      partial_rtf_text += "{\\pard \\brdrb \\brdrs\\brdrw10\\brsp10 {\\fs4\\~}\\par \\pard}";

      partial_rtf_text += iniziorigaTP + "" + colore2 + cell1bi + colore2 + cell2bi + colore2 + cell3bi + inizioriga2;

      partial_rtf_text += "\\b \\ql ROTAZ. MAGAZZINO (giorni) \\b0 \\cell";
      partial_rtf_text += "\\b \\qc " + ((nodenodo["txtEA_13"].ToString() == "") ? "" : nodenodo["txtEA_13"].ToString()) + " \\b0\\cell";
      partial_rtf_text += "\\b \\qc " + ((nodenodo["txtEP_13"].ToString() == "") ? "" : nodenodo["txtEP_13"].ToString()) + " \\b0\\cell";

      partial_rtf_text += finerigaTP;

      partial_rtf_text += iniziorigaTP + "" + colore3 + cell1bi + colore3 + cell2bi + colore3 + cell3bi + inizioriga2;

      partial_rtf_text += "\\b \\ql rimanenza / vendite * 365 \\cell";
      partial_rtf_text += "\\b \\qc \\cell";
      partial_rtf_text += "\\b \\qc \\cell";

      partial_rtf_text += finerigaTP;

      partial_rtf_text += "\\line\\pard\\bgdkdcross\\cfpat1\\shading59110\\tx2291\\par";

      #endregion

      return partial_rtf_text;
    }
    #endregion

    #region Bilancio Abbreviato Indici
    private string AddBilancioAbbreviatoIndici(XmlNode nodeTree, string ID)
    {
    
      DataRow nodenodo = null;
      DataTable dati = cBusinessObjects.GetData(int.Parse(ID), typeof(Excel_BilancioIndici), idcliente, idsessione, idtree);
      foreach (DataRow dt in dati.Rows)
      {
        nodenodo = dt;
      }
      string partial_rtf_text = "";
      if (nodenodo.ToString()=="")
        return "";
     
     
      partial_rtf_text += "\\line\\pard\\keepn\\b\\f0 " + "INDICI DI STRUTTURA" + ":\\b0 \\line \\par\n";

      #region INDICI DI STRUTTURA

      partial_rtf_text += "\\pard\\keep";

      partial_rtf_text += iniziorigaTP + "\n" + colore2 + cell1bi + colore2 + cell2bi + colore2 + cell3bi + inizioriga2;

      partial_rtf_text += "\\b \\qc  \\b0\\cell";
      partial_rtf_text += "\\b \\qc ESERCIZIO ATTUALE \\b0\\cell";
      partial_rtf_text += "\\b \\qc ESERCIZIO PRECEDENTE \\b0\\cell";

      partial_rtf_text += finerigaTP;

      partial_rtf_text += iniziorigaTP + "\n" + colore3 + cell1bi + colore3 + cell2bi + colore3 + cell3bi + inizioriga2;

      partial_rtf_text += "\\b \\qc INDICE DI LIQUIDITA' SECCA \\b0 \\line att. corr / pass. corr. \\b0\\cell";
      partial_rtf_text += "\\b \\qc " + ((nodenodo["txtEA_1"].ToString() == "") ? "" : nodenodo["txtEA_1"].ToString()) + " \\b0\\cell";
      partial_rtf_text += "\\b \\qc " + ((nodenodo["txtEP_1"].ToString() == "") ? "" : nodenodo["txtEP_1"].ToString()) + " \\b0\\cell";

      partial_rtf_text += finerigaTP;

      partial_rtf_text += iniziorigaTP + "\n" + colore3 + cell1bi + colore3 + cell2bi + colore3 + cell3bi + inizioriga2;

      partial_rtf_text += "\\b \\qc INDICE DI LIQUIDITA' CORRENTE \\b0 \\line liquidità + magazz. / pass. corr \\b0\\cell";
      partial_rtf_text += "\\b \\qc " + ((nodenodo["txtEA_2"].ToString() == "") ? "" : nodenodo["txtEA_2"].ToString()) + " \\b0\\cell";
      partial_rtf_text += "\\b \\qc " + ((nodenodo["txtEP_2"].ToString() == "") ? "" : nodenodo["txtEP_2"].ToString()) + " \\b0\\cell";

      partial_rtf_text += finerigaTP;

      partial_rtf_text += iniziorigaTP + "\n" + colore3 + cell1bi + colore3 + cell2bi + colore3 + cell3bi + inizioriga2;

      partial_rtf_text += "\\b \\qc INDICE DI INDEBITAMENTO \\b0 \\line mezzi terzi / mezzi propri \\b0\\cell";
      partial_rtf_text += "\\b \\qc " + ((nodenodo["txtEA_3"].ToString() == "") ? "" : nodenodo["txtEA_3"].ToString()) + " \\b0\\cell";
      partial_rtf_text += "\\b \\qc " + ((nodenodo["txtEP_3"].ToString() == "") ? "" : nodenodo["txtEP_3"].ToString()) + " \\b0\\cell";

      partial_rtf_text += finerigaTP;

      partial_rtf_text += iniziorigaTP + "\n" + colore3 + cell1bi + colore3 + cell2bi + colore3 + cell3bi + inizioriga2;

      partial_rtf_text += "\\b \\qc INDIPENDENZA FINANZIARIA \\b0 \\line mezzi propri / mezzi terzi \\b0\\cell";
      partial_rtf_text += "\\b \\qc " + ((nodenodo["txtEA_4"].ToString() == "") ? "" : nodenodo["txtEA_4"].ToString()) + " \\b0\\cell";
      partial_rtf_text += "\\b \\qc " + ((nodenodo["txtEP_4"].ToString() == "") ? "" : nodenodo["txtEP_4"].ToString()) + " \\b0\\cell";

      partial_rtf_text += finerigaTP;

      partial_rtf_text += iniziorigaTP + "\n" + colore3 + cell1bi + colore3 + cell2bi + colore3 + cell3bi + inizioriga2;

      partial_rtf_text += "\\b \\qc INDICE DI STRUTTURA \\b0 \\line patr. netto / tot. immobilizz. \\b0\\cell";
      partial_rtf_text += "\\b \\qc " + ((nodenodo["txtEA_5"].ToString() == "") ? "" : nodenodo["txtEA_5"].ToString()) + " \\b0\\cell";
      partial_rtf_text += "\\b \\qc " + ((nodenodo["txtEP_5"].ToString()== "") ? "" : nodenodo["txtEP_5"].ToString()) + " \\b0\\cell";

      partial_rtf_text += finerigaTP;

      partial_rtf_text += iniziorigaTP + "\n" + colore3 + cell1bi + colore3 + cell2bi + colore3 + cell3bi + inizioriga2;

      partial_rtf_text += "\\b \\qc INDICE DI COPERTURA \\b0 \\line patr. netto + deb.m/l / tot. immobilizz. \\b0\\cell";
      partial_rtf_text += "\\b \\qc " + ((nodenodo["txtEA_6"].ToString() == "") ? "" : nodenodo["txtEA_6"].ToString()) + " \\b0\\cell";
      partial_rtf_text += "\\b \\qc " + ((nodenodo["txtEP_6"].ToString() == "") ? "" : nodenodo["txtEP_6"].ToString()) + " \\b0\\cell";

      partial_rtf_text += finerigaTP;

      partial_rtf_text += "\\line\\pard\\bgdkdcross\\cfpat1\\shading59110\\tx2291\\par";

      #endregion

      partial_rtf_text += "\\line\\pard\\keepn\\b\\f0 " + "INDICI DI REDDITIVITA'" + ":\\b0 \\line \\par\n";

      #region INDICI DI REDDITIVITA'

      partial_rtf_text += "\\pard\\keep";

      partial_rtf_text += iniziorigaTP + "\n" + colore2 + cell1bi + colore2 + cell2bi + colore2 + cell3bi + inizioriga2;

      partial_rtf_text += "\\b \\qc  \\b0\\cell";
      partial_rtf_text += "\\b \\qc ESERCIZIO ATTUALE \\b0\\cell";
      partial_rtf_text += "\\b \\qc ESERCIZIO PRECEDENTE \\b0\\cell";

      partial_rtf_text += finerigaTP;

      partial_rtf_text += iniziorigaTP + "\n" + colore3 + cell1bi + colore3 + cell2bi + colore3 + cell3bi + inizioriga2;

      partial_rtf_text += "\\b \\qc R.O.I. \\b0 \\line utile operativo / capitale investito \\b0\\cell";
      partial_rtf_text += "\\b \\qc " + ((nodenodo["txtEA_7"].ToString()=="") ? "" : nodenodo["txtEA_7"].ToString()) + " \\b0\\cell";
      partial_rtf_text += "\\b \\qc " + ((nodenodo["txtEP_7"].ToString()=="") ? "" : nodenodo["txtEP_7"].ToString()) + " \\b0\\cell";

      partial_rtf_text += finerigaTP;

      partial_rtf_text += iniziorigaTP + "\n" + colore3 + cell1bi + colore3 + cell2bi + colore3 + cell3bi + inizioriga2;

      partial_rtf_text += "\\b \\qc R.O.E. \\b0 \\line utile netto / patr. netto \\b0\\cell";
      partial_rtf_text += "\\b \\qc " + ((nodenodo["txtEA_8"].ToString()=="") ? "" : nodenodo["txtEA_8"].ToString()) + " \\b0\\cell";
      partial_rtf_text += "\\b \\qc " + ((nodenodo["txtEP_8"].ToString()=="") ? "" : nodenodo["txtEP_8"].ToString()) + " \\b0\\cell";

      partial_rtf_text += finerigaTP;

      partial_rtf_text += iniziorigaTP + "\n" + colore3 + cell1bi + colore3 + cell2bi + colore3 + cell3bi + inizioriga2;

      partial_rtf_text += "\\b \\qc R.O.S. \\b0 \\line utile operativo / vendite nette \\b0\\cell";
      partial_rtf_text += "\\b \\qc " + ((nodenodo["txtEA_9"].ToString()=="") ? "" : nodenodo["txtEA_9"].ToString()) + " \\b0\\cell";
      partial_rtf_text += "\\b \\qc " + ((nodenodo["txtEP_9"].ToString()=="") ? "" : nodenodo["txtEP_9"].ToString()) + " \\b0\\cell";

      partial_rtf_text += finerigaTP;

      partial_rtf_text += iniziorigaTP + "\n" + colore3 + cell1bi + colore3 + cell2bi + colore3 + cell3bi + inizioriga2;

      partial_rtf_text += "\\b \\qc INDICE TENSIONE FINANZIARIA \\b0 \\line risultato operativo / gestione fin. netta \\b0\\cell";
      partial_rtf_text += "\\b \\qc " + ((nodenodo["txtEA_10"].ToString()=="") ? "" : nodenodo["txtEA_10"].ToString()) + " \\b0\\cell";
      partial_rtf_text += "\\b \\qc " + ((nodenodo["txtEP_10"].ToString()=="") ? "" : nodenodo["txtEP_10"].ToString()) + " \\b0\\cell";

      partial_rtf_text += finerigaTP;

      partial_rtf_text += "\\line\\pard\\bgdkdcross\\cfpat1\\shading59110\\tx2291\\par";

      #endregion

      return partial_rtf_text;
    }
    #endregion

    #region Funzioni varie

    public void InsertRtf(string rtfhere)
    {
      rtf_text.Add(rtfhere);
      return;
    }

    public void SetIntestazione(string RagioneSociale, string Indirizzo, string CapitaleSociale, string REA, string Titolohere, Hashtable valueshere)
    {
      string partial_rtf_text = "\\pard\\keepn\\f0 ";

      partial_rtf_text += "\\trowd\\cellx9900 \\fs28\\qc\\b " + ((RagioneSociale != "") ? RagioneSociale : "Dato Mancante: Compilare Carta di Lavoro 2.1.1") + " \\b0\\fs24\\cell\\row";
      partial_rtf_text += "\\trowd\\cellx9900 \\qc " + ((Indirizzo != "") ? Indirizzo : "") + " \\cell\\row";
      partial_rtf_text += "\\trowd\\cellx9900 \\qc " + ((CapitaleSociale != "" && !CapitaleSociale.Contains("Dato Mancante")) ? CapitaleSociale : " \\fs28 \\b Dato Mancante: Compilare Carta di Lavoro 2.1.5 \\b0 \\fs24 ") + " \\cell\\row";
      partial_rtf_text += "\\trowd\\clbrdrb\\brdrw10\\brdrs\\cellx9900 \\qc " + ((REA != "") ? REA : "") + " \\cell\\row";

      partial_rtf_text += "\\par\n";

      string composizione = "";
      if (valueshere.Contains("Composizione"))
      {
        switch ((App.TipoIncaricoComposizione)(Convert.ToInt32(valueshere["Composizione"].ToString())))
        {
          case App.TipoIncaricoComposizione.CollegioSindacale:
            composizione += "COLLEGIO SINDACALE";
            break;
          case App.TipoIncaricoComposizione.Revisore:
            composizione += "REVISORE";
            break;
          case App.TipoIncaricoComposizione.SindacoUnico:
            composizione += "SINDACO UNICO";
            break;
          default:
            break;
        }
      }

      partial_rtf_text += "\\pard\\keepn\\f0 ";

      partial_rtf_text += "\\trowd\\cellx9900 \\fs26\\qc\\b " + Titolohere + composizione + " \\line\\b0\\fs24\\cell\\row";
      if (valueshere.Contains("PeriodoPianificato"))
      {
        partial_rtf_text += "\\trowd\\cellx9900 \\ql \\i Sessione rientrante nel periodo pianificato: \\i0 " + ((valueshere["PeriodoPianificato"] != null) ? valueshere["PeriodoPianificato"].ToString() : "") + " \\line\\cell\\row";
      }

      if (valueshere.Contains("Data"))
      {
        partial_rtf_text += "\\trowd\\cellx9900 \\ql \\i Data di competenza: \\i0 " + ((valueshere["Data"] != null) ? valueshere["Data"].ToString() : "") + " \\line\\cell\\row";
      }

      if (valueshere.Contains("DataEsecuzione") && valueshere.Contains("Inizio"))
      {
        partial_rtf_text += "\\trowd\\cellx9900 \\ql \\i Inizio svolgimento della sessione: \\i0 " + ((valueshere["DataEsecuzione"] != null) ? valueshere["DataEsecuzione"].ToString() : "") + " alle ore " + valueshere["Inizio"].ToString() + " \\line\\cell\\row";
      }

      if (valueshere.Contains("DataEsecuzione_Fine") && valueshere.Contains("Fine"))
      {
        partial_rtf_text += "\\trowd\\cellx9900 \\ql \\i Termine della sessione: \\i0 " + ((valueshere["DataEsecuzione_Fine"] != null) ? valueshere["DataEsecuzione_Fine"].ToString() : "") + " alle ore " + valueshere["Fine"].ToString() + " \\line\\cell\\row";
      }

      if (valueshere.Contains("DataOggetto_Inizio") && valueshere.Contains("DataOggetto_Fine"))
      {
        partial_rtf_text += "\\trowd\\cellx9900 \\ql \\i Periodo oggetto di verifica: \\i0 " + ((valueshere["DataOggetto_Inizio"] != null) ? valueshere["DataOggetto_Inizio"].ToString() : "") + " - " + ((valueshere["DataOggetto_Fine"] != null) ? valueshere["DataOggetto_Fine"].ToString() : "") + " \\line\\cell\\row";
      }

      //partial_rtf_text += "\\trowd\\cellx9900 \\ql \\i Data di svolgimento della sessione: \\i0 " + ( ( valueshere["Data"] != null ) ? valueshere["Data"].ToString() : "" ) + " \\line\\cell\\row";
      //partial_rtf_text += "\\trowd\\cellx9900 \\ql \\i Orario di inizio sessione: \\i0 " + ( ( valueshere["Inizio"] != null ) ? valueshere["Inizio"].ToString() : "" ) + " \\line\\cell\\row";
      partial_rtf_text += "\\trowd\\cellx9900 \\ql \\i Luogo di svolgimento dell'attività: \\i0 " + ((valueshere["Luogo"] != null) ? valueshere["Luogo"].ToString() : "") + " \\line\\cell\\row";
      partial_rtf_text += "\\trowd\\cellx9900 \\ql \\i Membri dell'Organo di controllo presenti: \\i0  \\cell\\row";

      if (valueshere.Contains("Composizione") && valueshere["Composizione"].ToString() == "0")
      {
        if (valueshere.Contains("Presidente") && valueshere["Presidente"].ToString() != "")
        {
          partial_rtf_text += "\\trowd\\cellx300\\cellx9900 - \\cell \\ql " + valueshere["Presidente"].ToString() + " \\cell\\row";
        }

        if (valueshere.Contains("Sindaco1") && valueshere["Sindaco1"].ToString() != "")
        {
          partial_rtf_text += "\\trowd\\cellx300\\cellx9900 - \\cell \\ql " + valueshere["Sindaco1"].ToString() + " \\cell\\row";
        }

        if (valueshere.Contains("Sindaco2") && valueshere["Sindaco2"].ToString() != "")
        {
          partial_rtf_text += "\\trowd\\cellx300\\cellx9900 - \\cell \\ql " + valueshere["Sindaco2"].ToString() + " \\cell\\row";
        }
      }
      else
      {
        if (valueshere.Contains("Revisore") && valueshere["Revisore"].ToString() != "")
        {
          partial_rtf_text += "\\trowd\\cellx300\\cellx9900 - \\cell \\ql " + valueshere["Revisore"].ToString() + " \\cell\\row";
        }
      }

      if (valueshere.Contains("Collaboratore") && valueshere["Collaboratore"].ToString() != "")
      {
        partial_rtf_text += "\\trowd\\cellx9900 \\ql \\i \\line Collaboratore del revisore: \\i0  \\cell\\row";
        partial_rtf_text += "\\trowd\\cellx300\\cellx9900 - \\cell \\ql " + valueshere["Collaboratore"].ToString() + " \\cell\\row";
      }

      if (valueshere.Contains("AssisitoDa") && valueshere["AssisitoDa"].ToString() != "")
      {
        partial_rtf_text += "\\trowd\\cellx9900 \\ql \\i \\line Assiste e collabora con l'organo di controllo, per conto della società: \\i0  \\cell\\row";
        partial_rtf_text += "\\trowd\\cellx300\\cellx9900 - \\cell \\ql " + valueshere["AssisitoDa"].ToString() + " \\cell\\row";
      }

      partial_rtf_text += "\\trowd\\clbrdrb\\brdrw10\\brdrs\\cellx9900 \\qc \\cell\\row";

      partial_rtf_text += "\\par \n";

      rtf_text.Add(partial_rtf_text);
      return;
    }

    public string Convert2RTFChar(string carattere)
    {
      string newChar = "";

      switch (carattere)
      {
        //case "!":
        //    newChar = "\\'21";
        //    break;
        case "\"":
          newChar = "\\'22";
          break;
        //case "#":
        //    newChar = "\\'23";
        //    break;
        case "$":
          newChar = "\\'24";
          break;
        case "%":
          newChar = "\\'25";
          break;
        case "&":
          newChar = "\\'26";
          break;
        case "'":
          newChar = "\\'27";
          break;
        //case "(":
        //    newChar = "\\'28";
        //    break;
        //case ")":
        //    newChar = "\\'29";
        //    break;
        //case "*":
        //    newChar = "\\'2a";
        //    break;
        //case "+":
        //    newChar = "\\'2b";
        //    break;
        //case ",":
        //    newChar = "\\'2c";
        //    break;
        //case "-":
        //    newChar = "\\'2d";
        //    break;
        //case ".":
        //    newChar = "\\'2e";
        //    break;
        //case "/":
        //    newChar = "\\'2f";
        //    break;
        //case ":":
        //    newChar = "\\'3a";
        //    break;
        //case ";":
        //    newChar = "\\'3b";
        //    break;
        //case "<":
        //    newChar = "\\'3c";
        //    break;
        //case "=":
        //    newChar = "\\'3d";
        //    break;
        //case ">":
        //    newChar = "\\'3e";
        //    break;
        //case "?":
        //    newChar = "\\'3f";
        //    break;
        //case "@":
        //    newChar = "\\'40";
        //    break;
        //case "[":
        //    newChar = "\\'5b";
        //    break;
        //case "\\":
        //    newChar = "\\'5c";
        //    break;
        //case "]":
        //    newChar = "\\'5d";
        //    break;
        //case "^":
        //    newChar = "\\'5e";
        //    break;
        //case "_":
        //    newChar = "\\'5f";
        //    break;
        //case "`":
        //    newChar = "\\'60";
        //    break;
        //case "{":
        //    newChar = "\\'7b";
        //    break;
        //case "|":
        //    newChar = "\\'7c";
        //    break;
        //case "}":
        //    newChar = "\\'7d";
        //    break;
        //case "~":
        //    newChar = "\\'7e";
        //    break;
        case "€":
          newChar = "\\'80";
          break;
        //case "͵":
        //    newChar = "\\'82";
        //    break;
        //case "ƒ":
        //    newChar = "\\'83";
        //    break;
        //case ""
        //    newChar = "\\'84";
        //    break;
        case "…":
          newChar = "\\'85";
          break;
        //case "†":
        //    newChar = "\\'86";
        //case "‡":
        //    newChar = "\\'87";
        //    break;
        case "∘":
          newChar = "\\'88";
          break;
        //case "‰":
        //    newChar = "\\'89";
        //    break;
        //case "Š":
        //    newChar = "\\'8a";
        //    break;
        //case "‹":
        //    newChar = "\\'8b";
        //    break;
        //case "Œ":
        //    newChar = "\\'8c";
        //    break;
        //case "Ž":
        //    newChar = "\\'8e";
        //    break;
        //case "‘":
        //    newChar = "\\'91";
        //    break;
        case "’":
          newChar = "\\'92";
          break;
        case "“":
          newChar = "\\'93";
          break;
        case "”":
          newChar = "\\'94";
          break;
        //case "•":
        //    newChar = "\\'95";
        //    break;
        //case "–":
        //    newChar = "\\'96";
        //    break;
        //case "—":
        //    newChar = "\\'97";
        //    break;
        //case "~":
        //    newChar = "\\'98";
        //    break;
        //case "™":
        //    newChar = "\\'99";
        //    break;
        //case "š":
        //    newChar = "\\'9a";
        //    break;
        //case "›":
        //    newChar = "\\'9b";
        //    break;
        //case "œ":
        //    newChar = "\\'9c";
        //    break;
        //case "ž":
        //    newChar = "\\'9e";
        //    break;
        //case "Ÿ":
        //    newChar = "\\'9f";
        //    break;
        //case "¡":
        //    newChar = "\\'a1";
        //    break;
        //case "¢":
        //    newChar = "\\'a2";
        //    break;
        //case "£":
        //    newChar = "\\'a3";
        //    break;
        //case "¤":
        //    newChar = "\\'a4";
        //    break;
        //case "¥":
        //    newChar = "\\'a5";
        //    break;
        //case "¦":
        //    newChar = "\\'a6";
        //    break;
        //case "§":
        //    newChar = "\\'a7";
        //    break;
        //case "¨":
        //    newChar = "\\'a8";
        //    break;
        case "©":
          newChar = "\\'a9";
          break;
        //case "ª":
        //    newChar = "\\'aa";
        //    break;
        //case "«":
        //    newChar = "\\'ab";
        //    break;
        //case "¬":
        //    newChar = "\\'ac";
        //    break;
        //case "®":
        //    newChar = "\\'ae";
        //    break;
        //case "¯":
        //    newChar = "\\'af";
        //    break;
        case "°":
          newChar = "\\'b0";
          break;
        case "±":
          newChar = "\\'b1";
          break;
        case "²":
          newChar = "\\'b2";
          break;
        case "³":
          newChar = "\\'b3";
          break;
        //case "´":
        //    newChar = "\\'b4";
        //    break;
        case "µ":
          newChar = "\\'b5";
          break;
        //case "¶":
        //    newChar = "\\'b6";
        //    break;
        //case "•":
        //  newChar = "\\'b7";
        //break;
        //case "¸":
        //    newChar = "\\'b8";
        //    break;
        //case "¹":
        //    newChar = "\\'b9";
        //    break;
        //case "º":
        //    newChar = "\\'ba";
        //    break;
        //case "»":
        //    newChar = "\\'bb";
        //    break;
        //case "¼":
        //    newChar = "\\'bc";
        //    break;
        //case "½":
        //    newChar = "\\'bd";
        //    break;
        //case "¾":
        //    newChar = "\\'be";
        //    break;
        //case "¿":
        //    newChar = "\\'bf";
        //    break;
        case "À":
          newChar = "\\'c0";
          break;
        case "Á":
          newChar = "\\'c1";
          break;
        case "Â":
          newChar = "\\'c2";
          break;
        case "Ã":
          newChar = "\\'c3";
          break;
        case "Ä":
          newChar = "\\'c4";
          break;
        case "Å":
          newChar = "\\'c5";
          break;
        case "Æ":
          newChar = "\\'c6";
          break;
        case "Ç":
          newChar = "\\'c7";
          break;
        case "È":
          newChar = "\\'c8";
          break;
        case "É":
          newChar = "\\'c9";
          break;
        case "Ê":
          newChar = "\\'ca";
          break;
        case "Ë":
          newChar = "\\'cb";
          break;
        case "Ì":
          newChar = "\\'cc";
          break;
        case "Í":
          newChar = "\\'cd";
          break;
        case "Î":
          newChar = "\\'ce";
          break;
        case "Ï":
          newChar = "\\'cf";
          break;
        case "Ð":
          newChar = "\\'d0";
          break;
        case "Ñ":
          newChar = "\\'d1";
          break;
        case "Ò":
          newChar = "\\'d2";
          break;
        case "Ó":
          newChar = "\\'d3";
          break;
        case "Ô":
          newChar = "\\'d4";
          break;
        case "Õ":
          newChar = "\\'d5";
          break;
        case "Ö":
          newChar = "\\'d6";
          break;
        //case "×":
        //    newChar = "\\'d7";
        //    break;
        case "Ø":
          newChar = "\\'d8";
          break;
        case "Ù":
          newChar = "\\'d9";
          break;
        case "Ú":
          newChar = "\\'da";
          break;
        case "Û":
          newChar = "\\'db";
          break;
        case "Ü":
          newChar = "\\'dc";
          break;
        case "Ý":
          newChar = "\\'dd";
          break;
        case "Þ":
          newChar = "\\'de";
          break;
        case "ß":
          newChar = "\\'df";
          break;
        case "à":
          newChar = "\\'e0";
          break;
        case "á":
          newChar = "\\'e1";
          break;
        case "â":
          newChar = "\\'e2";
          break;
        case "ã":
          newChar = "\\'e3";
          break;
        case "ä":
          newChar = "\\'e4";
          break;
        case "å":
          newChar = "\\'e5";
          break;
        case "æ":
          newChar = "\\'e6";
          break;
        case "ç":
          newChar = "\\'e7";
          break;
        case "è":
          newChar = "\\'e8";
          break;
        case "é":
          newChar = "\\'e9";
          break;
        case "ê":
          newChar = "\\'ea";
          break;
        case "ë":
          newChar = "\\'eb";
          break;
        case "ì":
          newChar = "\\'ec";
          break;
        case "í":
          newChar = "\\'ed";
          break;
        case "î":
          newChar = "\\'ee";
          break;
        case "ï":
          newChar = "\\'ef";
          break;
        case "ð":
          newChar = "\\'f0";
          break;
        case "ñ":
          newChar = "\\'f1";
          break;
        case "ò":
          newChar = "\\'f2";
          break;
        case "ó":
          newChar = "\\'f3";
          break;
        case "ô":
          newChar = "\\'f4";
          break;
        case "õ":
          newChar = "\\'f5";
          break;
        case "ö":
          newChar = "\\'f6";
          break;
        case "÷":
          newChar = "\\'f7";
          break;
        case "ø":
          newChar = "\\'f8";
          break;
        case "ù":
          newChar = "\\'f9";
          break;
        case "ú":
          newChar = "\\'fa";
          break;
        case "û":
          newChar = "\\'fb";
          break;
        case "ü":
          newChar = "\\'fc";
          break;
        case "ý":
          newChar = "\\'fd";
          break;
        case "þ":
          newChar = "\\'fe";
          break;
        case "ÿ":
          newChar = "\\'ff";
          break;
      }

      return newChar;
    }

    public string Convert2RTFString(string buff, string replaceChar)
    {
      return buff.Replace(replaceChar, Convert2RTFChar(replaceChar));
    }

    private string Convert2RTF(string buff)
    {
      buff = buff.Replace("\\'", "\\#");
      buff = Convert2RTFString(buff, "'"); //va messo per primo o causa problemi
      buff = buff.Replace("\\#", "\\'");

      //for (char c = '!'; c <= 'ÿ'; c++)
      //{
      //    buff = Convert2RTFString(buff, c.ToString() );
      //}

      buff = Convert2RTFString(buff, "%");
      buff = Convert2RTFString(buff, "ì");
      buff = Convert2RTFString(buff, "è");
      buff = Convert2RTFString(buff, "é");
      buff = Convert2RTFString(buff, "ò");
      buff = Convert2RTFString(buff, "à");
      buff = Convert2RTFString(buff, "ù");
      buff = Convert2RTFString(buff, "°");
      buff = Convert2RTFString(buff, "€");
      buff = Convert2RTFString(buff, "\"");
      buff = Convert2RTFString(buff, "’");
      buff = Convert2RTFString(buff, "”");
      buff = Convert2RTFString(buff, "“");

      buff = Convert2RTFString(buff, "Ù");
      buff = Convert2RTFString(buff, "Ú");
      buff = Convert2RTFString(buff, "Ò");
      buff = Convert2RTFString(buff, "Ó");
      buff = Convert2RTFString(buff, "Í");
      buff = Convert2RTFString(buff, "Ì");
      buff = Convert2RTFString(buff, "É");
      buff = Convert2RTFString(buff, "È");
      buff = Convert2RTFString(buff, "Á");
      buff = Convert2RTFString(buff, "À");

      return buff;
    }

    //public string ReplaceXml(string valore)
    //{
    //    string returnvalue = valore;

    //    returnvalue = returnvalue.Replace( " ", "" ).Replace( "'", "" ).Replace( "<", "" ).Replace( "/", "" ).Replace( "\\", "" ).Replace( ">", "" ).Replace( "\"", "" ).Replace( "&", "" ).Replace( ":", "" );

    //    return returnvalue;
    //}

    public void LastParagraph(Hashtable dati)
    {
      rtf_text.Add(" \\line \\line \\fs24");

      string riga = "";

      //if (dati.Contains("Fine"))
      //{
      //	riga += "Il giorno " + ((dati["DataEsecuzione_Fine"] != null)? dati["DataEsecuzione_Fine"].ToString() : ((dati["DataEsecuzione"] != null) ? dati["DataEsecuzione"].ToString() : "")) + " alle ore " + dati["Fine"].ToString() + " ";
      //}

      riga += "La verifica viene conclusa con stesura e sottoscrizione del presente verbale." + " \\line ";

      if (dati.Contains("Composizione") && dati["Composizione"].ToString() == "0")
      {
        if (dati.Contains("Presidente") && dati["Presidente"].ToString() != "")
        {
          riga += " \\line \\line \\line  " + dati["Presidente"].ToString() + " \\line ";
        }

        if (dati.Contains("Sindaco1") && dati["Sindaco1"].ToString() != "")
        {
          riga += " \\line \\line \\line  " + dati["Sindaco1"].ToString() + " \\line ";
        }

        if (dati.Contains("Sindaco2") && dati["Sindaco2"].ToString() != "")
        {
          riga += " \\line \\line \\line  " + dati["Sindaco2"].ToString() + " \\line ";
        }
      }
      else
      {
        if (dati.Contains("Revisore") && dati["Revisore"].ToString() != "")
        {
          riga += " \\line \\line \\line  " + dati["Revisore"].ToString() + " \\line ";
        }
      }

      rtf_text.Add("\\pard\\keepn\\f0 \\ql " + riga + " \\par\n");
    }

    //----------------------------------------------------------------------------+
    //                                    Save                                    |
    //----------------------------------------------------------------------------+
    public void Save(string intestazione)
    {
      int inizio = template_text.IndexOf("@DL@");
      if (inizio == -1)
      {
        MessageBox.Show("template non valido");
        return;
      }


      string fileNameCompleto = "";
      string estensione = "";
      string titoloFile = ""; // nome completo file SENZA estensione
      string toDelete = ""; // file RTF da cancellare



      if (StampaLetteraIncarico)
      {
        rtf_text.Add("\\line\\pard\\keepn\\f0 \\ql \\fs24 " + "Luogo e data" + " \\par\n");
        rtf_text.Add("\\line\\line\\pard\\keepn\\f0 \\ql \\fs24 " + "Firme (il revisore)" + " \\par\n");
        rtf_text.Add("\\line\\line\\pard\\keepn\\f0 \\ql \\fs24 " + "Per accettazione (la società)" + " \\par\n");
      }

      if (StampaLetteraAttestazione)
      {
        rtf_text.Add("\\line\\pard\\keepn\\f0 \\ql \\fs24 " + "Data" + " \\par\n");
        rtf_text.Add("\\line\\line\\pard\\keepn\\f0 \\ql \\fs24 " + "Firma dell’organo amministrativo della società" + " \\par\n");
      }

      if (StampaManagementLetter)
      {
        rtf_text.Add("\\line\\pard\\keepn\\f0 \\ql \\fs24 " + "Data" + " \\par\n");
        rtf_text.Add("\\line\\line\\pard\\keepn\\f0 \\ql \\fs24 " + "Firma" + " \\par\n");
      }

      rtf_text.Add(template_text.Substring(inizio + 4, template_text.Length - (inizio + 4)));

      for (int i = 0; i < rtf_text.Count; i++)
      {
        rtf_text[i] = (rtf_text[i]).Replace("Arial;", "Cambria;");
      }

      if (StampaRelazioneGenerica || StampaLetteraIncarico
        || StampaLetteraAttestazione || StampaManagementLetter
        || StampaCodiceEtico)
      {
        if (StampaRelazioneGenerica)
        {
          for (int i = 0; i < rtf_text.Count; i++)
          {
            rtf_text[i] = (rtf_text[i]).Replace("\\fs16", "\\fs24").Replace("\\fs18", "\\fs24").Replace("\\fs20", "\\fs24").Replace("\\fs22", "\\fs24");
          }
        }

        for (int i = 0; i < rtf_text.Count; i++)
        {
          rtf_text[i] = (rtf_text[i]).Replace("{\\f0 \\li0\\ri0\\sa0\\sb0\\fi0\\ql\\par}", "");
          rtf_text[i] = (rtf_text[i]).Replace("{\\f0 {\\ltrch }\\li0\\ri0\\sa0\\sb0\\fi0\\ql\\par}", "");
          rtf_text[i] = (rtf_text[i]).Replace("{\\fs24\\f3 \\li0\\ri0\\sa0\\sb0\\fi0\\ql\\par}", "");
        }
      }

      for (int i = 0; i < rtf_text.Count; i++)
      {
        rtf_text[i] = (rtf_text[i]).Replace("\\fsx16", "\\fs16").Replace("\\fsx18", "\\fs18").Replace("\\fsx20", "\\fs20").Replace("\\fsx22", "\\fs22");

        //andrea: trascodifica caratteri estesi
        rtf_text[i] = Convert2RTF(rtf_text[i]);
      }

      string rtfcomplete = "";

      for (int i = 0; i < rtf_text.Count; i++)
      {
        rtfcomplete += rtf_text[i];
      }

      if (StampaTemporanea)
      {
        //fileNameCompleto = filename + ".rtf";
        estensione = ".rtf"; titoloFile = filename;
        fileNameCompleto = titoloFile + estensione;
      }
      else
      {
        // scelta cartella di destinazione

        System.Windows.Forms.FolderBrowserDialog fd = new System.Windows.Forms.FolderBrowserDialog();
        if (Docsettings.defaultpath != "")
          fd.SelectedPath = Docsettings.defaultpath;
        fd.ShowDialog();

        if (fd.SelectedPath != "")
        {
          Docsettings.defaultpath = fd.SelectedPath;

          //fileNameCompleto = fd.SelectedPath + "\\DocumentoRevisoft_" + _Cliente + "_" + DateTime.Now.Year.ToString() + DateTime.Now.Month.ToString().PadLeft(2, '0') + DateTime.Now.Day.ToString().PadLeft(2, '0') + ".doc";
          //estensione = ".doc";
          titoloFile = fd.SelectedPath + "\\DocumentoRevisoft_"
            + _Cliente + "_" + DateTime.Now.Year.ToString()
            + DateTime.Now.Month.ToString().PadLeft(2, '0')
            + DateTime.Now.Day.ToString().PadLeft(2, '0');
          //fileNameCompleto = titoloFile + estensione;
          FileInfo fitmpDoc = new FileInfo(titoloFile + ".docx");
          FileInfo fitmpRtf = new FileInfo(titoloFile + ".rtf");
          int index = 0;

          while (fitmpDoc.Exists || fitmpRtf.Exists)
          {
            index++;
            //fileNameCompleto = fd.SelectedPath + "\\DocumentoRevisoft_" + _Cliente + "_" + DateTime.Now.Year.ToString() + DateTime.Now.Month.ToString().PadLeft(2, '0') + DateTime.Now.Day.ToString().PadLeft(2, '0') + "(" + index.ToString() + ").doc";
            titoloFile = fd.SelectedPath + "\\DocumentoRevisoft_"
              + _Cliente + "_" + DateTime.Now.Year.ToString()
              + DateTime.Now.Month.ToString().PadLeft(2, '0')
              + DateTime.Now.Day.ToString().PadLeft(2, '0') + "(" + index.ToString() + ")";
            //fileNameCompleto = titoloFile + estensione;
            fitmpDoc = new FileInfo(titoloFile + ".docx");
            fitmpRtf = new FileInfo(titoloFile + ".rtf");
          }
          // ora è sicuro che non esistono né titoloFile.doc né titoloFile.rtf
        }
        else
        {

          return;
        }
      }
      if (titoloFile == "")
      {

        return;
      }

      //TextWriter tw = new StreamWriter(filename + ".rtf");
      estensione = ".rtf"; fileNameCompleto = titoloFile + estensione;
      TextWriter tw = new StreamWriter(fileNameCompleto);
      tw.Write(rtfcomplete);
      tw.Close();

      bool saved = false;

      if (useWord)
      {



        Object oMissing = System.Reflection.Missing.Value;
        Object oFalse = false;

        cDocNet wrdDoc = new cDocNet();


        //wrdDoc = wrdApp.Documents.Open(filename + ".rtf");
        estensione = ".rtf"; fileNameCompleto = titoloFile + estensione;

        //sillabazione
        wrdDoc.AutoHyphenation = true;

       
          wrdDoc.PageSetupLeftMargin = wrdDoc.CentimetersToPoints(Convert.ToSingle(-1));
          wrdDoc.PageSetupRightMargin = wrdDoc.CentimetersToPoints(Convert.ToSingle(-1));

        if (StampaRelazioneGenerica || StampaLetteraIncarico
          || StampaLetteraAttestazione || StampaManagementLetter
          || StampaCodiceEtico)
        {
          //margini

          wrdDoc.PageSetupLeftMargin = wrdDoc.CentimetersToPoints(Convert.ToSingle(3));
          wrdDoc.PageSetupRightMargin = wrdDoc.CentimetersToPoints(Convert.ToSingle(2.2));

          //wrdDoc.Content.Select();
          //wrdDoc.ActiveWindow.Selection.ParagraphFormat.LineSpacingRule = WdLineSpacing.wdLineSpaceSingle;
          //wrdDoc.ActiveWindow.Selection.ParagraphFormat.SpaceAfter = 0.0F;
        }
       
        //----------------------------------------------------------------------------+
        //       EB - modifiche per eliminare RTF dopo generazione DOC - inizio       |
        //----------------------------------------------------------------------------+
        toDelete = "";

        if (StampaLetteraIncarico)
        {
          //fileNameCompleto = fileNameCompleto.Replace("DocumentoRevisoft_", "LetteraDiIncarico_");
          toDelete = titoloFile;
          titoloFile = titoloFile.Replace("DocumentoRevisoft_", "LetteraDiIncarico_");
        }

        if (StampaCodiceEtico)
        {
          //fileNameCompleto = fileNameCompleto.Replace("DocumentoRevisoft_", "CodiceEtico_");
          toDelete = titoloFile;
          titoloFile = titoloFile.Replace("DocumentoRevisoft_", "CodiceEtico_");
        }

        if (StampaLetteraAttestazione)
        {
          //fileNameCompleto = fileNameCompleto.Replace("DocumentoRevisoft_", "LetteraDiAttestazione_");
          toDelete = titoloFile;
          titoloFile = titoloFile.Replace("DocumentoRevisoft_", "LetteraDiAttestazione_");
        }

        if (StampaManagementLetter)
        {
          //fileNameCompleto = fileNameCompleto.Replace("DocumentoRevisoft_", "ManagementLetter_");
          toDelete = titoloFile;
          titoloFile = titoloFile.Replace("DocumentoRevisoft_", "ManagementLetter_");
        }

        if (toDelete == "") toDelete = titoloFile;
        //----------------------------------------------------------------------------+
        //        EB - modifiche per eliminare RTF dopo generazione DOC - fine        |
        //----------------------------------------------------------------------------+

        //if (fileNameCompleto != "")
        if (titoloFile != "")
        {
          estensione = ".docx"; //MM fileNameCompleto = titoloFile + estensione;
          wrdDoc.PageSetupPaperSize = "A4"; //MM WdPaperSize.wdPaperA4;
          wrdDoc.SaveAs(titoloFile + estensione, fileNameCompleto, "");
          saved = true;
        }


      }
      else
      {
        //sillabazione
        if (StampaRelazioneGenerica || StampaLetteraIncarico
          || StampaLetteraAttestazione || StampaManagementLetter
          || StampaCodiceEtico)
        {
          //margini
          //wrdDoc.PageSetup.LeftMargin = wrdApp.CentimetersToPoints(Convert.ToSingle(3));
          //wrdDoc.PageSetup.RightMargin = wrdApp.CentimetersToPoints(Convert.ToSingle(2.2));
        }

        if (StampaTemporanea)
        {
          estensione = ".rtf"; titoloFile = filename;
          fileNameCompleto = titoloFile + estensione;
          //fileNameCompleto = filename + ".rtf";
        }
        else
        {
          System.Windows.Forms.FolderBrowserDialog fd = new System.Windows.Forms.FolderBrowserDialog();
          if (Docsettings.defaultpath != "")
            fd.SelectedPath = Docsettings.defaultpath;
          fd.ShowDialog();

          // apertura ProgressWindow

          // generazione nome file completo
          if (fd.SelectedPath != "")
          {
            Docsettings.defaultpath = fd.SelectedPath;
            //fileNameCompleto = fd.SelectedPath + "\\DocumentoRevisoft_"
            //  + _Cliente + "_" + DateTime.Now.Year.ToString()
            //  + DateTime.Now.Month.ToString().PadLeft(2, '0')
            //  + DateTime.Now.Day.ToString().PadLeft(2, '0') + ".doc";
            estensione = ".docx";
            titoloFile = fd.SelectedPath + "\\DocumentoRevisoft_"
              + _Cliente + "_" + DateTime.Now.Year.ToString()
              + DateTime.Now.Month.ToString().PadLeft(2, '0')
              + DateTime.Now.Day.ToString().PadLeft(2, '0');
            fileNameCompleto = titoloFile + estensione;
            FileInfo fitmp = new FileInfo(fileNameCompleto);
            int index = 0;
            while (fitmp.Exists)
            {
              index++;
              //fileNameCompleto = fd.SelectedPath + "\\DocumentoRevisoft_" + _Cliente + "_" + DateTime.Now.Year.ToString() + DateTime.Now.Month.ToString().PadLeft(2, '0') + DateTime.Now.Day.ToString().PadLeft(2, '0') + "(" + index.ToString() + ").doc";
              titoloFile = fd.SelectedPath + "\\DocumentoRevisoft_"
                + _Cliente + "_" + DateTime.Now.Year.ToString()
                + DateTime.Now.Month.ToString().PadLeft(2, '0')
                + DateTime.Now.Day.ToString().PadLeft(2, '0') + "(" + index.ToString() + ")";
              fileNameCompleto = titoloFile + estensione;
              fitmp = new FileInfo(fileNameCompleto);
            }
          }
        }

        if (StampaLetteraIncarico)
        {
          //fileNameCompleto = fileNameCompleto.Replace("DocumentoRevisoft_", "LetteraDiIncarico_");
          titoloFile = titoloFile.Replace("DocumentoRevisoft_", "LetteraDiIncarico_");
        }

        if (StampaCodiceEtico)
        {
          //fileNameCompleto = fileNameCompleto.Replace("DocumentoRevisoft_", "CodiceEtico_");
          titoloFile = titoloFile.Replace("DocumentoRevisoft_", "CodiceEtico_");
        }

        if (StampaLetteraAttestazione)
        {
          //fileNameCompleto = fileNameCompleto.Replace("DocumentoRevisoft_", "LetteraDiAttestazione_");
          titoloFile = titoloFile.Replace("DocumentoRevisoft_", "LetteraDiAttestazione_");
        }

        if (StampaManagementLetter)
        {
          //fileNameCompleto = fileNameCompleto.Replace("DocumentoRevisoft_", "ManagementLetter_");
          titoloFile = titoloFile.Replace("DocumentoRevisoft_", "ManagementLetter_");
        }

        //if (fileNameCompleto != "")
        if (titoloFile != "")
        {
          //wrdDoc.PageSetup.PaperSize = WdPaperSize.wdPaperA4;
          //wrdDoc.SaveAs(fileNameCompleto);

          //fileNameCompleto = fileNameCompleto.Replace(".doc", ".docx").Replace(".rtf", ".docx");
          //ConvertRtfToDocx(filename + ".rtf", fileNameCompleto);
          estensione = ".docx"; fileNameCompleto = titoloFile + estensione;
          ConvertRtfToDocx(titoloFile + ".rtf", fileNameCompleto);
          saved = true;
        }
      }
      if (!StampaTemporanea && toDelete != "")
      {
        //FileInfo fi = new FileInfo(filename + ".rtf");
        //fi.Delete();
        FileInfo fi = new FileInfo(toDelete + ".rtf");
        if (fi.Exists) fi.Delete();
      }

      if (saved)
      {
        fileNameCompleto = titoloFile + estensione;
        //MM
        // System.Diagnostics.Process.Start(fileNameCompleto);
        System.Diagnostics.Process.Start(new System.Diagnostics.ProcessStartInfo(fileNameCompleto) { UseShellExecute = true });

      }
    }

    //----------------------------------------------------------------------------+
    //                                  SavePDF                                   |
    //----------------------------------------------------------------------------+
    public void SavePDF(string intestazione, System.Windows.Window _Owner)
    {
      #region oldSavePDF
      /*
      ProgressWindow pw = null;
      bool printingword = !Properties.Settings.Default.UseWord; //Se uso word come metodo di generazione della stampa di default stampo in pdf

      // scelta tra PDF (1) o Word (0)
      if (Properties.Settings.Default.UseWord)
      { 
          wSchedaSceltaWordPDF swf = new wSchedaSceltaWordPDF();
          swf.Owner = _Owner; // System.Windows.Application.Current.MainWindow;
          swf.ShowDialog();
          switch (swf.selectedprint)
          {
            case 0: // Word
              printingword = true;
              break;
            case 1: // PDF
            default:
              break;
          }

      }

      int inizio = template_text.IndexOf("@DL@");
      if (inizio == -1) return; // template corrotto

      pw = new ProgressWindow(); // inizio elaborazione --> ProgressWindow ON

      for (int i = 0; i < rtf_text.Count; i++)
      {
          if (rtf_text[i].Length > ("\\page").Length
            && rtf_text[i].Substring(rtf_text[i].Length - ("\\page").Length - 1, ("\\page").Length) == "\\page")
          {
              rtf_text[i] = rtf_text[i].Substring(0, rtf_text[i].Length - ("\\page").Length - 1);
          }
      }

      string wVersione2 = "-1";

      if (useWord)
      {
        // istanza applicazione Word
        try
        {
          Microsoft.Office.Interop.Word.Application wrdApp2 = new Microsoft.Office.Interop.Word.Application();
          wVersione2 = wrdApp2.Application.Version.ToString().Substring(0, 2);
          Object oMissing2 = System.Reflection.Missing.Value;
          wrdApp2.Quit(ref oMissing2, ref oMissing2, ref oMissing2);
        }
        catch (Exception ex)
        {
          //ATTENZIONE OFFICE 365 NON RITORNA LA VERSIONE
          string log = ex.Message;
        }

        for (int i = 0; i < rtf_text.Count; i++)
        {
          // creazione indici se supportati
          if (Convert.ToInt32(wVersione2) >= 14)
          {
              rtf_text[i] = rtf_text[i].Replace("(##TOC##)", rtf_text_TOC + " \\page ");
          }
          else
          {
              rtf_text[i] = rtf_text[i].Replace("(##TOC##)", "");
          }

          while (rtf_text[i].IndexOf("{\\f0\\fcharset0") != -1)
          {
            rtf_text[i] = rtf_text[i].Replace(
              rtf_text[i].Substring(
                rtf_text[i].IndexOf("{\\f0\\fcharset0"),
                rtf_text[i].IndexOf("}",rtf_text[i].IndexOf("{\\f0\\fcharset0"))
                - rtf_text[i].IndexOf("{\\f0\\fcharset0") + 1), "");
          }
        }
      }
      else
      {
        for (int i = 0; i < rtf_text.Count; i++)
        {
          rtf_text[i] = rtf_text[i].Replace("(##TOC##)", rtf_text_TOC + " \\page ");

          while (rtf_text[i].IndexOf("{\\f0\\fcharset0") != -1)
          {
              rtf_text[i] = rtf_text[i].Replace(
                rtf_text[i].Substring(
                  rtf_text[i].IndexOf("{\\f0\\fcharset0"),
                    rtf_text[i].IndexOf("}", rtf_text[i].IndexOf("{\\f0\\fcharset0"))
                      - rtf_text[i].IndexOf("{\\f0\\fcharset0") + 1), "");
          }
        }
      }

      rtf_text.Add(template_text.Substring(inizio + 4, template_text.Length - (inizio + 4)));

      for (int i = 0; i < rtf_text.Count; i++)
      {
        rtf_text[i] = rtf_text[i].Replace("Arial;", "Cambria;");

        //andrea: trascodifica caratteri estesi
        rtf_text[i] = Convert2RTF(rtf_text[i]);
      }

      // generazione nome nuovo file
      FileInfo fiv = new FileInfo(filename + ".rtf");
      while (fiv.Exists)
      {
          filename = filename + "1";
          fiv = new FileInfo(filename + ".rtf");
      }

      // costruzione dati Rich Text Format
      string rtfcomplete = "";
      for (int i = 0; i < rtf_text.Count; i++) rtfcomplete += rtf_text[i];

      // scrittura su file dei dati Rich Text Format
      TextWriter tw = new StreamWriter(filename + ".rtf");
			tw.Write(rtfcomplete);
			tw.Close();

      if (useWord)
      {
        // apertura file RTF e aggiornamento indici
        Microsoft.Office.Interop.Word.Application wrdApp;
        _Document wrdDoc;
        Object oFalse = false;
        wrdApp = new Microsoft.Office.Interop.Word.Application();
        wrdApp.Visible = false;
        wrdDoc = wrdApp.Documents.Open(filename + ".rtf");
        for (int i = 0; i < counterFieldindex; i++) wrdDoc.Fields.Update();

        if (Watermark && !StampaRelazioneGenerica && !StampaLetteraIncarico
          && !StampaLetteraAttestazione && !StampaManagementLetter
          && !StampaCodiceEtico)
        {
          // stampa fascicolo
          if (Fascicolo)
          {
            //andrea
            string wVersione = "-1";
            // ulteriore istanza di documento Word (wrdApp2)
            try
            {
              Microsoft.Office.Interop.Word.Application wrdApp2 = new Microsoft.Office.Interop.Word.Application();
              wVersione = wrdApp2.Application.Version.ToString().Substring(0, 2);
              Object oMissing2 = System.Reflection.Missing.Value;
              wrdApp2.Quit(ref oMissing2, ref oMissing2, ref oMissing2);
            }
            catch (Exception ex)
            {
              //ATTENZIONE OFFICE 365 NON RITORNA LA VERSIONE
              string log = ex.Message;
            }
            //string wVersione = wrdApp.Application.Version.ToString().Substring(0,2);

            // elaborazione headers e indice se supportati
            if (Convert.ToInt32(wVersione) >= 14)
            {
              foreach (string item in TitoliInHeader)
              {
                object typeMissing = System.Reflection.Missing.Value;
                object texttofind = item;
                try
                {
                  wrdApp.ActiveDocument.Select();
                  bool resultfind = wrdApp.Selection.Find.Execute(
                    ref texttofind, ref typeMissing, ref typeMissing,
                    ref typeMissing, ref typeMissing, ref typeMissing,
                    ref typeMissing, ref typeMissing, ref typeMissing,
                    ref typeMissing, ref typeMissing, ref typeMissing,
                    ref typeMissing, ref typeMissing, ref typeMissing);
                  if (resultfind == false) continue;

                  if (item != "INDICE")
                  {
                    resultfind = wrdApp.Selection.Find.Execute(
                      ref texttofind, ref typeMissing, ref typeMissing,
                      ref typeMissing, ref typeMissing, ref typeMissing,
                      ref typeMissing, ref typeMissing, ref typeMissing,
                      ref typeMissing, ref typeMissing, ref typeMissing,
                      ref typeMissing, ref typeMissing, ref typeMissing);
                    if (resultfind == false) continue;
                  }

                  Microsoft.Office.Interop.Word.Range myRange = wrdApp.Selection.Range;

                  Microsoft.Office.Interop.Word.Hyperlinks myLinks = wrdDoc.Hyperlinks;
                  string test_file_Path = "#";
                  object linkAddr = test_file_Path;
                  Microsoft.Office.Interop.Word.Hyperlink myLink =
                    myLinks.Add(myRange, ref linkAddr, ref typeMissing);

                }
                catch (Exception ex)
                {
                  string log = ex.Message;
                }

              }
            }
          }

          // elaborazione footers e headers
          try
          {
            wrdApp.ActiveWindow.ActivePane.View.SeekView = WdSeekView.wdSeekMainDocument;
            wrdApp.ActiveDocument.Sections[1].Range.Select();

            GestioneLicenza gl = new GestioneLicenza();
            ////string file = gl.GeneraFileFiligrana();

            ////string nf = "";

            ////if (intestazione != "")
            ////{
            ////    Utilities u = new Utilities();
            ////    nf = App.AppTempFolder + "\\{" + Guid.NewGuid().ToString() + "}.png";
            ////    u.StringToImage(intestazione, nf);
            ////}

            ////wrdApp.ActiveWindow.ActivePane.View.SeekView = WdSeekView.wdSeekFirstPageHeader;
            ////wrdApp.Selection.HeaderFooter.Range.Text = "\r" + _Cliente + " - " + _Sessione + "\r";

            object fieldEmpty2 = WdFieldType.wdFieldEmpty;

            wrdApp.ActiveWindow.ActivePane.View.SeekView = WdSeekView.wdSeekFirstPageFooter;
            wrdApp.Selection.HeaderFooter.Range.Text =
              "\rREVISOFT® - Sindaci e Revisori - Licenziatario: "
              + gl.Intestatario + "\r"; // - Licenza numero: " + gl.CodiceMacchina.Split('-')[0] + "
            wrdApp.Selection.HeaderFooter.Range.Font.Size = 8;
            wrdApp.Selection.HeaderFooter.Range.ParagraphFormat.Alignment =
              Microsoft.Office.Interop.Word.WdParagraphAlignment.wdAlignParagraphCenter;
            wrdApp.Selection.HeaderFooter.Range.ParagraphFormat.Borders[WdBorderType.wdBorderTop].LineStyle
              = WdLineStyle.wdLineStyleSingle;

            try
            {
              wrdApp.ActiveWindow.ActivePane.View.SeekView =
                WdSeekView.wdSeekPrimaryFooter;
              Range footerRange = wrdApp.Selection.HeaderFooter.Range;
              footerRange.Text =
                "\rREVISOFT® -Sindaci e Revisori - Licenziatario: "
                + gl.Intestatario + "\tPag. "; //- Licenza numero: " + gl.CodiceMacchina.Split('-')[0] + " 
              footerRange.SetRange(footerRange.End + 1, footerRange.End + 1);
              footerRange.Fields.Add(footerRange, WdFieldType.wdFieldPage);

              wrdApp.Selection.HeaderFooter.LinkToPrevious = false;
              footerRange.Font.Size = 8;
              footerRange.ParagraphFormat.Alignment = Microsoft.Office.Interop.Word.WdParagraphAlignment.wdAlignParagraphCenter;
              footerRange.ParagraphFormat.Borders[WdBorderType.wdBorderTop].LineStyle = WdLineStyle.wdLineStyleSingle;
              //wrdApp.ActiveWindow.ActivePane.View.SeekView = WdSeekView.wdSeekPrimaryFooter;

              //Object CurrentPage = Microsoft.Office.Interop.Word.WdFieldType.wdFieldPage;

              //wrdApp.Selection.InsertBefore( .HeaderFooter..Range.Fields.Add(wrdApp.Selection.HeaderFooter.Range, ref CurrentPage, ref oMissing, ref oMissing);

              //wrdApp.ActiveWindow.ActivePane.View.SeekView = WdSeekView.wdSeekFirstPageHeader;
              //wrdApp.Selection.HeaderFooter.Range.Text = " \t\t " + _Cliente + " - CF: " + _CF + " - Esercizio " + _Sessione + "";
              //wrdApp.Selection.HeaderFooter.Range.Font.Size = 10;
              //wrdApp.Selection.HeaderFooter.Range.ParagraphFormat.Borders[WdBorderType.wdBorderBottom].LineStyle = WdLineStyle.wdLineStyleSingle;
            }
            catch (Exception ex2)
            {
              string log = ex2.Message;
            }


            wrdApp.ActiveWindow.ActivePane.View.SeekView = WdSeekView.wdSeekFirstPageHeader;

            string _Sessionehere = ((_Sessione.Contains("\r\n")) ?
              _Sessione.Replace("\r\n", "/").Replace("/Incarico", "").Replace("/Riesame", "")
              : _Sessione); //"Esercizio " + 
            wrdApp.Selection.HeaderFooter.Range.Text = " \t\t " + _Cliente
              + " - CF: " + _CF + " - " + _Sessionehere + "";
            wrdApp.Selection.HeaderFooter.Range.Font.Size = 7;
            wrdApp.Selection.HeaderFooter.Range.ParagraphFormat.Borders[WdBorderType.wdBorderBottom].LineStyle =
              WdLineStyle.wdLineStyleSingle;

            try
            {
              wrdApp.ActiveWindow.ActivePane.View.SeekView =
                WdSeekView.wdSeekPrimaryHeader;

              wrdApp.Selection.HeaderFooter.Range.Text = " \t\t " + _Cliente
                + " - CF: " + _CF + " - " + _Sessionehere + "";
              wrdApp.Selection.HeaderFooter.Range.Font.Size = 7;
              wrdApp.Selection.HeaderFooter.Range.ParagraphFormat.Borders[WdBorderType.wdBorderBottom].LineStyle =
                WdLineStyle.wdLineStyleSingle;

              //if (Fascicolo)
              //{
              //    foreach (Microsoft.Office.Interop.Word.Section section in wrdApp.ActiveDocument.Sections)
              //    {
              //        Microsoft.Office.Interop.Word.Range headerRange = section.Headers[Microsoft.Office.Interop.Word.WdHeaderFooterIndex.wdHeaderFooterPrimary].Range;

              //        headerRange.Fields.Add(headerRange, Microsoft.Office.Interop.Word.WdFieldType.wdFieldPage);
              //        //headerRange.ParagraphFormat.Alignment = Microsoft.Office.Interop.Word.WdParagraphAlignment.wdAlignParagraphRight;
              //        headerRange.Text = " \t\t " + _Cliente + " - CF: " + _CF + " - Esercizio " + _Sessione + "";
              //    }
              //}

              ////if (nf != "")
              ////{
              ////    wrdApp.Selection.HeaderFooter.Shapes.AddPicture(nf, false, true, Type.Missing, Type.Missing, 500, 20).Select();
              ////    wrdApp.Selection.ShapeRange.Top = -20;
              ////}

              ////wrdApp.Selection.HeaderFooter.Shapes.AddPicture(file, false, true, Type.Missing, Type.Missing, 700, 20).Select();
              ////wrdApp.Selection.ShapeRange.PictureFormat.ColorType = MsoPictureColorType.msoPictureAutomatic; //.msoPictureWatermark ; andrea
              ////wrdApp.Selection.ShapeRange.Rotation = 90;
              ////wrdApp.Selection.ShapeRange.Top = 710;
              ////wrdApp.Selection.ShapeRange.Left = -170;
              ////wrdApp.Selection.ShapeRange.RelativeHorizontalPosition = WdRelativeHorizontalPosition.wdRelativeHorizontalPositionPage;
              ////wrdApp.Selection.ShapeRange.RelativeVerticalPosition = WdRelativeVerticalPosition.wdRelativeVerticalPositionPage;

              ////wrdApp.Selection.HeaderFooter.Shapes.AddPicture(file, false, true, Type.Missing, Type.Missing, 700, 20).Select();
              ////wrdApp.Selection.ShapeRange.PictureFormat.ColorType = MsoPictureColorType.msoPictureAutomatic; //.msoPictureWatermark ; andrea
              ////wrdApp.Selection.ShapeRange.Rotation = -90;
              ////wrdApp.Selection.ShapeRange.Top = 700;
              ////wrdApp.Selection.ShapeRange.Left = -730;
              ////wrdApp.Selection.ShapeRange.RelativeHorizontalPosition = WdRelativeHorizontalPosition.wdRelativeHorizontalPositionPage;
              ////wrdApp.Selection.ShapeRange.RelativeVerticalPosition = WdRelativeVerticalPosition.wdRelativeVerticalPositionPage;

              wrdApp.ActiveWindow.ActivePane.View.SeekView =
                WdSeekView.wdSeekPrimaryHeader;
            }
            catch (Exception ex2)
            {
              string log = ex2.Message;
            }


            ////if (nf != "")
            ////{
            ////    wrdApp.Selection.HeaderFooter.Shapes.AddPicture(nf, false, true, Type.Missing, Type.Missing, 500, 20).Select();
            ////    wrdApp.Selection.ShapeRange.Top = -20;
            ////}

            ////wrdApp.Selection.HeaderFooter.Shapes.AddPicture(file, false, true, Type.Missing, Type.Missing, 700, 20).Select();
            ////wrdApp.Selection.ShapeRange.PictureFormat.ColorType = MsoPictureColorType.msoPictureAutomatic; //.msoPictureWatermark ; andrea
            ////wrdApp.Selection.ShapeRange.Rotation = 90;
            ////wrdApp.Selection.ShapeRange.Top = 370;
            ////wrdApp.Selection.ShapeRange.Left = 200;
            ////wrdApp.Selection.ShapeRange.RelativeHorizontalPosition = WdRelativeHorizontalPosition.wdRelativeHorizontalPositionPage;
            ////wrdApp.Selection.ShapeRange.RelativeVerticalPosition = WdRelativeVerticalPosition.wdRelativeVerticalPositionPage;

            ////wrdApp.Selection.HeaderFooter.Shapes.AddPicture(file, false, true, Type.Missing, Type.Missing, 700, 20).Select();
            ////wrdApp.Selection.ShapeRange.PictureFormat.ColorType = MsoPictureColorType.msoPictureAutomatic; //.msoPictureWatermark ; andrea
            ////wrdApp.Selection.ShapeRange.Rotation = -90;
            ////wrdApp.Selection.ShapeRange.Top = 360;
            ////wrdApp.Selection.ShapeRange.Left = -360;
            ////wrdApp.Selection.ShapeRange.RelativeHorizontalPosition = WdRelativeHorizontalPosition.wdRelativeHorizontalPositionPage;
            ////wrdApp.Selection.ShapeRange.RelativeVerticalPosition = WdRelativeVerticalPosition.wdRelativeVerticalPositionPage;

            string wVersione = "-1";

            try
            {
              Microsoft.Office.Interop.Word.Application wrdApp2 =
                new Microsoft.Office.Interop.Word.Application();
              wVersione = wrdApp2.Application.Version.ToString().Substring(0, 2);
              Object oMissing2 = System.Reflection.Missing.Value;
              wrdApp2.Quit(ref oMissing2, ref oMissing2, ref oMissing2);
            }
            catch (Exception ex)
            {
              //ATTENZIONE OFFICE 365 NON RITORNA LA VERSIONE
              string log = ex.Message;
            }

            if (Convert.ToInt32(wVersione) >= 14)
            {
              if (Fascicolo)
              {
                //ATTENZIONE.. LA seguente forma viene sovrascritta dal testo in STYLEREF
                //wrdApp.Selection.HeaderFooter.Shapes.AddPicture(file, false, true, Type.Missing, Type.Missing, 700, 20).Select();
                //foreach (Microsoft.Office.Interop.Word.Section section in wrdApp.ActiveDocument.Sections)
                //{
                //    Microsoft.Office.Interop.Word.Range headerRange = section.Headers[Microsoft.Office.Interop.Word.WdHeaderFooterIndex.wdHeaderFooterPrimary].Range;

                //    object fieldEmpty = Microsoft.Office.Interop.Word.WdFieldType.wdFieldEmpty;
                //    object autoText = "STYLEREF \"Collegamento ipertestuale\" ";m
                //    object preserveFormatting = false;

                //    headerRange.Fields.Add(headerRange, ref fieldEmpty, ref autoText, ref preserveFormatting);
                //    headerRange.ParagraphFormat.Alignment = Microsoft.Office.Interop.Word.WdParagraphAlignment.wdAlignParagraphLeft;
                //}

                //wrdApp.Selection.Range.Text = "";

                object fieldEmpty =
                  Microsoft.Office.Interop.Word.WdFieldType.wdFieldEmpty;
                object autoText = "STYLEREF \"Collegamento ipertestuale\" ";
                object preserveFormatting = false;
                wrdDoc.ActiveWindow.Selection.Fields.Add(
                  wrdApp.Selection.Range, ref fieldEmpty, ref autoText, ref preserveFormatting);

                foreach (Microsoft.Office.Interop.Word.Table oTable in wrdApp.ActiveDocument.Tables)
                {
                  oTable.AllowPageBreaks = false;
                  oTable.Rows.AllowBreakAcrossPages = 0;
                }
              }
            }
          }
          catch (Exception ex)
          {
              string log = ex.Message;
          }
        }

        try
        {
          wrdDoc.Fields.Update();

          if (printingword)
          {
            wrdDoc.PageSetup.PaperSize = WdPaperSize.wdPaperA4;
            wrdDoc.SaveAs(filename + ".doc", WdSaveFormat.wdFormatDocument);
          }
          else
          {
            object fileFormat = WdSaveFormat.wdFormatPDF;

            FileInfo fif = new FileInfo(filename + ".pdf");
            while (fif.Exists)
            {
                filename = filename + "1";
                fif = new FileInfo(filename + ".pdf");
            }
            wrdDoc.PageSetup.PaperSize = WdPaperSize.wdPaperA4;
            wrdDoc.SaveAs(filename + ".pdf", fileFormat);
          }

          Object oMissing2 = System.Reflection.Missing.Value;

          wrdDoc.Close(ref oFalse, ref oMissing2, ref oMissing2);
          wrdApp.Quit(ref oMissing2, ref oMissing2, ref oMissing2);

          //FileInfo fi = new FileInfo( filename + ".rtf" );
          //if ( fi.Exists )
          //{
          //    fi.Delete();
          //}

          //System.Diagnostics.Process.Start( filename + ".pdf");

          Process process = new Process();
          process.Refresh();
          if (printingword)
          {
            process.StartInfo.FileName = filename + ".doc";
          }
          else
          {
            process.StartInfo.FileName = filename + ".pdf";
          }
          process.StartInfo.WindowStyle = ProcessWindowStyle.Maximized;
          process.StartInfo.ErrorDialog = false;
          process.StartInfo.Verb = "open";
          process.Start();
          //process.WaitForInputIdle(2000);

          IntPtr hWnd = process.MainWindowHandle;
          SetFocus(hWnd);
          SetForegroundWindow(hWnd);
        }
        catch (Exception ex)
        {
          string log = ex.Message;

          //FileInfo fi = new FileInfo( filename + ".rtf" );
          //if ( fi.Exists )
          //{
          //    fi.Delete();
          //}
        }
      }
      else
      {
        ConvertRtfToDocx(filename + ".rtf", filename + ".docx");
        // il codice seguente non fa niente
        if (Watermark && !StampaRelazioneGenerica && !StampaLetteraIncarico
          && !StampaLetteraAttestazione && !StampaManagementLetter
          && !StampaCodiceEtico)
        {
          if (Fascicolo)
          {
            //andrea
            //string wVersione = "-1";

            //if (Convert.ToInt32(wVersione) >= 14)
            //{
            //    foreach (string item in TitoliInHeader)
            //    {
            //        object typeMissing = System.Reflection.Missing.Value;
            //        object texttofind = item;

            //        try
            //        {
            //            wrdApp.ActiveDocument.Select();

            //            bool resultfind = wrdApp.Selection.Find.Execute(ref texttofind, ref typeMissing, ref typeMissing, ref typeMissing, ref typeMissing, ref typeMissing, ref typeMissing, ref typeMissing, ref typeMissing, ref typeMissing, ref typeMissing, ref typeMissing, ref typeMissing, ref typeMissing, ref typeMissing);

            //            if (resultfind == false)
            //            {
            //                continue;
            //            }

            //            if (item != "INDICE")
            //            {
            //                resultfind = wrdApp.Selection.Find.Execute(ref texttofind, ref typeMissing, ref typeMissing, ref typeMissing, ref typeMissing, ref typeMissing, ref typeMissing, ref typeMissing, ref typeMissing, ref typeMissing, ref typeMissing, ref typeMissing, ref typeMissing, ref typeMissing, ref typeMissing);
            //                if (resultfind == false)
            //                {
            //                    continue;
            //                }
            //            }

            //            Microsoft.Office.Interop.Word.Range myRange = wrdApp.Selection.Range;

            //            Microsoft.Office.Interop.Word.Hyperlinks myLinks = wrdDoc.Hyperlinks;
            //            string test_file_Path = "#";
            //            object linkAddr = test_file_Path;
            //            Microsoft.Office.Interop.Word.Hyperlink myLink = myLinks.Add(myRange, ref linkAddr, ref typeMissing);

            //        }
            //        catch (Exception ex)
            //        {
            //            string log = ex.Message;
            //        }

            //    }
            //}
          }
          //try
          //{



          //    GestioneLicenza gl = new GestioneLicenza();
          //    ////string file = gl.GeneraFileFiligrana();

          //    ////string nf = "";

          //    ////if (intestazione != "")
          //    ////{
          //    ////    Utilities u = new Utilities();
          //    ////    nf = App.AppTempFolder + "\\{" + Guid.NewGuid().ToString() + "}.png";
          //    ////    u.StringToImage(intestazione, nf);
          //    ////}


          //    ////wrdApp.ActiveWindow.ActivePane.View.SeekView = WdSeekView.wdSeekFirstPageHeader;
          //    ////wrdApp.Selection.HeaderFooter.Range.Text = "\r" + _Cliente + " - " + _Sessione + "\r";

          //    object fieldEmpty2 = WdFieldType.wdFieldEmpty;


          //    wrdApp.ActiveWindow.ActivePane.View.SeekView = WdSeekView.wdSeekFirstPageFooter;
          //    wrdApp.Selection.HeaderFooter.Range.Text = "\rREVISOFT® - Sindaci e Revisori - Licenziatario: " + gl.Intestatario + "\r"; // - Licenza numero: " + gl.CodiceMacchina.Split('-')[0] + "
          //    wrdApp.Selection.HeaderFooter.Range.Font.Size = 8;
          //    wrdApp.Selection.HeaderFooter.Range.ParagraphFormat.Alignment = Microsoft.Office.Interop.Word.WdParagraphAlignment.wdAlignParagraphCenter;
          //    wrdApp.Selection.HeaderFooter.Range.ParagraphFormat.Borders[WdBorderType.wdBorderTop].LineStyle = WdLineStyle.wdLineStyleSingle;

          //    try
          //    {
          //        wrdApp.ActiveWindow.ActivePane.View.SeekView = WdSeekView.wdSeekPrimaryFooter;
          //        Range footerRange = wrdApp.Selection.HeaderFooter.Range;
          //        footerRange.Text = "\rREVISOFT® -Sindaci e Revisori - Licenziatario: " + gl.Intestatario + "\tPag. "; //- Licenza numero: " + gl.CodiceMacchina.Split('-')[0] + " 
          //        footerRange.SetRange(footerRange.End + 1, footerRange.End + 1);
          //        footerRange.Fields.Add(footerRange, WdFieldType.wdFieldPage);

          //        wrdApp.Selection.HeaderFooter.LinkToPrevious = false;
          //        footerRange.Font.Size = 8;
          //        footerRange.ParagraphFormat.Alignment = Microsoft.Office.Interop.Word.WdParagraphAlignment.wdAlignParagraphCenter;
          //        footerRange.ParagraphFormat.Borders[WdBorderType.wdBorderTop].LineStyle = WdLineStyle.wdLineStyleSingle;
          //        //wrdApp.ActiveWindow.ActivePane.View.SeekView = WdSeekView.wdSeekPrimaryFooter;

          //        //Object CurrentPage = Microsoft.Office.Interop.Word.WdFieldType.wdFieldPage;

          //        //wrdApp.Selection.InsertBefore( .HeaderFooter..Range.Fields.Add(wrdApp.Selection.HeaderFooter.Range, ref CurrentPage, ref oMissing, ref oMissing);

          //        //wrdApp.ActiveWindow.ActivePane.View.SeekView = WdSeekView.wdSeekFirstPageHeader;
          //        //wrdApp.Selection.HeaderFooter.Range.Text = " \t\t " + _Cliente + " - CF: " + _CF + " - Esercizio " + _Sessione + "";
          //        //wrdApp.Selection.HeaderFooter.Range.Font.Size = 10;
          //        //wrdApp.Selection.HeaderFooter.Range.ParagraphFormat.Borders[WdBorderType.wdBorderBottom].LineStyle = WdLineStyle.wdLineStyleSingle;
          //    }
          //    catch (Exception ex2)
          //    {
          //        string log = ex2.Message;
          //    }


          //    wrdApp.ActiveWindow.ActivePane.View.SeekView = WdSeekView.wdSeekFirstPageHeader;

          //    string _Sessionehere = ((_Sessione.Contains("\r\n")) ? _Sessione.Replace("\r\n", "/").Replace("/Incarico", "").Replace("/Riesame", "") : _Sessione); //"Esercizio " + 
          //    wrdApp.Selection.HeaderFooter.Range.Text = " \t\t " + _Cliente + " - CF: " + _CF + " - " + _Sessionehere + "";
          //    wrdApp.Selection.HeaderFooter.Range.Font.Size = 7;
          //    wrdApp.Selection.HeaderFooter.Range.ParagraphFormat.Borders[WdBorderType.wdBorderBottom].LineStyle = WdLineStyle.wdLineStyleSingle;

          //    try
          //    {
          //        wrdApp.ActiveWindow.ActivePane.View.SeekView = WdSeekView.wdSeekPrimaryHeader;

          //        wrdApp.Selection.HeaderFooter.Range.Text = " \t\t " + _Cliente + " - CF: " + _CF + " - " + _Sessionehere + "";
          //        wrdApp.Selection.HeaderFooter.Range.Font.Size = 7;
          //        wrdApp.Selection.HeaderFooter.Range.ParagraphFormat.Borders[WdBorderType.wdBorderBottom].LineStyle = WdLineStyle.wdLineStyleSingle;

          //        //if (Fascicolo)
          //        //{
          //        //    foreach (Microsoft.Office.Interop.Word.Section section in wrdApp.ActiveDocument.Sections)
          //        //    {
          //        //        Microsoft.Office.Interop.Word.Range headerRange = section.Headers[Microsoft.Office.Interop.Word.WdHeaderFooterIndex.wdHeaderFooterPrimary].Range;

          //        //        headerRange.Fields.Add(headerRange, Microsoft.Office.Interop.Word.WdFieldType.wdFieldPage);
          //        //        //headerRange.ParagraphFormat.Alignment = Microsoft.Office.Interop.Word.WdParagraphAlignment.wdAlignParagraphRight;
          //        //        headerRange.Text = " \t\t " + _Cliente + " - CF: " + _CF + " - Esercizio " + _Sessione + "";
          //        //    }
          //        //}

          //        ////if (nf != "")
          //        ////{
          //        ////    wrdApp.Selection.HeaderFooter.Shapes.AddPicture(nf, false, true, Type.Missing, Type.Missing, 500, 20).Select();
          //        ////    wrdApp.Selection.ShapeRange.Top = -20;
          //        ////}

          //        ////wrdApp.Selection.HeaderFooter.Shapes.AddPicture(file, false, true, Type.Missing, Type.Missing, 700, 20).Select();
          //        ////wrdApp.Selection.ShapeRange.PictureFormat.ColorType = MsoPictureColorType.msoPictureAutomatic; //.msoPictureWatermark ; andrea
          //        ////wrdApp.Selection.ShapeRange.Rotation = 90;
          //        ////wrdApp.Selection.ShapeRange.Top = 710;
          //        ////wrdApp.Selection.ShapeRange.Left = -170;
          //        ////wrdApp.Selection.ShapeRange.RelativeHorizontalPosition = WdRelativeHorizontalPosition.wdRelativeHorizontalPositionPage;
          //        ////wrdApp.Selection.ShapeRange.RelativeVerticalPosition = WdRelativeVerticalPosition.wdRelativeVerticalPositionPage;

          //        ////wrdApp.Selection.HeaderFooter.Shapes.AddPicture(file, false, true, Type.Missing, Type.Missing, 700, 20).Select();
          //        ////wrdApp.Selection.ShapeRange.PictureFormat.ColorType = MsoPictureColorType.msoPictureAutomatic; //.msoPictureWatermark ; andrea
          //        ////wrdApp.Selection.ShapeRange.Rotation = -90;
          //        ////wrdApp.Selection.ShapeRange.Top = 700;
          //        ////wrdApp.Selection.ShapeRange.Left = -730;
          //        ////wrdApp.Selection.ShapeRange.RelativeHorizontalPosition = WdRelativeHorizontalPosition.wdRelativeHorizontalPositionPage;
          //        ////wrdApp.Selection.ShapeRange.RelativeVerticalPosition = WdRelativeVerticalPosition.wdRelativeVerticalPositionPage;

          //        wrdApp.ActiveWindow.ActivePane.View.SeekView = WdSeekView.wdSeekPrimaryHeader;
          //    }
          //    catch (Exception ex2)
          //    {
          //        string log = ex2.Message;
          //    }


          //    ////if (nf != "")
          //    ////{
          //    ////    wrdApp.Selection.HeaderFooter.Shapes.AddPicture(nf, false, true, Type.Missing, Type.Missing, 500, 20).Select();
          //    ////    wrdApp.Selection.ShapeRange.Top = -20;
          //    ////}

          //    ////wrdApp.Selection.HeaderFooter.Shapes.AddPicture(file, false, true, Type.Missing, Type.Missing, 700, 20).Select();
          //    ////wrdApp.Selection.ShapeRange.PictureFormat.ColorType = MsoPictureColorType.msoPictureAutomatic; //.msoPictureWatermark ; andrea
          //    ////wrdApp.Selection.ShapeRange.Rotation = 90;
          //    ////wrdApp.Selection.ShapeRange.Top = 370;
          //    ////wrdApp.Selection.ShapeRange.Left = 200;
          //    ////wrdApp.Selection.ShapeRange.RelativeHorizontalPosition = WdRelativeHorizontalPosition.wdRelativeHorizontalPositionPage;
          //    ////wrdApp.Selection.ShapeRange.RelativeVerticalPosition = WdRelativeVerticalPosition.wdRelativeVerticalPositionPage;

          //    ////wrdApp.Selection.HeaderFooter.Shapes.AddPicture(file, false, true, Type.Missing, Type.Missing, 700, 20).Select();
          //    ////wrdApp.Selection.ShapeRange.PictureFormat.ColorType = MsoPictureColorType.msoPictureAutomatic; //.msoPictureWatermark ; andrea
          //    ////wrdApp.Selection.ShapeRange.Rotation = -90;
          //    ////wrdApp.Selection.ShapeRange.Top = 360;
          //    ////wrdApp.Selection.ShapeRange.Left = -360;
          //    ////wrdApp.Selection.ShapeRange.RelativeHorizontalPosition = WdRelativeHorizontalPosition.wdRelativeHorizontalPositionPage;
          //    ////wrdApp.Selection.ShapeRange.RelativeVerticalPosition = WdRelativeVerticalPosition.wdRelativeVerticalPositionPage;

          //    string wVersione = "-1";

          //    try
          //    {
          //        Microsoft.Office.Interop.Word.Application wrdApp2 = new Microsoft.Office.Interop.Word.Application();
          //        wVersione = wrdApp2.Application.Version.ToString().Substring(0, 2);
          //        Object oMissing2 = System.Reflection.Missing.Value;
          //        wrdApp2.Quit(ref oMissing2, ref oMissing2, ref oMissing2);

          //    }
          //    catch (Exception ex)
          //    {
          //        //ATTENZIONE OFFICE 365 NON RITORNA LA VERSIONE
          //        string log = ex.Message;
          //    }

          //    if (Convert.ToInt32(wVersione) >= 14)
          //    {
          //        if (Fascicolo)
          //        {
          //            //ATTENZIONE.. LA seguente forma viene sovrascritta dal testo in STYLEREF
          //            //wrdApp.Selection.HeaderFooter.Shapes.AddPicture(file, false, true, Type.Missing, Type.Missing, 700, 20).Select();
          //            //foreach (Microsoft.Office.Interop.Word.Section section in wrdApp.ActiveDocument.Sections)
          //            //{
          //            //    Microsoft.Office.Interop.Word.Range headerRange = section.Headers[Microsoft.Office.Interop.Word.WdHeaderFooterIndex.wdHeaderFooterPrimary].Range;

          //            //    object fieldEmpty = Microsoft.Office.Interop.Word.WdFieldType.wdFieldEmpty;
          //            //    object autoText = "STYLEREF \"Collegamento ipertestuale\" ";m
          //            //    object preserveFormatting = false;

          //            //    headerRange.Fields.Add(headerRange, ref fieldEmpty, ref autoText, ref preserveFormatting);
          //            //    headerRange.ParagraphFormat.Alignment = Microsoft.Office.Interop.Word.WdParagraphAlignment.wdAlignParagraphLeft;
          //            //}

          //            //wrdApp.Selection.Range.Text = "";

          //            object fieldEmpty = Microsoft.Office.Interop.Word.WdFieldType.wdFieldEmpty;
          //            object autoText = "STYLEREF \"Collegamento ipertestuale\" ";
          //            object preserveFormatting = false;
          //            wrdDoc.ActiveWindow.Selection.Fields.Add(wrdApp.Selection.Range, ref fieldEmpty, ref autoText, ref preserveFormatting);


          //            foreach (Microsoft.Office.Interop.Word.Table oTable in wrdApp.ActiveDocument.Tables)
          //            {
          //                oTable.AllowPageBreaks = false;
          //                oTable.Rows.AllowBreakAcrossPages = 0;
          //            }
          //        }
          //    }
          //}
          //catch (Exception ex)
          //{
          //    string log = ex.Message;
          //}
        }

        try
        {
          //wrdDoc.Fields.Update();

          //if (printingword)
          //{
          //    wrdDoc.PageSetup.PaperSize = WdPaperSize.wdPaperA4;
          //    wrdDoc.SaveAs(filename + ".doc", WdSaveFormat.wdFormatDocument);
          //}
          //else
          //{
          //    object fileFormat = WdSaveFormat.wdFormatPDF;

          //    FileInfo fif = new FileInfo(filename + ".pdf");
          //    while (fif.Exists)
          //    {
          //        filename = filename + "1";
          //        fif = new FileInfo(filename + ".pdf");
          //    }
          //    wrdDoc.PageSetup.PaperSize = WdPaperSize.wdPaperA4;
          //    wrdDoc.SaveAs(filename + ".pdf", fileFormat);
          //}

          //Object oMissing2 = System.Reflection.Missing.Value;

          //wrdDoc.Close(ref oFalse, ref oMissing2, ref oMissing2);
          //wrdApp.Quit(ref oMissing2, ref oMissing2, ref oMissing2);

          //FileInfo fi = new FileInfo( filename + ".rtf" );
          //if ( fi.Exists )
          //{
          //    fi.Delete();
          //}

          //System.Diagnostics.Process.Start( filename + ".pdf");

          Process process = new Process();
          process.Refresh();
          process.StartInfo.FileName = filename + ".docx";

          process.StartInfo.WindowStyle = ProcessWindowStyle.Maximized;
          process.StartInfo.ErrorDialog = false;
          process.StartInfo.Verb = "open";
          process.Start();
          //process.WaitForInputIdle(2000);

          IntPtr hWnd = process.MainWindowHandle;
          SetFocus(hWnd);
          SetForegroundWindow(hWnd);
        }
        catch (Exception ex)
        {
          string log = ex.Message;

          //FileInfo fi = new FileInfo( filename + ".rtf" );
          //if ( fi.Exists )
          //{
          //    fi.Delete();
          //}
        }
      }
      pw.Close();pw = null;
*/
      #endregion
      #region newSavePDF

      bool printingword = !Properties.Settings.Default.UseWord;   //Se uso word come metodo di generazione della stampa di default stampo in pdf

      if (Properties.Settings.Default.UseWord)
      {
        wSchedaSceltaWordPDF swf = new wSchedaSceltaWordPDF();
        swf.Owner = _Owner;// System.Windows.Application.Current.MainWindow;
        //Microsoft.Win32.OpenFileDialog dlg = new Microsoft.Win32.OpenFileDialog();
        swf.ShowDialog();
        //dlg.ShowDialog();

        switch (swf.selectedprint)
        {
          case 0:
            printingword = true;
            break;
          case 1:
          default:
            break;
        }

      }

      int inizio = template_text.IndexOf("@DL@");
      if (inizio == -1)
      {
        return;
      }

      for (int i = 0; i < rtf_text.Count; i++)
      {
        if (rtf_text[i].Length > ("\\page").Length && rtf_text[i].Substring(rtf_text[i].Length - ("\\page").Length - 1, ("\\page").Length) == "\\page")
        {
          rtf_text[i] = rtf_text[i].Substring(0, rtf_text[i].Length - ("\\page").Length - 1);
        }
      }

      string wVersione2 = "-1";
      string fileNameCompleto = "";
      bool saved = false;
      string estensione = "";
      string titoloFile = ""; // nome completo file SENZA estensione



      if (useWord)
      {


        cDocNet wrdDoc = new cDocNet();
        wVersione2 = wrdDoc.Versione();
        for (int i = 0; i < rtf_text.Count; i++)
        {
          if (Convert.ToInt32(wVersione2) >= 14)
          {
            rtf_text[i] = rtf_text[i].Replace("(##TOC##)", rtf_text_TOC + " \\page ");
          }
          else
          {
            rtf_text[i] = rtf_text[i].Replace("(##TOC##)", "");
          }

          while (rtf_text[i].IndexOf("{\\f0\\fcharset0") != -1)
          {

            rtf_text[i] = rtf_text[i].Replace(rtf_text[i].Substring(rtf_text[i].IndexOf("{\\f0\\fcharset0"), rtf_text[i].IndexOf("}", rtf_text[i].IndexOf("{\\f0\\fcharset0")) - rtf_text[i].IndexOf("{\\f0\\fcharset0") + 1), "");
          }
        }
        //-------------------------------LC---------begin----------------------------
        if (StampaTemporanea)
        {
          estensione = ".rtf"; titoloFile = filename;
          fileNameCompleto = titoloFile + estensione;
          //fileNameCompleto = filename + ".rtf";
        }
        else
        {
          /* old  System.Windows.Forms.FolderBrowserDialog fd = new System.Windows.Forms.FolderBrowserDialog();
           if (Docsettings.defaultpath != "")
             fd.SelectedPath = Docsettings.defaultpath;
           fd.ShowDialog();
           old */
          FolderSelectDialog fsd = new FolderSelectDialog();
          string targetFolder;
          if (Docsettings.defaultpath != "")
            fsd.InitialDirectory = Docsettings.defaultpath;
          if (!fsd.ShowDialog()) return;
          targetFolder = fsd.FileName;
          if (!targetFolder.EndsWith(@"\", StringComparison.Ordinal)) targetFolder += @"\";

                   
            Docsettings.defaultpath = targetFolder;

            //fileNameCompleto = fd.SelectedPath + "\\DocumentoRevisoft_" + _Cliente + "_" + DateTime.Now.Year.ToString() + DateTime.Now.Month.ToString().PadLeft(2, '0') + DateTime.Now.Day.ToString().PadLeft(2, '0') + ".doc";
            estensione = ".docx";
            titoloFile = targetFolder + "DocumentoRevisoft_"
              + _Cliente + "_" + DateTime.Now.Year.ToString()
              + DateTime.Now.Month.ToString().PadLeft(2, '0')
              + DateTime.Now.Day.ToString().PadLeft(2, '0');
            fileNameCompleto = titoloFile + estensione;
            FileInfo fitmp = new FileInfo(fileNameCompleto);
            int index = 0;

            while (fitmp.Exists)
            {
              index++;
              /*fileNameCompleto = fd.SelectedPath + "\\DocumentoRevisoft_"
                + _Cliente + "_" + DateTime.Now.Year.ToString()
                + DateTime.Now.Month.ToString().PadLeft(2, '0')
                + DateTime.Now.Day.ToString().PadLeft(2, '0') + "(" + index.ToString() + ").doc";*/
              titoloFile = targetFolder + "DocumentoRevisoft_"
                + _Cliente + "_" + DateTime.Now.Year.ToString()
                + DateTime.Now.Month.ToString().PadLeft(2, '0')
                + DateTime.Now.Day.ToString().PadLeft(2, '0') + "(" + index.ToString() + ")";
              fileNameCompleto = titoloFile + estensione;
              fitmp = new FileInfo(fileNameCompleto);
            }
          
         
        }



        //---------------------------LC---------------end----------------------------

      }
      else
      {
        for (int i = 0; i < rtf_text.Count; i++)
        {
          rtf_text[i] = rtf_text[i].Replace("(##TOC##)", rtf_text_TOC + " \\page ");

          while (rtf_text[i].IndexOf("{\\f0\\fcharset0") != -1)
          {

            rtf_text[i] = rtf_text[i].Replace(rtf_text[i].Substring(rtf_text[i].IndexOf("{\\f0\\fcharset0"), rtf_text[i].IndexOf("}", rtf_text[i].IndexOf("{\\f0\\fcharset0")) - rtf_text[i].IndexOf("{\\f0\\fcharset0") + 1), "");
          }
        }
        //--------------------------------------LC------------begin-------------------
        if (StampaTemporanea)
        {
          estensione = ".rtf"; titoloFile = filename;
          fileNameCompleto = titoloFile + estensione;
        }
        else
        {
          System.Windows.Forms.FolderBrowserDialog fd = new System.Windows.Forms.FolderBrowserDialog();
          if (Docsettings.defaultpath != "")
            fd.SelectedPath = Docsettings.defaultpath;
          fd.ShowDialog();

          if (fd.SelectedPath != "")
          {
            Docsettings.defaultpath = fd.SelectedPath;

            estensione = ".docx";
            titoloFile = fd.SelectedPath + "\\DocumentoRevisoft_" + _Cliente
              + "_" + DateTime.Now.Year.ToString()
              + DateTime.Now.Month.ToString().PadLeft(2, '0')
              + DateTime.Now.Day.ToString().PadLeft(2, '0');
            fileNameCompleto = titoloFile + estensione;
            /*fileNameCompleto = fd.SelectedPath + "\\DocumentoRevisoft_" + _Cliente
              + "_" + DateTime.Now.Year.ToString()
              + DateTime.Now.Month.ToString().PadLeft(2, '0')
              + DateTime.Now.Day.ToString().PadLeft(2, '0') + ".doc";*/
            FileInfo fitmp = new FileInfo(fileNameCompleto);
            int index = 0;

            while (fitmp.Exists)
            {
              index++;
              titoloFile = fd.SelectedPath + "\\DocumentoRevisoft_" + _Cliente
                + "_" + DateTime.Now.Year.ToString()
                + DateTime.Now.Month.ToString().PadLeft(2, '0')
                + DateTime.Now.Day.ToString().PadLeft(2, '0') + "(" + index.ToString() + ")";
              fileNameCompleto = titoloFile + estensione;
              /*fileNameCompleto = fd.SelectedPath + "\\DocumentoRevisoft_" + _Cliente
                + "_" + DateTime.Now.Year.ToString()
                + DateTime.Now.Month.ToString().PadLeft(2, '0')
                + DateTime.Now.Day.ToString().PadLeft(2, '0') + "(" + index.ToString() + ").doc";*/
              fitmp = new FileInfo(fileNameCompleto);
            }
          }
          else
          {

            return;
          }
        }

        if (fileNameCompleto != "")
        {
          //wrdDoc.PageSetup.PaperSize = WdPaperSize.wdPaperA4;
          //wrdDoc.SaveAs(fileNameCompleto);
          //fileNameCompleto = fileNameCompleto.Replace(".doc", ".docx").Replace(".rtf", ".docx");
          estensione = ".docx"; fileNameCompleto = titoloFile + estensione;
          ConvertRtfToDocx(filename + ".rtf", fileNameCompleto);
          saved = true;
        }
        //-----------------------------------LC------------------end------------------

      }


      rtf_text.Add(template_text.Substring(inizio + 4, template_text.Length - (inizio + 4)));

      for (int i = 0; i < rtf_text.Count; i++)
      {
        rtf_text[i] = rtf_text[i].Replace("Arial;", "Cambria;");

        //andrea: trascodifica caratteri estesi
        rtf_text[i] = Convert2RTF(rtf_text[i]);
      }

      // sostiture "filename" con "fileNameCompleto" ???
      estensione = ".rtf"; fileNameCompleto = titoloFile + estensione;
      //FileInfo fiv = new FileInfo(filename + ".rtf");
      FileInfo fiv = new FileInfo(fileNameCompleto);
      while (fiv.Exists)
      {
        /*filename = filename + "1";
        fiv = new FileInfo(filename + ".rtf");*/
        titoloFile = titoloFile + "1"; fileNameCompleto = titoloFile + estensione;
        fiv = new FileInfo(fileNameCompleto);
      }

      string rtfcomplete = "";

      for (int i = 0; i < rtf_text.Count; i++)
      {
        rtfcomplete += rtf_text[i];
      }

      //TextWriter tw = new StreamWriter(filename + ".rtf");
      TextWriter tw = new StreamWriter(fileNameCompleto);
      tw.Write(rtfcomplete);
      tw.Close();
      //-----------------------------LC-----------------begin------------------
      /*-----------------------------------------------------------------------------
              if (!StampaTemporanea)
              {
                FileInfo fi = new FileInfo(filename + ".rtf");
                fi.Delete();
              }
              // per evitare eccezione più avanti - da verificare
      -----------------------------------------------------------------------------*/

      if (saved)
      {

        //MM
        //  Process.Start(fileNameCompleto);
        System.Diagnostics.Process.Start(new System.Diagnostics.ProcessStartInfo(fileNameCompleto) { UseShellExecute = true });

      }
      //------------------------------LC-----------------end-----------------


      if (useWord)
      {

        cDocNet wrdDoc = new cDocNet();
        Object oFalse = false;

        estensione = ".rtf"; fileNameCompleto = titoloFile + estensione;
        //wrdDoc = wrdApp.Documents.Open(filename + ".rtf");  // genera errore
        wrdDoc.FieldsUpdate(counterFieldindex);


        if (Watermark && !StampaRelazioneGenerica && !StampaLetteraIncarico
          && !StampaLetteraAttestazione && !StampaManagementLetter
          && !StampaCodiceEtico)
        {
          if (Fascicolo)
          {
            //andrea
            string wVersione = "-1";

            wVersione = wrdDoc.Versione();

            //string wVersione = wrdApp.Application.Version.ToString().Substring(0,2);
            /*MM
            if (Convert.ToInt32(wVersione) >= 14)
            {
              foreach (string item in TitoliInHeader)
              {
                object typeMissing = System.Reflection.Missing.Value;
                object texttofind = item;

                try
                {


                  bool resultfind = wrdApp.Selection.Find.Execute(
                    ref texttofind, ref typeMissing, ref typeMissing,
                    ref typeMissing, ref typeMissing, ref typeMissing,
                    ref typeMissing, ref typeMissing, ref typeMissing,
                    ref typeMissing, ref typeMissing, ref typeMissing,
                    ref typeMissing, ref typeMissing, ref typeMissing);

                  if (resultfind == false)
                  {
                    continue;
                  }

                  if (item != "INDICE")
                  {
                    resultfind = wrdApp.Selection.Find.Execute(
                      ref texttofind, ref typeMissing, ref typeMissing,
                      ref typeMissing, ref typeMissing, ref typeMissing,
                      ref typeMissing, ref typeMissing, ref typeMissing,
                      ref typeMissing, ref typeMissing, ref typeMissing,
                      ref typeMissing, ref typeMissing, ref typeMissing);
                    if (resultfind == false)
                    {
                      continue;
                    }
                  }

                  Microsoft.Office.Interop.Word.Range myRange = wrdApp.Selection.Range;

                  Microsoft.Office.Interop.Word.Hyperlinks myLinks = wrdDoc.Hyperlinks;
                  string test_file_Path = "#";
                  object linkAddr = test_file_Path;
                  Microsoft.Office.Interop.Word.Hyperlink myLink =
                    myLinks.Add(myRange, ref linkAddr, ref typeMissing);

                }
                catch (Exception ex)
                {
                  string log = ex.Message;
                  if (pw != null) { pw.Close(); pw = null; }
                }

              }
            }
                        MM */
          }

          try
          {
            /*MM
                        wrdApp.ActiveWindow.ActivePane.View.SeekView = WdSeekView.wdSeekMainDocument;
                        wrdApp.ActiveDocument.Sections[1].Range.Select();
            MM*/

            GestioneLicenza gl = new GestioneLicenza();
            string _Sessionehere = ((_Sessione.Contains(NEW_LINE)) ? _Sessione.Replace(NEW_LINE, "/").Replace("/Incarico", "").Replace("/Riesame", "") : _Sessione); //"Esercizio " + 

            wrdDoc.testoprimapagfooter = "\rREVISOFT ® - Sindaci e Revisori - Licenziatario: " + gl.Intestatario + "\r";
            wrdDoc.testofooter = "\rREVISOFT ® -Sindaci e Revisori - Licenziatario: " + gl.Intestatario + "\tPag. ";
            wrdDoc.testoprimapagheader = _Cliente + " - CF: " + _CF + " - " + _Sessionehere + "";

            ////string file = gl.GeneraFileFiligrana();

            ////string nf = "";

            ////if (intestazione != "")
            ////{
            ////    Utilities u = new Utilities();
            ////    nf = App.AppTempFolder + "\\{" + Guid.NewGuid().ToString() + "}.png";
            ////    u.StringToImage(intestazione, nf);
            ////}


            ////wrdApp.ActiveWindow.ActivePane.View.SeekView = WdSeekView.wdSeekFirstPageHeader;
            ////wrdApp.Selection.HeaderFooter.Range.Text = "\r" + _Cliente + " - " + _Sessione + "\r";
            /*MM
                        object fieldEmpty2 = WdFieldType.wdFieldEmpty;

                        wrdApp.ActiveWindow.ActivePane.View.SeekView =   WdSeekView.wdSeekFirstPageFooter;

                        wrdApp.Selection.HeaderFooter.Range.Text =    "\rREVISOFTÂ® - Sindaci e Revisori - Licenziatario: "   + gl.Intestatario + "\r"; // - Licenza numero: " + gl.CodiceMacchina.Split('-')[0] + "
                        wrdApp.Selection.HeaderFooter.Range.Font.Size = 8;
                        wrdApp.Selection.HeaderFooter.Range.ParagraphFormat.Alignment =   Microsoft.Office.Interop.Word.WdParagraphAlignment.wdAlignParagraphCenter;
                        wrdApp.Selection.HeaderFooter.Range.ParagraphFormat.Borders[WdBorderType.wdBorderTop].LineStyle   = WdLineStyle.wdLineStyleSingle;

                        try
                        {
                          wrdApp.ActiveWindow.ActivePane.View.SeekView =  WdSeekView.wdSeekPrimaryFooter;
                          Range footerRange = wrdApp.Selection.HeaderFooter.Range;
                          footerRange.Text =    "\rREVISOFTÂ® -Sindaci e Revisori - Licenziatario: "      + gl.Intestatario + "\tPag. "; //- Licenza numero: " + gl.CodiceMacchina.Split('-')[0] + " 
                          footerRange.SetRange(footerRange.End + 1, footerRange.End + 1);
                          footerRange.Fields.Add(footerRange, WdFieldType.wdFieldPage);
                          wrdApp.Selection.HeaderFooter.LinkToPrevious = false;
                          footerRange.Font.Size = 8;
                          footerRange.ParagraphFormat.Alignment =  Microsoft.Office.Interop.Word.WdParagraphAlignment.wdAlignParagraphCenter;
                          footerRange.ParagraphFormat.Borders[WdBorderType.wdBorderTop].LineStyle  = WdLineStyle.wdLineStyleSingle;

                          //wrdApp.ActiveWindow.ActivePane.View.SeekView = WdSeekView.wdSeekPrimaryFooter;

                          //Object CurrentPage = Microsoft.Office.Interop.Word.WdFieldType.wdFieldPage;

                          //wrdApp.Selection.InsertBefore( .HeaderFooter..Range.Fields.Add(wrdApp.Selection.HeaderFooter.Range, ref CurrentPage, ref oMissing, ref oMissing);

                          //wrdApp.ActiveWindow.ActivePane.View.SeekView = WdSeekView.wdSeekFirstPageHeader;
                          //wrdApp.Selection.HeaderFooter.Range.Text = " \t\t " + _Cliente + " - CF: " + _CF + " - Esercizio " + _Sessione + "";
                          //wrdApp.Selection.HeaderFooter.Range.Font.Size = 10;
                          //wrdApp.Selection.HeaderFooter.Range.ParagraphFormat.Borders[WdBorderType.wdBorderBottom].LineStyle = WdLineStyle.wdLineStyleSingle;
                        }
                        catch (Exception ex2)
                        {
                          string log = ex2.Message;
                          if (pw != null) { pw.Close(); pw = null; }
                        }

            /*MM
                        wrdApp.ActiveWindow.ActivePane.View.SeekView = WdSeekView.wdSeekFirstPageHeader;

                        string _Sessionehere = ((_Sessione.Contains(NEW_LINE)) ?
                          _Sessione.Replace(NEW_LINE, "/").Replace("/Incarico", "").Replace("/Riesame", "") : _Sessione); //"Esercizio " + 
                        wrdApp.Selection.HeaderFooter.Range.Text = " \t\t " + _Cliente + " - CF: " + _CF + " - " + _Sessionehere + "";
                        wrdApp.Selection.HeaderFooter.Range.Font.Size = 7;
                        wrdApp.Selection.HeaderFooter.Range.ParagraphFormat.Borders[WdBorderType.wdBorderBottom].LineStyle = WdLineStyle.wdLineStyleSingle;

                        try
                        {
                          wrdApp.ActiveWindow.ActivePane.View.SeekView =
                            WdSeekView.wdSeekPrimaryHeader;
                          wrdApp.Selection.HeaderFooter.Range.Text =
                            " \t\t " + _Cliente + " - CF: " + _CF + " - " + _Sessionehere + "";
                          wrdApp.Selection.HeaderFooter.Range.Font.Size = 7;
                          wrdApp.Selection.HeaderFooter.Range.ParagraphFormat.Borders[WdBorderType.wdBorderBottom].LineStyle = WdLineStyle.wdLineStyleSingle;
                          wrdApp.ActiveWindow.ActivePane.View.SeekView =
                            WdSeekView.wdSeekPrimaryHeader;
                        }

                        catch (Exception ex2)
                        {
                          string log = ex2.Message;
                          if (pw != null) { pw.Close(); pw = null; }
                        }
            MM*/
            string wVersione = "-1";


            wVersione = wrdDoc.Versione();


            if (Convert.ToInt32(wVersione) >= 14)
            {
              if (Fascicolo)
              {
                /*MM
                                object fieldEmpty = Microsoft.Office.Interop.Word.WdFieldType.wdFieldEmpty;

                    */
                //object fieldEmpty;
                object autoText = "STYLEREF \"Collegamento ipertestuale\" ";
                object preserveFormatting = false;
                /*MM
                                wrdDoc.ActiveWindow.Selection.Fields.Add(
                                  wrdApp.Selection.Range, ref fieldEmpty, ref autoText, ref preserveFormatting);

                                foreach (Microsoft.Office.Interop.Word.Table oTable in wrdApp.ActiveDocument.Tables)
                                {
                                  oTable.AllowPageBreaks = false;
                                  oTable.Rows.AllowBreakAcrossPages = 0;
                                }
                MM*/
              }
            }
          }
          catch (Exception ex)
          {
            string log = ex.Message;

          }
        }

        try
        {
          wrdDoc.FieldsUpdate();

          if (printingword)
          {
            wrdDoc.PageSetupPaperSize = "A4"; //mm WdPaperSize.wdPaperA4;
            //wrdDoc.SaveAs(filename + ".doc", WdSaveFormat.wdFormatDocument);
            estensione = ".docx"; //MM fileNameCompleto = titoloFile + estensione;
            wrdDoc.SaveAs(titoloFile + estensione, fileNameCompleto, "WdSaveFormat.wdFormatDocument");
          }
          else
          {
            string fileFormat = "WdSaveFormat.wdFormatPDF";

            //FileInfo fif = new FileInfo(filename + ".pdf");
            //while (fif.Exists)
            //{
            //  filename = filename + "1";
            //  fif = new FileInfo(filename + ".pdf");
            //}
            //wrdDoc.PageSetup.PaperSize = WdPaperSize.wdPaperA4;
            //wrdDoc.SaveAs(filename + ".pdf", fileFormat);
            estensione = ".pdf"; //MM fileNameCompleto = titoloFile + estensione;
            FileInfo fif = new FileInfo(titoloFile + ".pdf");
            while (fif.Exists)
            {
              //filename = filename + "1";
              //fif = new FileInfo(filename + ".pdf");
              titoloFile = titoloFile + "1"; //fileNameCompleto = titoloFile + estensione;
              fif = new FileInfo(titoloFile + ".pdf");
            }
            wrdDoc.PageSetupPaperSize = "A4"; //MMWdPaperSize.wdPaperA4;
            //wrdDoc.SaveAs(filename + ".pdf", fileFormat);
            wrdDoc.SaveAs(titoloFile + ".pdf", fileNameCompleto, fileFormat);
          }

          Object oMissing2 = System.Reflection.Missing.Value;

          //MM inserito codice al posto di quello sotto
          estensione = printingword ? ".docx" : ".pdf";
          fileNameCompleto = titoloFile + estensione;

          System.Diagnostics.Process.Start(new System.Diagnostics.ProcessStartInfo(fileNameCompleto) { UseShellExecute = true });

          /*MM
            //FileInfo fi = new FileInfo( filename + ".rtf" );
            //if ( fi.Exists )
            //{
            //    fi.Delete();
            //}

            //System.Diagnostics.Process.Start( filename + ".pdf");


            Process process = new Process();
            process.Refresh();
            //if (printingword)
            //{
            //  process.StartInfo.FileName = filename + ".doc";
            //}
            //else
            //{
            //  process.StartInfo.FileName = filename + ".pdf";
            //}
            estensione = printingword ? ".doc" : ".pdf";
            fileNameCompleto = titoloFile + estensione;
            process.StartInfo.FileName = fileNameCompleto;

            process.StartInfo.WindowStyle = ProcessWindowStyle.Maximized;
            process.StartInfo.ErrorDialog = false;
            process.StartInfo.Verb = "open";
            if (pw != null) { pw.Close(); pw = null; }
            process.Start();
            //process.WaitForInputIdle(2000);

            IntPtr hWnd = process.MainWindowHandle;
            SetFocus(hWnd);
            SetForegroundWindow(hWnd);
            */
        }
        catch (Exception ex)
        {
          string log = ex.Message;

          //FileInfo fi = new FileInfo( filename + ".rtf" );
          //if ( fi.Exists )
          //{
          //    fi.Delete();
          //}
        }
      }
      else
      {
        //ConvertRtfToDocx(filename + ".rtf", filename + ".docx");
        ConvertRtfToDocx(titoloFile + ".rtf", titoloFile + ".docx");

        if (Watermark && !StampaRelazioneGenerica && !StampaLetteraIncarico
          && !StampaLetteraAttestazione && !StampaManagementLetter
          && !StampaCodiceEtico)
        {
          if (Fascicolo)
          {
          }
        }

        try
        {
          //MM inserito codice al posto di quello sotto
          estensione = ".docx"; fileNameCompleto = titoloFile + estensione;
          fileNameCompleto = titoloFile + estensione;

          System.Diagnostics.Process.Start(new System.Diagnostics.ProcessStartInfo(fileNameCompleto) { UseShellExecute = true });

          /*MM
            Process process = new Process();
            process.Refresh();
            //process.StartInfo.FileName = filename + ".docx";
            estensione = ".docx"; fileNameCompleto = titoloFile + estensione;
            process.StartInfo.FileName = fileNameCompleto;

            process.StartInfo.WindowStyle = ProcessWindowStyle.Maximized;
            process.StartInfo.ErrorDialog = false;
            process.StartInfo.Verb = "open";
            if (pw != null) { pw.Close(); pw = null; }
            process.Start();
            //process.WaitForInputIdle(2000);

            IntPtr hWnd = process.MainWindowHandle;
            SetFocus(hWnd);
            SetForegroundWindow(hWnd);
           */
        }
        catch (Exception ex)
        {
          string log = ex.Message;

          //FileInfo fi = new FileInfo( filename + ".rtf" );
          //if ( fi.Exists )
          //{
          //    fi.Delete();
          //}
        }
      }
      if (!StampaTemporanea)
      {
        estensione = ".rtf";
        fileNameCompleto = titoloFile + estensione;
        FileInfo fi = new FileInfo(fileNameCompleto);
        if (fi.Exists) fi.Delete();
      }

      #endregion
    }

    [DllImport("user32.dll", CharSet = CharSet.Auto, SetLastError = true)]
    public static extern bool SetForegroundWindow(IntPtr hWnd);
    [DllImport("user32.dll", CharSet = CharSet.Auto, SetLastError = true)]
    public static extern IntPtr SetFocus(IntPtr hWnd);

    public void Close()
    {

    }


    private void ConvertRtfToDocx(string nomefileConvertire, string nomefileConvertito)
    {


      using (WordprocessingDocument doc = WordprocessingDocument.Create(nomefileConvertito, DocumentFormat.OpenXml.WordprocessingDocumentType.Document))
      {

        // Add a main document part. 
        MainDocumentPart mainPart = doc.AddMainDocumentPart();

        // Create the document structure and add some text.
        mainPart.Document = new DocumentFormat.OpenXml.Wordprocessing.Document();


        string settingTemplate = @"<w:settings xmlns:o=""urn:schemas-microsoft-com:office:office"" xmlns:r=""http://schemas.openxmlformats.org/officeDocument/2006/relationships"" xmlns:m=""http://schemas.openxmlformats.org/officeDocument/2006/math"" xmlns:v=""urn:schemas-microsoft-com:vm"" xmlns:w10=""urn:schemas-microsoft-com:office:word"" xmlns:w=""http://schemas.openxmlformats.org/wordprocessingml/2006/main"" xmlns:sl=""http://schemas.openxmlformats.org/schemaLibrary/2006/main"">
                 <w:defaultTabStop w:val=""475""/>
                 <w:compat>
                 <w:compatSetting w:name=""compatibilityMode"" w:uri=""http://schemas.microsoft.com/office/word"" w:val=""14""/>
                 </w:compat>
                </w:settings>";


        DocumentSettingsPart settingsPart = mainPart.AddNewPart<DocumentSettingsPart>();// doc.MainDocumentPart.GetPartsOfType<DocumentSettingsPart>().First();

        UpdateFieldsOnOpen updateFields = new UpdateFieldsOnOpen();
        updateFields.Val = new DocumentFormat.OpenXml.OnOffValue(true);

        var streamSettingTemplate = new MemoryStream();
        var writer = new StreamWriter(streamSettingTemplate);
        writer.Write(settingTemplate);
        writer.Flush();
        streamSettingTemplate.Position = 0;

        settingsPart.FeedData(streamSettingTemplate);
        settingsPart.Settings.PrependChild<UpdateFieldsOnOpen>(updateFields);
        settingsPart.Settings.Save();

        mainPart.DeletePart(mainPart.StyleDefinitionsPart);

        // Create a new header and footer part
        StyleDefinitionsPart stylePart = mainPart.AddNewPart<StyleDefinitionsPart>();
        CreateStyleDefinitionsPart(stylePart);

        DocumentFormat.OpenXml.Wordprocessing.Run run = new DocumentFormat.OpenXml.Wordprocessing.Run();

        DocumentFormat.OpenXml.Wordprocessing.Paragraph paragraph = new DocumentFormat.OpenXml.Wordprocessing.Paragraph(run);
        Body body = new Body(paragraph);


        mainPart.Document.Append(body);

        RunProperties runProp = new RunProperties(); // Create run properties.
        RunFonts runFont = new RunFonts();           // Create font
        runFont.Ascii = "Cambria";                     // Specify font family

        FontSize size = new FontSize();
        size.Val = new StringValue("24");  // 48 half-point font size
        runProp.Append(runFont);
        runProp.Append(size);

        run.PrependChild<RunProperties>(runProp);








      }

      using (WordprocessingDocument wordDocument = WordprocessingDocument.Open(nomefileConvertito, true))
      {

        string altChunkId = "AltChunkId5";

        MainDocumentPart mainDocPart = wordDocument.MainDocumentPart;
        AlternativeFormatImportPart chunk = mainDocPart.AddAlternativeFormatImportPart(AlternativeFormatImportPartType.Rtf, altChunkId);

        // Read RTF document content.
        string rtfDocumentContent = File.ReadAllText(nomefileConvertire, Encoding.ASCII);

        using (MemoryStream ms = new MemoryStream(Encoding.ASCII.GetBytes(rtfDocumentContent)))
        {
          chunk.FeedData(ms);
        }

        AltChunk altChunk = new AltChunk();
        altChunk.Id = altChunkId;

        // Embed AltChunk after the last paragraph.
        mainDocPart.Document.Body.InsertAfter(altChunk, mainDocPart.Document.Body.Elements<DocumentFormat.OpenXml.Wordprocessing.Paragraph>().Last());

        // Get the main document part
        MainDocumentPart mainDocumentPart = wordDocument.MainDocumentPart;

        if (Fascicolo)
        {
          //Aggiunta Header con id

          DocumentFormat.OpenXml.Wordprocessing.Paragraph paragraph1 = new DocumentFormat.OpenXml.Wordprocessing.Paragraph() { };


          DocumentFormat.OpenXml.Wordprocessing.SectionProperties sectionProperties1 = mainDocPart.Document.Body.Descendants<DocumentFormat.OpenXml.Wordprocessing.SectionProperties>().FirstOrDefault();
          if (sectionProperties1 == null)
          {
            sectionProperties1 = new SectionProperties() { };
            mainDocPart.Document.Body.Append(sectionProperties1);
          }
          HeaderReference headerReference1 = new HeaderReference() { Type = HeaderFooterValues.Default, Id = "r97" };


          sectionProperties1.InsertAt(headerReference1, 0);

          // Delete the existing header and footer parts
          mainDocumentPart.DeleteParts(mainDocumentPart.HeaderParts);
          mainDocumentPart.DeleteParts(mainDocumentPart.FooterParts);

          // Create a new header and footer part
          HeaderPart headerPart = mainDocumentPart.AddNewPart<HeaderPart>("rId2");
          FooterPart footerPart = mainDocumentPart.AddNewPart<FooterPart>();


          // Get Id of the headerPart and footer parts
          string headerPartId = mainDocumentPart.GetIdOfPart(headerPart);
          string footerPartId = mainDocumentPart.GetIdOfPart(footerPart);

          GenerateHeaderPartContent(headerPart);
          GenerateFooterPartContent(footerPart);

          // Get SectionProperties and Replace HeaderReference and FooterRefernce with new Id
          IEnumerable<SectionProperties> sections = mainDocumentPart.Document.Body.Elements<SectionProperties>();

          foreach (var section in sections)
          {
            // Delete existing references to headers and footers
            section.RemoveAllChildren<HeaderReference>();
            section.RemoveAllChildren<FooterReference>();

            // Create the new header and footer reference node
            section.PrependChild<HeaderReference>(new HeaderReference() { Id = headerPartId });
            section.PrependChild<FooterReference>(new FooterReference() { Id = footerPartId });
          }
        }



        mainDocPart.Document.Save();
      }

    }

    public void GenerateHeaderPartContent(HeaderPart part)
    {
      GestioneLicenza gl = new GestioneLicenza();

      //Header header1 = new Header() { MCAttributes = new MarkupCompatibilityAttributes() { Ignorable = "w14 wp14" } };
      //header1.AddNamespaceDeclaration("wpc", "http://schemas.microsoft.com/office/word/2010/wordprocessingCanvas");
      //header1.AddNamespaceDeclaration("mc", "http://schemas.openxmlformats.org/markup-compatibility/2006");
      //header1.AddNamespaceDeclaration("o", "urn:schemas-microsoft-com:office:office");
      //header1.AddNamespaceDeclaration("r", "http://schemas.openxmlformats.org/officeDocument/2006/relationships");
      //header1.AddNamespaceDeclaration("m", "http://schemas.openxmlformats.org/officeDocument/2006/math");
      //header1.AddNamespaceDeclaration("v", "urn:schemas-microsoft-com:vml");
      //header1.AddNamespaceDeclaration("wp14", "http://schemas.microsoft.com/office/word/2010/wordprocessingDrawing");
      //header1.AddNamespaceDeclaration("wp", "http://schemas.openxmlformats.org/drawingml/2006/wordprocessingDrawing");
      //header1.AddNamespaceDeclaration("w10", "urn:schemas-microsoft-com:office:word");
      //header1.AddNamespaceDeclaration("w", "http://schemas.openxmlformats.org/wordprocessingml/2006/main");
      //header1.AddNamespaceDeclaration("w14", "http://schemas.microsoft.com/office/word/2010/wordml");
      //header1.AddNamespaceDeclaration("wpg", "http://schemas.microsoft.com/office/word/2010/wordprocessingGroup");
      //header1.AddNamespaceDeclaration("wpi", "http://schemas.microsoft.com/office/word/2010/wordprocessingInk");
      //header1.AddNamespaceDeclaration("wne", "http://schemas.microsoft.com/office/word/2006/wordml");
      //header1.AddNamespaceDeclaration("wps", "http://schemas.microsoft.com/office/word/2010/wordprocessingShape");

      //DocumentFormat.OpenXml.Wordprocessing.Paragraph paragraph1 = new DocumentFormat.OpenXml.Wordprocessing.Paragraph() { RsidParagraphAddition = "00164C17", RsidRunAdditionDefault = "00164C17" };

      //ParagraphProperties paragraphProperties1 = new ParagraphProperties();
      //ParagraphStyleId paragraphStyleId1 = new ParagraphStyleId() { Val = "Header" };

      //paragraphProperties1.Append(paragraphStyleId1);

      //Run run1 = new Run();
      //Text text1 = new Text();
      //string _Sessionehere = ((_Sessione.Contains("\r\n")) ? _Sessione.Replace("\r\n", "/").Replace("/Incarico", "").Replace("/Riesame", "") : _Sessione); //"Esercizio " + 
      //text1.Text = " \t\t " + _Cliente + " - CF: " + _CF + " - " + _Sessionehere + "";


      //run1.Append(text1);

      //run1.Append(new SimpleField() { Instruction = "PAGE" });

      //paragraph1.Append(paragraphProperties1);
      //paragraph1.Append(run1);

      //header1.Append(paragraph1);


      Header header1 = new Header() { MCAttributes = new MarkupCompatibilityAttributes() { Ignorable = "w14 w15 wp14" } };
      header1.AddNamespaceDeclaration("wpc", "http://schemas.microsoft.com/office/word/2010/wordprocessingCanvas");
      header1.AddNamespaceDeclaration("mc", "http://schemas.openxmlformats.org/markup-compatibility/2006");
      header1.AddNamespaceDeclaration("o", "urn:schemas-microsoft-com:office:office");
      header1.AddNamespaceDeclaration("r", "http://schemas.openxmlformats.org/officeDocument/2006/relationships");
      header1.AddNamespaceDeclaration("m", "http://schemas.openxmlformats.org/officeDocument/2006/math");
      header1.AddNamespaceDeclaration("v", "urn:schemas-microsoft-com:vml");
      header1.AddNamespaceDeclaration("wp14", "http://schemas.microsoft.com/office/word/2010/wordprocessingDrawing");
      header1.AddNamespaceDeclaration("wp", "http://schemas.openxmlformats.org/drawingml/2006/wordprocessingDrawing");
      header1.AddNamespaceDeclaration("w10", "urn:schemas-microsoft-com:office:word");
      header1.AddNamespaceDeclaration("w", "http://schemas.openxmlformats.org/wordprocessingml/2006/main");
      header1.AddNamespaceDeclaration("w14", "http://schemas.microsoft.com/office/word/2010/wordml");
      header1.AddNamespaceDeclaration("w15", "http://schemas.microsoft.com/office/word/2012/wordml");
      header1.AddNamespaceDeclaration("wpg", "http://schemas.microsoft.com/office/word/2010/wordprocessingGroup");
      header1.AddNamespaceDeclaration("wpi", "http://schemas.microsoft.com/office/word/2010/wordprocessingInk");
      header1.AddNamespaceDeclaration("wne", "http://schemas.microsoft.com/office/word/2006/wordml");
      header1.AddNamespaceDeclaration("wps", "http://schemas.microsoft.com/office/word/2010/wordprocessingShape");

      DocumentFormat.OpenXml.Wordprocessing.Paragraph paragraph1 = new DocumentFormat.OpenXml.Wordprocessing.Paragraph() { RsidParagraphMarkRevision = "0011539A", RsidParagraphAddition = "00111D7A", RsidParagraphProperties = "0011539A", RsidRunAdditionDefault = "0011539A" };

      ParagraphProperties paragraphProperties1 = new ParagraphProperties();
      ParagraphStyleId paragraphStyleId1 = new ParagraphStyleId() { Val = "Header" };

      ParagraphBorders paragraphBorders1 = new ParagraphBorders();
      BottomBorder bottomBorder1 = new BottomBorder() { Val = BorderValues.Single, Color = "auto", Size = (UInt32Value)4U, Space = (UInt32Value)0U };

      paragraphBorders1.Append(bottomBorder1);
      Justification justification1 = new Justification() { Val = JustificationValues.Center };

      ParagraphMarkRunProperties paragraphMarkRunProperties1 = new ParagraphMarkRunProperties();
      FontSize fontSize1 = new FontSize() { Val = "14" };

      paragraphMarkRunProperties1.Append(fontSize1);

      paragraphProperties1.Append(paragraphStyleId1);
      paragraphProperties1.Append(paragraphBorders1);
      paragraphProperties1.Append(justification1);
      paragraphProperties1.Append(paragraphMarkRunProperties1);

      DocumentFormat.OpenXml.Wordprocessing.Run run1 = new DocumentFormat.OpenXml.Wordprocessing.Run() { RsidRunProperties = "0011539A" };

      RunProperties runProperties1 = new RunProperties();
      NoProof noProof1 = new NoProof();
      FontSize fontSize2 = new FontSize() { Val = "14" };

      runProperties1.Append(noProof1);
      runProperties1.Append(fontSize2);
      Text text1 = new Text() { Space = SpaceProcessingModeValues.Preserve };
      text1.Text = " ";

      run1.Append(runProperties1);
      //run1.Append(text1);

      DocumentFormat.OpenXml.Wordprocessing.Run run2 = new DocumentFormat.OpenXml.Wordprocessing.Run() { RsidRunProperties = "0011539A" };

      RunProperties runProperties2 = new RunProperties();
      NoProof noProof2 = new NoProof();
      FontSize fontSize3 = new FontSize() { Val = "14" };

      runProperties2.Append(noProof2);
      runProperties2.Append(fontSize3);
      TabChar tabChar1 = new TabChar();

      run2.Append(runProperties2);
      run2.Append(tabChar1);

      DocumentFormat.OpenXml.Wordprocessing.Run run3 = new DocumentFormat.OpenXml.Wordprocessing.Run() { RsidRunProperties = "0011539A" };

      RunProperties runProperties3 = new RunProperties();
      NoProof noProof3 = new NoProof();
      FontSize fontSize4 = new FontSize() { Val = "14" };

      runProperties3.Append(noProof3);
      runProperties3.Append(fontSize4);
      TabChar tabChar2 = new TabChar();
      Text text2 = new Text() { Space = SpaceProcessingModeValues.Preserve };
      //string _Sessionehere = ((_Sessione.Contains("\r\n")) ? _Sessione.Replace("\r\n", "/").Replace("/Incarico", "").Replace("/Riesame", "") : _Sessione); //"Esercizio " + 
      //text2.Text = " \t\t " + _Cliente + " - CF: " + _CF + " - " + _Sessionehere + "";

      text2.Text = "" + _Cliente + " - CF: " + _CF + "";

      run3.Append(runProperties3);
      run3.Append(tabChar2);
      run3.Append(text2);

      paragraph1.Append(paragraphProperties1);
      paragraph1.Append(run1);
      paragraph1.Append(run2);
      paragraph1.Append(run3);

      header1.Append(paragraph1);


      part.Header = header1;
    }

    public void GenerateFooterPartContent(FooterPart part)
    {
      GestioneLicenza gl = new GestioneLicenza();

      //Footer footer1 = new Footer() { MCAttributes = new MarkupCompatibilityAttributes() { Ignorable = "w14 wp14" } };
      //footer1.AddNamespaceDeclaration("wpc", "http://schemas.microsoft.com/office/word/2010/wordprocessingCanvas");
      //footer1.AddNamespaceDeclaration("mc", "http://schemas.openxmlformats.org/markup-compatibility/2006");
      //footer1.AddNamespaceDeclaration("o", "urn:schemas-microsoft-com:office:office");
      //footer1.AddNamespaceDeclaration("r", "http://schemas.openxmlformats.org/officeDocument/2006/relationships");
      //footer1.AddNamespaceDeclaration("m", "http://schemas.openxmlformats.org/officeDocument/2006/math");
      //footer1.AddNamespaceDeclaration("v", "urn:schemas-microsoft-com:vml");
      //footer1.AddNamespaceDeclaration("wp14", "http://schemas.microsoft.com/office/word/2010/wordprocessingDrawing");
      //footer1.AddNamespaceDeclaration("wp", "http://schemas.openxmlformats.org/drawingml/2006/wordprocessingDrawing");
      //footer1.AddNamespaceDeclaration("w10", "urn:schemas-microsoft-com:office:word");
      //footer1.AddNamespaceDeclaration("w", "http://schemas.openxmlformats.org/wordprocessingml/2006/main");
      //footer1.AddNamespaceDeclaration("w14", "http://schemas.microsoft.com/office/word/2010/wordml");
      //footer1.AddNamespaceDeclaration("wpg", "http://schemas.microsoft.com/office/word/2010/wordprocessingGroup");
      //footer1.AddNamespaceDeclaration("wpi", "http://schemas.microsoft.com/office/word/2010/wordprocessingInk");
      //footer1.AddNamespaceDeclaration("wne", "http://schemas.microsoft.com/office/word/2006/wordml");
      //footer1.AddNamespaceDeclaration("wps", "http://schemas.microsoft.com/office/word/2010/wordprocessingShape");

      //DocumentFormat.OpenXml.Wordprocessing.Paragraph paragraph1 = new DocumentFormat.OpenXml.Wordprocessing.Paragraph() { RsidParagraphAddition = "00164C17", RsidRunAdditionDefault = "00164C17" };

      //ParagraphProperties paragraphProperties1 = new ParagraphProperties();
      //ParagraphStyleId paragraphStyleId1 = new ParagraphStyleId() { Val = "Footer" };

      //paragraphProperties1.Append(paragraphStyleId1);

      //Run run1 = new Run();
      //Text text1 = new Text();


      //text1.Text = "\rDocumento realizzato con REVISOFT® -Sindaci e Revisori - \tPag. ";
      //run1.Append(text1);
      //run1.Append(new SimpleField() { Instruction = "PAGE" });


      //paragraph1.Append(paragraphProperties1);
      //paragraph1.Append(run1);

      //footer1.Append(paragraph1);

      //part.Footer = footer1;


      Footer footer1 = new Footer() { MCAttributes = new MarkupCompatibilityAttributes() { Ignorable = "w14 w15 wp14" } };
      footer1.AddNamespaceDeclaration("wpc", "http://schemas.microsoft.com/office/word/2010/wordprocessingCanvas");
      footer1.AddNamespaceDeclaration("mc", "http://schemas.openxmlformats.org/markup-compatibility/2006");
      footer1.AddNamespaceDeclaration("o", "urn:schemas-microsoft-com:office:office");
      footer1.AddNamespaceDeclaration("r", "http://schemas.openxmlformats.org/officeDocument/2006/relationships");
      footer1.AddNamespaceDeclaration("m", "http://schemas.openxmlformats.org/officeDocument/2006/math");
      footer1.AddNamespaceDeclaration("v", "urn:schemas-microsoft-com:vml");
      footer1.AddNamespaceDeclaration("wp14", "http://schemas.microsoft.com/office/word/2010/wordprocessingDrawing");
      footer1.AddNamespaceDeclaration("wp", "http://schemas.openxmlformats.org/drawingml/2006/wordprocessingDrawing");
      footer1.AddNamespaceDeclaration("w10", "urn:schemas-microsoft-com:office:word");
      footer1.AddNamespaceDeclaration("w", "http://schemas.openxmlformats.org/wordprocessingml/2006/main");
      footer1.AddNamespaceDeclaration("w14", "http://schemas.microsoft.com/office/word/2010/wordml");
      footer1.AddNamespaceDeclaration("w15", "http://schemas.microsoft.com/office/word/2012/wordml");
      footer1.AddNamespaceDeclaration("wpg", "http://schemas.microsoft.com/office/word/2010/wordprocessingGroup");
      footer1.AddNamespaceDeclaration("wpi", "http://schemas.microsoft.com/office/word/2010/wordprocessingInk");
      footer1.AddNamespaceDeclaration("wne", "http://schemas.microsoft.com/office/word/2006/wordml");
      footer1.AddNamespaceDeclaration("wps", "http://schemas.microsoft.com/office/word/2010/wordprocessingShape");

      DocumentFormat.OpenXml.Wordprocessing.Paragraph paragraph1 = new DocumentFormat.OpenXml.Wordprocessing.Paragraph() { RsidParagraphAddition = "0011539A", RsidParagraphProperties = "0061409B", RsidRunAdditionDefault = "0011539A" };

      ParagraphProperties paragraphProperties1 = new ParagraphProperties();
      ParagraphStyleId paragraphStyleId1 = new ParagraphStyleId() { Val = "Footer" };

      ParagraphMarkRunProperties paragraphMarkRunProperties1 = new ParagraphMarkRunProperties();
      FontSize fontSize1 = new FontSize() { Val = "18" };
      FontSizeComplexScript fontSizeComplexScript1 = new FontSizeComplexScript() { Val = "18" };

      paragraphMarkRunProperties1.Append(fontSize1);
      paragraphMarkRunProperties1.Append(fontSizeComplexScript1);

      paragraphProperties1.Append(paragraphStyleId1);
      paragraphProperties1.Append(paragraphMarkRunProperties1);

      paragraph1.Append(paragraphProperties1);

      DocumentFormat.OpenXml.Wordprocessing.Paragraph paragraph2 = new DocumentFormat.OpenXml.Wordprocessing.Paragraph() { RsidParagraphMarkRevision = "00111D7A", RsidParagraphAddition = "00111D7A", RsidParagraphProperties = "0011539A", RsidRunAdditionDefault = "0011539A" };

      ParagraphProperties paragraphProperties2 = new ParagraphProperties();
      ParagraphStyleId paragraphStyleId2 = new ParagraphStyleId() { Val = "Footer" };

      ParagraphBorders paragraphBorders1 = new ParagraphBorders();
      TopBorder topBorder1 = new TopBorder() { Val = BorderValues.Single, Color = "auto", Size = (UInt32Value)4U, Space = (UInt32Value)0U };

      paragraphBorders1.Append(topBorder1);
      Justification justification1 = new Justification() { Val = JustificationValues.Center };

      paragraphProperties2.Append(paragraphStyleId2);
      paragraphProperties2.Append(paragraphBorders1);
      paragraphProperties2.Append(justification1);

      DocumentFormat.OpenXml.Wordprocessing.Run run1 = new DocumentFormat.OpenXml.Wordprocessing.Run();

      RunProperties runProperties1 = new RunProperties();
      FontSize fontSize2 = new FontSize() { Val = "18" };
      FontSizeComplexScript fontSizeComplexScript2 = new FontSizeComplexScript() { Val = "18" };

      runProperties1.Append(fontSize2);
      runProperties1.Append(fontSizeComplexScript2);
      Text text1 = new Text();
      text1.Text = "REVISOFT® -Sindaci e Revisori - Licenziatario: Studio Borelli - ";

      run1.Append(runProperties1);
      run1.Append(text1);

      DocumentFormat.OpenXml.Wordprocessing.Run run2 = new DocumentFormat.OpenXml.Wordprocessing.Run();

      RunProperties runProperties2 = new RunProperties();
      FontSize fontSize3 = new FontSize() { Val = "18" };
      FontSizeComplexScript fontSizeComplexScript3 = new FontSizeComplexScript() { Val = "18" };

      runProperties2.Append(fontSize3);
      runProperties2.Append(fontSizeComplexScript3);
      TabChar tabChar1 = new TabChar();
      Text text2 = new Text() { Space = SpaceProcessingModeValues.Preserve };
      text2.Text = "Pag. ";

      run2.Append(runProperties2);
      run2.Append(tabChar1);
      run2.Append(text2);

      DocumentFormat.OpenXml.Wordprocessing.Run run3 = new DocumentFormat.OpenXml.Wordprocessing.Run();

      RunProperties runProperties3 = new RunProperties();
      FontSize fontSize4 = new FontSize() { Val = "18" };
      FontSizeComplexScript fontSizeComplexScript4 = new FontSizeComplexScript() { Val = "18" };

      runProperties3.Append(fontSize4);
      runProperties3.Append(fontSizeComplexScript4);
      FieldChar fieldChar1 = new FieldChar() { FieldCharType = FieldCharValues.Begin };

      run3.Append(runProperties3);
      run3.Append(fieldChar1);

      DocumentFormat.OpenXml.Wordprocessing.Run run4 = new DocumentFormat.OpenXml.Wordprocessing.Run();

      RunProperties runProperties4 = new RunProperties();
      FontSize fontSize5 = new FontSize() { Val = "18" };
      FontSizeComplexScript fontSizeComplexScript5 = new FontSizeComplexScript() { Val = "18" };

      runProperties4.Append(fontSize5);
      runProperties4.Append(fontSizeComplexScript5);
      FieldCode fieldCode1 = new FieldCode() { Space = SpaceProcessingModeValues.Preserve };
      fieldCode1.Text = " PAGE  \\* MERGEFORMAT ";

      run4.Append(runProperties4);
      run4.Append(fieldCode1);

      DocumentFormat.OpenXml.Wordprocessing.Run run5 = new DocumentFormat.OpenXml.Wordprocessing.Run();

      RunProperties runProperties5 = new RunProperties();
      FontSize fontSize6 = new FontSize() { Val = "18" };
      FontSizeComplexScript fontSizeComplexScript6 = new FontSizeComplexScript() { Val = "18" };

      runProperties5.Append(fontSize6);
      runProperties5.Append(fontSizeComplexScript6);
      FieldChar fieldChar2 = new FieldChar() { FieldCharType = FieldCharValues.Separate };

      run5.Append(runProperties5);
      run5.Append(fieldChar2);

      DocumentFormat.OpenXml.Wordprocessing.Run run6 = new DocumentFormat.OpenXml.Wordprocessing.Run() { RsidRunAddition = "00285CB5" };

      RunProperties runProperties6 = new RunProperties();
      NoProof noProof1 = new NoProof();
      FontSize fontSize7 = new FontSize() { Val = "18" };
      FontSizeComplexScript fontSizeComplexScript7 = new FontSizeComplexScript() { Val = "18" };

      runProperties6.Append(noProof1);
      runProperties6.Append(fontSize7);
      runProperties6.Append(fontSizeComplexScript7);
      Text text3 = new Text();
      text3.Text = "20";

      run6.Append(runProperties6);
      run6.Append(text3);

      DocumentFormat.OpenXml.Wordprocessing.Run run7 = new DocumentFormat.OpenXml.Wordprocessing.Run();

      RunProperties runProperties7 = new RunProperties();
      FontSize fontSize8 = new FontSize() { Val = "18" };
      FontSizeComplexScript fontSizeComplexScript8 = new FontSizeComplexScript() { Val = "18" };

      runProperties7.Append(fontSize8);
      runProperties7.Append(fontSizeComplexScript8);
      FieldChar fieldChar3 = new FieldChar() { FieldCharType = FieldCharValues.End };

      run7.Append(runProperties7);
      run7.Append(fieldChar3);

      paragraph2.Append(paragraphProperties2);
      paragraph2.Append(run1);
      paragraph2.Append(run2);
      paragraph2.Append(run3);
      paragraph2.Append(run4);
      paragraph2.Append(run5);
      paragraph2.Append(run6);
      paragraph2.Append(run7);

      footer1.Append(paragraph1);
      footer1.Append(paragraph2);

      part.Footer = footer1;

    }

    #region Style Definition
    private void CreateStyleDefinitionsPart(StyleDefinitionsPart part)
    {
      DocumentFormat.OpenXml.Wordprocessing.Styles styles1 = new DocumentFormat.OpenXml.Wordprocessing.Styles() { MCAttributes = new MarkupCompatibilityAttributes() { Ignorable = "w14 w15" } };
      styles1.AddNamespaceDeclaration("mc", "http://schemas.openxmlformats.org/markup-compatibility/2006");
      styles1.AddNamespaceDeclaration("r", "http://schemas.openxmlformats.org/officeDocument/2006/relationships");
      styles1.AddNamespaceDeclaration("w", "http://schemas.openxmlformats.org/wordprocessingml/2006/main");
      styles1.AddNamespaceDeclaration("w14", "http://schemas.microsoft.com/office/word/2010/wordml");
      styles1.AddNamespaceDeclaration("w15", "http://schemas.microsoft.com/office/word/2012/wordml");

      DocDefaults docDefaults1 = new DocDefaults();

      RunPropertiesDefault runPropertiesDefault1 = new RunPropertiesDefault();

      RunPropertiesBaseStyle runPropertiesBaseStyle1 = new RunPropertiesBaseStyle();
      RunFonts runFonts1 = new RunFonts() { Ascii = "Times New Roman", HighAnsi = "Times New Roman", EastAsia = "Times New Roman", ComplexScript = "Times New Roman" };
      DocumentFormat.OpenXml.Wordprocessing.Languages languages1 = new DocumentFormat.OpenXml.Wordprocessing.Languages() { Val = "en-GB", EastAsia = "en-GB", Bidi = "ar-SA" };

      runPropertiesBaseStyle1.Append(runFonts1);
      runPropertiesBaseStyle1.Append(languages1);

      runPropertiesDefault1.Append(runPropertiesBaseStyle1);
      ParagraphPropertiesDefault paragraphPropertiesDefault1 = new ParagraphPropertiesDefault();

      docDefaults1.Append(runPropertiesDefault1);
      docDefaults1.Append(paragraphPropertiesDefault1);

      LatentStyles latentStyles1 = new LatentStyles() { DefaultLockedState = false, DefaultUiPriority = 99, DefaultSemiHidden = false, DefaultUnhideWhenUsed = false, DefaultPrimaryStyle = false, Count = 371 };
      LatentStyleExceptionInfo latentStyleExceptionInfo1 = new LatentStyleExceptionInfo() { Name = "Normal", UiPriority = 0, PrimaryStyle = true };
      LatentStyleExceptionInfo latentStyleExceptionInfo2 = new LatentStyleExceptionInfo() { Name = "heading 1", UiPriority = 9, PrimaryStyle = true };
      LatentStyleExceptionInfo latentStyleExceptionInfo3 = new LatentStyleExceptionInfo() { Name = "heading 2", UiPriority = 9, SemiHidden = true, UnhideWhenUsed = true, PrimaryStyle = true };
      LatentStyleExceptionInfo latentStyleExceptionInfo4 = new LatentStyleExceptionInfo() { Name = "heading 3", UiPriority = 9, SemiHidden = true, UnhideWhenUsed = true, PrimaryStyle = true };
      LatentStyleExceptionInfo latentStyleExceptionInfo5 = new LatentStyleExceptionInfo() { Name = "heading 4", UiPriority = 9, SemiHidden = true, UnhideWhenUsed = true, PrimaryStyle = true };
      LatentStyleExceptionInfo latentStyleExceptionInfo6 = new LatentStyleExceptionInfo() { Name = "heading 5", UiPriority = 9, SemiHidden = true, UnhideWhenUsed = true, PrimaryStyle = true };
      LatentStyleExceptionInfo latentStyleExceptionInfo7 = new LatentStyleExceptionInfo() { Name = "heading 6", UiPriority = 9, SemiHidden = true, UnhideWhenUsed = true, PrimaryStyle = true };
      LatentStyleExceptionInfo latentStyleExceptionInfo8 = new LatentStyleExceptionInfo() { Name = "heading 7", UiPriority = 9, PrimaryStyle = true };
      LatentStyleExceptionInfo latentStyleExceptionInfo9 = new LatentStyleExceptionInfo() { Name = "heading 8", UiPriority = 9, SemiHidden = true, UnhideWhenUsed = true, PrimaryStyle = true };
      LatentStyleExceptionInfo latentStyleExceptionInfo10 = new LatentStyleExceptionInfo() { Name = "heading 9", UiPriority = 9, SemiHidden = true, UnhideWhenUsed = true, PrimaryStyle = true };
      LatentStyleExceptionInfo latentStyleExceptionInfo11 = new LatentStyleExceptionInfo() { Name = "index 1", SemiHidden = true, UnhideWhenUsed = true };
      LatentStyleExceptionInfo latentStyleExceptionInfo12 = new LatentStyleExceptionInfo() { Name = "index 2", SemiHidden = true, UnhideWhenUsed = true };
      LatentStyleExceptionInfo latentStyleExceptionInfo13 = new LatentStyleExceptionInfo() { Name = "index 3", SemiHidden = true, UnhideWhenUsed = true };
      LatentStyleExceptionInfo latentStyleExceptionInfo14 = new LatentStyleExceptionInfo() { Name = "index 4", SemiHidden = true, UnhideWhenUsed = true };
      LatentStyleExceptionInfo latentStyleExceptionInfo15 = new LatentStyleExceptionInfo() { Name = "index 5", SemiHidden = true, UnhideWhenUsed = true };
      LatentStyleExceptionInfo latentStyleExceptionInfo16 = new LatentStyleExceptionInfo() { Name = "index 6", SemiHidden = true, UnhideWhenUsed = true };
      LatentStyleExceptionInfo latentStyleExceptionInfo17 = new LatentStyleExceptionInfo() { Name = "index 7", SemiHidden = true, UnhideWhenUsed = true };
      LatentStyleExceptionInfo latentStyleExceptionInfo18 = new LatentStyleExceptionInfo() { Name = "index 8", SemiHidden = true, UnhideWhenUsed = true };
      LatentStyleExceptionInfo latentStyleExceptionInfo19 = new LatentStyleExceptionInfo() { Name = "index 9", SemiHidden = true, UnhideWhenUsed = true };
      LatentStyleExceptionInfo latentStyleExceptionInfo20 = new LatentStyleExceptionInfo() { Name = "toc 1", UiPriority = 39, SemiHidden = true, UnhideWhenUsed = true };
      LatentStyleExceptionInfo latentStyleExceptionInfo21 = new LatentStyleExceptionInfo() { Name = "toc 2", UiPriority = 39, SemiHidden = true, UnhideWhenUsed = true };
      LatentStyleExceptionInfo latentStyleExceptionInfo22 = new LatentStyleExceptionInfo() { Name = "toc 3", UiPriority = 39, SemiHidden = true, UnhideWhenUsed = true };
      LatentStyleExceptionInfo latentStyleExceptionInfo23 = new LatentStyleExceptionInfo() { Name = "toc 4", UiPriority = 39, SemiHidden = true, UnhideWhenUsed = true };
      LatentStyleExceptionInfo latentStyleExceptionInfo24 = new LatentStyleExceptionInfo() { Name = "toc 5", UiPriority = 39, SemiHidden = true, UnhideWhenUsed = true };
      LatentStyleExceptionInfo latentStyleExceptionInfo25 = new LatentStyleExceptionInfo() { Name = "toc 6", UiPriority = 39, SemiHidden = true, UnhideWhenUsed = true };
      LatentStyleExceptionInfo latentStyleExceptionInfo26 = new LatentStyleExceptionInfo() { Name = "toc 7", UiPriority = 39, SemiHidden = true, UnhideWhenUsed = true };
      LatentStyleExceptionInfo latentStyleExceptionInfo27 = new LatentStyleExceptionInfo() { Name = "toc 8", UiPriority = 39, SemiHidden = true, UnhideWhenUsed = true };
      LatentStyleExceptionInfo latentStyleExceptionInfo28 = new LatentStyleExceptionInfo() { Name = "toc 9", UiPriority = 39, SemiHidden = true, UnhideWhenUsed = true };
      LatentStyleExceptionInfo latentStyleExceptionInfo29 = new LatentStyleExceptionInfo() { Name = "Normal Indent", SemiHidden = true, UnhideWhenUsed = true };
      LatentStyleExceptionInfo latentStyleExceptionInfo30 = new LatentStyleExceptionInfo() { Name = "footnote text", SemiHidden = true, UnhideWhenUsed = true };
      LatentStyleExceptionInfo latentStyleExceptionInfo31 = new LatentStyleExceptionInfo() { Name = "annotation text", SemiHidden = true, UnhideWhenUsed = true };
      LatentStyleExceptionInfo latentStyleExceptionInfo32 = new LatentStyleExceptionInfo() { Name = "header", SemiHidden = true, UnhideWhenUsed = true };
      LatentStyleExceptionInfo latentStyleExceptionInfo33 = new LatentStyleExceptionInfo() { Name = "footer", SemiHidden = true, UnhideWhenUsed = true };
      LatentStyleExceptionInfo latentStyleExceptionInfo34 = new LatentStyleExceptionInfo() { Name = "index heading", SemiHidden = true, UnhideWhenUsed = true };
      LatentStyleExceptionInfo latentStyleExceptionInfo35 = new LatentStyleExceptionInfo() { Name = "caption", UiPriority = 35, SemiHidden = true, UnhideWhenUsed = true, PrimaryStyle = true };
      LatentStyleExceptionInfo latentStyleExceptionInfo36 = new LatentStyleExceptionInfo() { Name = "table of figures", SemiHidden = true, UnhideWhenUsed = true };
      LatentStyleExceptionInfo latentStyleExceptionInfo37 = new LatentStyleExceptionInfo() { Name = "envelope address", SemiHidden = true, UnhideWhenUsed = true };
      LatentStyleExceptionInfo latentStyleExceptionInfo38 = new LatentStyleExceptionInfo() { Name = "envelope return", SemiHidden = true, UnhideWhenUsed = true };
      LatentStyleExceptionInfo latentStyleExceptionInfo39 = new LatentStyleExceptionInfo() { Name = "footnote reference", SemiHidden = true, UnhideWhenUsed = true };
      LatentStyleExceptionInfo latentStyleExceptionInfo40 = new LatentStyleExceptionInfo() { Name = "annotation reference", SemiHidden = true, UnhideWhenUsed = true };
      LatentStyleExceptionInfo latentStyleExceptionInfo41 = new LatentStyleExceptionInfo() { Name = "line number", SemiHidden = true, UnhideWhenUsed = true };
      LatentStyleExceptionInfo latentStyleExceptionInfo42 = new LatentStyleExceptionInfo() { Name = "page number", SemiHidden = true, UnhideWhenUsed = true };
      LatentStyleExceptionInfo latentStyleExceptionInfo43 = new LatentStyleExceptionInfo() { Name = "endnote reference", SemiHidden = true, UnhideWhenUsed = true };
      LatentStyleExceptionInfo latentStyleExceptionInfo44 = new LatentStyleExceptionInfo() { Name = "endnote text", SemiHidden = true, UnhideWhenUsed = true };
      LatentStyleExceptionInfo latentStyleExceptionInfo45 = new LatentStyleExceptionInfo() { Name = "table of authorities", SemiHidden = true, UnhideWhenUsed = true };
      LatentStyleExceptionInfo latentStyleExceptionInfo46 = new LatentStyleExceptionInfo() { Name = "macro", SemiHidden = true, UnhideWhenUsed = true };
      LatentStyleExceptionInfo latentStyleExceptionInfo47 = new LatentStyleExceptionInfo() { Name = "toa heading", SemiHidden = true, UnhideWhenUsed = true };
      LatentStyleExceptionInfo latentStyleExceptionInfo48 = new LatentStyleExceptionInfo() { Name = "List", SemiHidden = true, UnhideWhenUsed = true };
      LatentStyleExceptionInfo latentStyleExceptionInfo49 = new LatentStyleExceptionInfo() { Name = "List Bullet", SemiHidden = true, UnhideWhenUsed = true };
      LatentStyleExceptionInfo latentStyleExceptionInfo50 = new LatentStyleExceptionInfo() { Name = "List Number", SemiHidden = true, UnhideWhenUsed = true };
      LatentStyleExceptionInfo latentStyleExceptionInfo51 = new LatentStyleExceptionInfo() { Name = "List 2", SemiHidden = true, UnhideWhenUsed = true };
      LatentStyleExceptionInfo latentStyleExceptionInfo52 = new LatentStyleExceptionInfo() { Name = "List 3", SemiHidden = true, UnhideWhenUsed = true };
      LatentStyleExceptionInfo latentStyleExceptionInfo53 = new LatentStyleExceptionInfo() { Name = "List 4", SemiHidden = true, UnhideWhenUsed = true };
      LatentStyleExceptionInfo latentStyleExceptionInfo54 = new LatentStyleExceptionInfo() { Name = "List 5", SemiHidden = true, UnhideWhenUsed = true };
      LatentStyleExceptionInfo latentStyleExceptionInfo55 = new LatentStyleExceptionInfo() { Name = "List Bullet 2", SemiHidden = true, UnhideWhenUsed = true };
      LatentStyleExceptionInfo latentStyleExceptionInfo56 = new LatentStyleExceptionInfo() { Name = "List Bullet 3", SemiHidden = true, UnhideWhenUsed = true };
      LatentStyleExceptionInfo latentStyleExceptionInfo57 = new LatentStyleExceptionInfo() { Name = "List Bullet 4", SemiHidden = true, UnhideWhenUsed = true };
      LatentStyleExceptionInfo latentStyleExceptionInfo58 = new LatentStyleExceptionInfo() { Name = "List Bullet 5", SemiHidden = true, UnhideWhenUsed = true };
      LatentStyleExceptionInfo latentStyleExceptionInfo59 = new LatentStyleExceptionInfo() { Name = "List Number 2", SemiHidden = true, UnhideWhenUsed = true };
      LatentStyleExceptionInfo latentStyleExceptionInfo60 = new LatentStyleExceptionInfo() { Name = "List Number 3", SemiHidden = true, UnhideWhenUsed = true };
      LatentStyleExceptionInfo latentStyleExceptionInfo61 = new LatentStyleExceptionInfo() { Name = "List Number 4", SemiHidden = true, UnhideWhenUsed = true };
      LatentStyleExceptionInfo latentStyleExceptionInfo62 = new LatentStyleExceptionInfo() { Name = "List Number 5", SemiHidden = true, UnhideWhenUsed = true };
      LatentStyleExceptionInfo latentStyleExceptionInfo63 = new LatentStyleExceptionInfo() { Name = "Title", UiPriority = 10, PrimaryStyle = true };
      LatentStyleExceptionInfo latentStyleExceptionInfo64 = new LatentStyleExceptionInfo() { Name = "Closing", SemiHidden = true, UnhideWhenUsed = true };
      LatentStyleExceptionInfo latentStyleExceptionInfo65 = new LatentStyleExceptionInfo() { Name = "Signature", SemiHidden = true, UnhideWhenUsed = true };
      LatentStyleExceptionInfo latentStyleExceptionInfo66 = new LatentStyleExceptionInfo() { Name = "Default Paragraph Font", UiPriority = 1, SemiHidden = true, UnhideWhenUsed = true };
      LatentStyleExceptionInfo latentStyleExceptionInfo67 = new LatentStyleExceptionInfo() { Name = "Body Text", SemiHidden = true, UnhideWhenUsed = true };
      LatentStyleExceptionInfo latentStyleExceptionInfo68 = new LatentStyleExceptionInfo() { Name = "Body Text Indent", SemiHidden = true, UnhideWhenUsed = true };
      LatentStyleExceptionInfo latentStyleExceptionInfo69 = new LatentStyleExceptionInfo() { Name = "List Continue", SemiHidden = true, UnhideWhenUsed = true };
      LatentStyleExceptionInfo latentStyleExceptionInfo70 = new LatentStyleExceptionInfo() { Name = "List Continue 2", SemiHidden = true, UnhideWhenUsed = true };
      LatentStyleExceptionInfo latentStyleExceptionInfo71 = new LatentStyleExceptionInfo() { Name = "List Continue 3", SemiHidden = true, UnhideWhenUsed = true };
      LatentStyleExceptionInfo latentStyleExceptionInfo72 = new LatentStyleExceptionInfo() { Name = "List Continue 4", SemiHidden = true, UnhideWhenUsed = true };
      LatentStyleExceptionInfo latentStyleExceptionInfo73 = new LatentStyleExceptionInfo() { Name = "List Continue 5", SemiHidden = true, UnhideWhenUsed = true };
      LatentStyleExceptionInfo latentStyleExceptionInfo74 = new LatentStyleExceptionInfo() { Name = "Message Header", SemiHidden = true, UnhideWhenUsed = true };
      LatentStyleExceptionInfo latentStyleExceptionInfo75 = new LatentStyleExceptionInfo() { Name = "Subtitle", UiPriority = 11, PrimaryStyle = true };
      LatentStyleExceptionInfo latentStyleExceptionInfo76 = new LatentStyleExceptionInfo() { Name = "Salutation", SemiHidden = true, UnhideWhenUsed = true };
      LatentStyleExceptionInfo latentStyleExceptionInfo77 = new LatentStyleExceptionInfo() { Name = "Date", SemiHidden = true, UnhideWhenUsed = true };
      LatentStyleExceptionInfo latentStyleExceptionInfo78 = new LatentStyleExceptionInfo() { Name = "Body Text First Indent", SemiHidden = true, UnhideWhenUsed = true };
      LatentStyleExceptionInfo latentStyleExceptionInfo79 = new LatentStyleExceptionInfo() { Name = "Body Text First Indent 2", SemiHidden = true, UnhideWhenUsed = true };
      LatentStyleExceptionInfo latentStyleExceptionInfo80 = new LatentStyleExceptionInfo() { Name = "Note Heading", SemiHidden = true, UnhideWhenUsed = true };
      LatentStyleExceptionInfo latentStyleExceptionInfo81 = new LatentStyleExceptionInfo() { Name = "Body Text 2", SemiHidden = true, UnhideWhenUsed = true };
      LatentStyleExceptionInfo latentStyleExceptionInfo82 = new LatentStyleExceptionInfo() { Name = "Body Text 3", SemiHidden = true, UnhideWhenUsed = true };
      LatentStyleExceptionInfo latentStyleExceptionInfo83 = new LatentStyleExceptionInfo() { Name = "Body Text Indent 2", SemiHidden = true, UnhideWhenUsed = true };
      LatentStyleExceptionInfo latentStyleExceptionInfo84 = new LatentStyleExceptionInfo() { Name = "Body Text Indent 3", SemiHidden = true, UnhideWhenUsed = true };
      LatentStyleExceptionInfo latentStyleExceptionInfo85 = new LatentStyleExceptionInfo() { Name = "Block Text", UiPriority = 0, SemiHidden = true, UnhideWhenUsed = true };
      LatentStyleExceptionInfo latentStyleExceptionInfo86 = new LatentStyleExceptionInfo() { Name = "Hyperlink", SemiHidden = true, UnhideWhenUsed = true };
      LatentStyleExceptionInfo latentStyleExceptionInfo87 = new LatentStyleExceptionInfo() { Name = "FollowedHyperlink", SemiHidden = true, UnhideWhenUsed = true };
      LatentStyleExceptionInfo latentStyleExceptionInfo88 = new LatentStyleExceptionInfo() { Name = "Strong", UiPriority = 22, PrimaryStyle = true };
      LatentStyleExceptionInfo latentStyleExceptionInfo89 = new LatentStyleExceptionInfo() { Name = "Emphasis", UiPriority = 20, PrimaryStyle = true };
      LatentStyleExceptionInfo latentStyleExceptionInfo90 = new LatentStyleExceptionInfo() { Name = "Document Map", SemiHidden = true, UnhideWhenUsed = true };
      LatentStyleExceptionInfo latentStyleExceptionInfo91 = new LatentStyleExceptionInfo() { Name = "Plain Text", SemiHidden = true, UnhideWhenUsed = true };
      LatentStyleExceptionInfo latentStyleExceptionInfo92 = new LatentStyleExceptionInfo() { Name = "E-mail Signature", SemiHidden = true, UnhideWhenUsed = true };
      LatentStyleExceptionInfo latentStyleExceptionInfo93 = new LatentStyleExceptionInfo() { Name = "HTML Top of Form", SemiHidden = true, UnhideWhenUsed = true };
      LatentStyleExceptionInfo latentStyleExceptionInfo94 = new LatentStyleExceptionInfo() { Name = "HTML Bottom of Form", SemiHidden = true, UnhideWhenUsed = true };
      LatentStyleExceptionInfo latentStyleExceptionInfo95 = new LatentStyleExceptionInfo() { Name = "Normal (Web)", SemiHidden = true, UnhideWhenUsed = true };
      LatentStyleExceptionInfo latentStyleExceptionInfo96 = new LatentStyleExceptionInfo() { Name = "HTML Acronym", SemiHidden = true, UnhideWhenUsed = true };
      LatentStyleExceptionInfo latentStyleExceptionInfo97 = new LatentStyleExceptionInfo() { Name = "HTML Address", SemiHidden = true, UnhideWhenUsed = true };
      LatentStyleExceptionInfo latentStyleExceptionInfo98 = new LatentStyleExceptionInfo() { Name = "HTML Cite", SemiHidden = true, UnhideWhenUsed = true };
      LatentStyleExceptionInfo latentStyleExceptionInfo99 = new LatentStyleExceptionInfo() { Name = "HTML Code", SemiHidden = true, UnhideWhenUsed = true };
      LatentStyleExceptionInfo latentStyleExceptionInfo100 = new LatentStyleExceptionInfo() { Name = "HTML Definition", SemiHidden = true, UnhideWhenUsed = true };
      LatentStyleExceptionInfo latentStyleExceptionInfo101 = new LatentStyleExceptionInfo() { Name = "HTML Keyboard", SemiHidden = true, UnhideWhenUsed = true };
      LatentStyleExceptionInfo latentStyleExceptionInfo102 = new LatentStyleExceptionInfo() { Name = "HTML Preformatted", SemiHidden = true, UnhideWhenUsed = true };
      LatentStyleExceptionInfo latentStyleExceptionInfo103 = new LatentStyleExceptionInfo() { Name = "HTML Sample", SemiHidden = true, UnhideWhenUsed = true };
      LatentStyleExceptionInfo latentStyleExceptionInfo104 = new LatentStyleExceptionInfo() { Name = "HTML Typewriter", SemiHidden = true, UnhideWhenUsed = true };
      LatentStyleExceptionInfo latentStyleExceptionInfo105 = new LatentStyleExceptionInfo() { Name = "HTML Variable", SemiHidden = true, UnhideWhenUsed = true };
      LatentStyleExceptionInfo latentStyleExceptionInfo106 = new LatentStyleExceptionInfo() { Name = "Normal Table", SemiHidden = true, UnhideWhenUsed = true };
      LatentStyleExceptionInfo latentStyleExceptionInfo107 = new LatentStyleExceptionInfo() { Name = "annotation subject", SemiHidden = true, UnhideWhenUsed = true };
      LatentStyleExceptionInfo latentStyleExceptionInfo108 = new LatentStyleExceptionInfo() { Name = "No List", SemiHidden = true, UnhideWhenUsed = true };
      LatentStyleExceptionInfo latentStyleExceptionInfo109 = new LatentStyleExceptionInfo() { Name = "Outline List 1", SemiHidden = true, UnhideWhenUsed = true };
      LatentStyleExceptionInfo latentStyleExceptionInfo110 = new LatentStyleExceptionInfo() { Name = "Outline List 2", SemiHidden = true, UnhideWhenUsed = true };
      LatentStyleExceptionInfo latentStyleExceptionInfo111 = new LatentStyleExceptionInfo() { Name = "Outline List 3", SemiHidden = true, UnhideWhenUsed = true };
      LatentStyleExceptionInfo latentStyleExceptionInfo112 = new LatentStyleExceptionInfo() { Name = "Table Simple 1", SemiHidden = true, UnhideWhenUsed = true };
      LatentStyleExceptionInfo latentStyleExceptionInfo113 = new LatentStyleExceptionInfo() { Name = "Table Simple 2", SemiHidden = true, UnhideWhenUsed = true };
      LatentStyleExceptionInfo latentStyleExceptionInfo114 = new LatentStyleExceptionInfo() { Name = "Table Simple 3", SemiHidden = true, UnhideWhenUsed = true };
      LatentStyleExceptionInfo latentStyleExceptionInfo115 = new LatentStyleExceptionInfo() { Name = "Table Classic 1", SemiHidden = true, UnhideWhenUsed = true };
      LatentStyleExceptionInfo latentStyleExceptionInfo116 = new LatentStyleExceptionInfo() { Name = "Table Classic 2", SemiHidden = true, UnhideWhenUsed = true };
      LatentStyleExceptionInfo latentStyleExceptionInfo117 = new LatentStyleExceptionInfo() { Name = "Table Classic 3", SemiHidden = true, UnhideWhenUsed = true };
      LatentStyleExceptionInfo latentStyleExceptionInfo118 = new LatentStyleExceptionInfo() { Name = "Table Classic 4", SemiHidden = true, UnhideWhenUsed = true };
      LatentStyleExceptionInfo latentStyleExceptionInfo119 = new LatentStyleExceptionInfo() { Name = "Table Colorful 1", SemiHidden = true, UnhideWhenUsed = true };
      LatentStyleExceptionInfo latentStyleExceptionInfo120 = new LatentStyleExceptionInfo() { Name = "Table Colorful 2", SemiHidden = true, UnhideWhenUsed = true };
      LatentStyleExceptionInfo latentStyleExceptionInfo121 = new LatentStyleExceptionInfo() { Name = "Table Colorful 3", SemiHidden = true, UnhideWhenUsed = true };
      LatentStyleExceptionInfo latentStyleExceptionInfo122 = new LatentStyleExceptionInfo() { Name = "Table Columns 1", SemiHidden = true, UnhideWhenUsed = true };
      LatentStyleExceptionInfo latentStyleExceptionInfo123 = new LatentStyleExceptionInfo() { Name = "Table Columns 2", SemiHidden = true, UnhideWhenUsed = true };
      LatentStyleExceptionInfo latentStyleExceptionInfo124 = new LatentStyleExceptionInfo() { Name = "Table Columns 3", SemiHidden = true, UnhideWhenUsed = true };
      LatentStyleExceptionInfo latentStyleExceptionInfo125 = new LatentStyleExceptionInfo() { Name = "Table Columns 4", SemiHidden = true, UnhideWhenUsed = true };
      LatentStyleExceptionInfo latentStyleExceptionInfo126 = new LatentStyleExceptionInfo() { Name = "Table Columns 5", SemiHidden = true, UnhideWhenUsed = true };
      LatentStyleExceptionInfo latentStyleExceptionInfo127 = new LatentStyleExceptionInfo() { Name = "Table Grid 1", SemiHidden = true, UnhideWhenUsed = true };
      LatentStyleExceptionInfo latentStyleExceptionInfo128 = new LatentStyleExceptionInfo() { Name = "Table Grid 2", SemiHidden = true, UnhideWhenUsed = true };
      LatentStyleExceptionInfo latentStyleExceptionInfo129 = new LatentStyleExceptionInfo() { Name = "Table Grid 3", SemiHidden = true, UnhideWhenUsed = true };
      LatentStyleExceptionInfo latentStyleExceptionInfo130 = new LatentStyleExceptionInfo() { Name = "Table Grid 4", SemiHidden = true, UnhideWhenUsed = true };
      LatentStyleExceptionInfo latentStyleExceptionInfo131 = new LatentStyleExceptionInfo() { Name = "Table Grid 5", SemiHidden = true, UnhideWhenUsed = true };
      LatentStyleExceptionInfo latentStyleExceptionInfo132 = new LatentStyleExceptionInfo() { Name = "Table Grid 6", SemiHidden = true, UnhideWhenUsed = true };
      LatentStyleExceptionInfo latentStyleExceptionInfo133 = new LatentStyleExceptionInfo() { Name = "Table Grid 7", SemiHidden = true, UnhideWhenUsed = true };
      LatentStyleExceptionInfo latentStyleExceptionInfo134 = new LatentStyleExceptionInfo() { Name = "Table Grid 8", SemiHidden = true, UnhideWhenUsed = true };
      LatentStyleExceptionInfo latentStyleExceptionInfo135 = new LatentStyleExceptionInfo() { Name = "Table List 1", SemiHidden = true, UnhideWhenUsed = true };
      LatentStyleExceptionInfo latentStyleExceptionInfo136 = new LatentStyleExceptionInfo() { Name = "Table List 2", SemiHidden = true, UnhideWhenUsed = true };
      LatentStyleExceptionInfo latentStyleExceptionInfo137 = new LatentStyleExceptionInfo() { Name = "Table List 3", SemiHidden = true, UnhideWhenUsed = true };
      LatentStyleExceptionInfo latentStyleExceptionInfo138 = new LatentStyleExceptionInfo() { Name = "Table List 4", SemiHidden = true, UnhideWhenUsed = true };
      LatentStyleExceptionInfo latentStyleExceptionInfo139 = new LatentStyleExceptionInfo() { Name = "Table List 5", SemiHidden = true, UnhideWhenUsed = true };
      LatentStyleExceptionInfo latentStyleExceptionInfo140 = new LatentStyleExceptionInfo() { Name = "Table List 6", SemiHidden = true, UnhideWhenUsed = true };
      LatentStyleExceptionInfo latentStyleExceptionInfo141 = new LatentStyleExceptionInfo() { Name = "Table List 7", SemiHidden = true, UnhideWhenUsed = true };
      LatentStyleExceptionInfo latentStyleExceptionInfo142 = new LatentStyleExceptionInfo() { Name = "Table List 8", SemiHidden = true, UnhideWhenUsed = true };
      LatentStyleExceptionInfo latentStyleExceptionInfo143 = new LatentStyleExceptionInfo() { Name = "Table 3D effects 1", SemiHidden = true, UnhideWhenUsed = true };
      LatentStyleExceptionInfo latentStyleExceptionInfo144 = new LatentStyleExceptionInfo() { Name = "Table 3D effects 2", SemiHidden = true, UnhideWhenUsed = true };
      LatentStyleExceptionInfo latentStyleExceptionInfo145 = new LatentStyleExceptionInfo() { Name = "Table 3D effects 3", SemiHidden = true, UnhideWhenUsed = true };
      LatentStyleExceptionInfo latentStyleExceptionInfo146 = new LatentStyleExceptionInfo() { Name = "Table Contemporary", SemiHidden = true, UnhideWhenUsed = true };
      LatentStyleExceptionInfo latentStyleExceptionInfo147 = new LatentStyleExceptionInfo() { Name = "Table Elegant", SemiHidden = true, UnhideWhenUsed = true };
      LatentStyleExceptionInfo latentStyleExceptionInfo148 = new LatentStyleExceptionInfo() { Name = "Table Professional", SemiHidden = true, UnhideWhenUsed = true };
      LatentStyleExceptionInfo latentStyleExceptionInfo149 = new LatentStyleExceptionInfo() { Name = "Table Subtle 1", SemiHidden = true, UnhideWhenUsed = true };
      LatentStyleExceptionInfo latentStyleExceptionInfo150 = new LatentStyleExceptionInfo() { Name = "Table Subtle 2", SemiHidden = true, UnhideWhenUsed = true };
      LatentStyleExceptionInfo latentStyleExceptionInfo151 = new LatentStyleExceptionInfo() { Name = "Table Web 1", SemiHidden = true, UnhideWhenUsed = true };
      LatentStyleExceptionInfo latentStyleExceptionInfo152 = new LatentStyleExceptionInfo() { Name = "Table Web 2", SemiHidden = true, UnhideWhenUsed = true };
      LatentStyleExceptionInfo latentStyleExceptionInfo153 = new LatentStyleExceptionInfo() { Name = "Table Web 3", SemiHidden = true, UnhideWhenUsed = true };
      LatentStyleExceptionInfo latentStyleExceptionInfo154 = new LatentStyleExceptionInfo() { Name = "Balloon Text", SemiHidden = true, UnhideWhenUsed = true };
      LatentStyleExceptionInfo latentStyleExceptionInfo155 = new LatentStyleExceptionInfo() { Name = "Table Grid", UiPriority = 0 };
      LatentStyleExceptionInfo latentStyleExceptionInfo156 = new LatentStyleExceptionInfo() { Name = "Table Theme", SemiHidden = true, UnhideWhenUsed = true };
      LatentStyleExceptionInfo latentStyleExceptionInfo157 = new LatentStyleExceptionInfo() { Name = "Placeholder Text", SemiHidden = true };
      LatentStyleExceptionInfo latentStyleExceptionInfo158 = new LatentStyleExceptionInfo() { Name = "No Spacing", UiPriority = 1, PrimaryStyle = true };
      LatentStyleExceptionInfo latentStyleExceptionInfo159 = new LatentStyleExceptionInfo() { Name = "Light Shading", UiPriority = 60 };
      LatentStyleExceptionInfo latentStyleExceptionInfo160 = new LatentStyleExceptionInfo() { Name = "Light List", UiPriority = 61 };
      LatentStyleExceptionInfo latentStyleExceptionInfo161 = new LatentStyleExceptionInfo() { Name = "Light Grid", UiPriority = 62 };
      LatentStyleExceptionInfo latentStyleExceptionInfo162 = new LatentStyleExceptionInfo() { Name = "Medium Shading 1", UiPriority = 63 };
      LatentStyleExceptionInfo latentStyleExceptionInfo163 = new LatentStyleExceptionInfo() { Name = "Medium Shading 2", UiPriority = 64 };
      LatentStyleExceptionInfo latentStyleExceptionInfo164 = new LatentStyleExceptionInfo() { Name = "Medium List 1", UiPriority = 65 };
      LatentStyleExceptionInfo latentStyleExceptionInfo165 = new LatentStyleExceptionInfo() { Name = "Medium List 2", UiPriority = 66 };
      LatentStyleExceptionInfo latentStyleExceptionInfo166 = new LatentStyleExceptionInfo() { Name = "Medium Grid 1", UiPriority = 67 };
      LatentStyleExceptionInfo latentStyleExceptionInfo167 = new LatentStyleExceptionInfo() { Name = "Medium Grid 2", UiPriority = 68 };
      LatentStyleExceptionInfo latentStyleExceptionInfo168 = new LatentStyleExceptionInfo() { Name = "Medium Grid 3", UiPriority = 69 };
      LatentStyleExceptionInfo latentStyleExceptionInfo169 = new LatentStyleExceptionInfo() { Name = "Dark List", UiPriority = 70 };
      LatentStyleExceptionInfo latentStyleExceptionInfo170 = new LatentStyleExceptionInfo() { Name = "Colorful Shading", UiPriority = 71 };
      LatentStyleExceptionInfo latentStyleExceptionInfo171 = new LatentStyleExceptionInfo() { Name = "Colorful List", UiPriority = 72 };
      LatentStyleExceptionInfo latentStyleExceptionInfo172 = new LatentStyleExceptionInfo() { Name = "Colorful Grid", UiPriority = 73 };
      LatentStyleExceptionInfo latentStyleExceptionInfo173 = new LatentStyleExceptionInfo() { Name = "Light Shading Accent 1", UiPriority = 60 };
      LatentStyleExceptionInfo latentStyleExceptionInfo174 = new LatentStyleExceptionInfo() { Name = "Light List Accent 1", UiPriority = 61 };
      LatentStyleExceptionInfo latentStyleExceptionInfo175 = new LatentStyleExceptionInfo() { Name = "Light Grid Accent 1", UiPriority = 62 };
      LatentStyleExceptionInfo latentStyleExceptionInfo176 = new LatentStyleExceptionInfo() { Name = "Medium Shading 1 Accent 1", UiPriority = 63 };
      LatentStyleExceptionInfo latentStyleExceptionInfo177 = new LatentStyleExceptionInfo() { Name = "Medium Shading 2 Accent 1", UiPriority = 64 };
      LatentStyleExceptionInfo latentStyleExceptionInfo178 = new LatentStyleExceptionInfo() { Name = "Medium List 1 Accent 1", UiPriority = 65 };
      LatentStyleExceptionInfo latentStyleExceptionInfo179 = new LatentStyleExceptionInfo() { Name = "Revision", SemiHidden = true };
      LatentStyleExceptionInfo latentStyleExceptionInfo180 = new LatentStyleExceptionInfo() { Name = "List Paragraph", UiPriority = 34, PrimaryStyle = true };
      LatentStyleExceptionInfo latentStyleExceptionInfo181 = new LatentStyleExceptionInfo() { Name = "Quote", UiPriority = 29, PrimaryStyle = true };
      LatentStyleExceptionInfo latentStyleExceptionInfo182 = new LatentStyleExceptionInfo() { Name = "Intense Quote", UiPriority = 30, PrimaryStyle = true };
      LatentStyleExceptionInfo latentStyleExceptionInfo183 = new LatentStyleExceptionInfo() { Name = "Medium List 2 Accent 1", UiPriority = 66 };
      LatentStyleExceptionInfo latentStyleExceptionInfo184 = new LatentStyleExceptionInfo() { Name = "Medium Grid 1 Accent 1", UiPriority = 67 };
      LatentStyleExceptionInfo latentStyleExceptionInfo185 = new LatentStyleExceptionInfo() { Name = "Medium Grid 2 Accent 1", UiPriority = 68 };
      LatentStyleExceptionInfo latentStyleExceptionInfo186 = new LatentStyleExceptionInfo() { Name = "Medium Grid 3 Accent 1", UiPriority = 69 };
      LatentStyleExceptionInfo latentStyleExceptionInfo187 = new LatentStyleExceptionInfo() { Name = "Dark List Accent 1", UiPriority = 70 };
      LatentStyleExceptionInfo latentStyleExceptionInfo188 = new LatentStyleExceptionInfo() { Name = "Colorful Shading Accent 1", UiPriority = 71 };
      LatentStyleExceptionInfo latentStyleExceptionInfo189 = new LatentStyleExceptionInfo() { Name = "Colorful List Accent 1", UiPriority = 72 };
      LatentStyleExceptionInfo latentStyleExceptionInfo190 = new LatentStyleExceptionInfo() { Name = "Colorful Grid Accent 1", UiPriority = 73 };
      LatentStyleExceptionInfo latentStyleExceptionInfo191 = new LatentStyleExceptionInfo() { Name = "Light Shading Accent 2", UiPriority = 60 };
      LatentStyleExceptionInfo latentStyleExceptionInfo192 = new LatentStyleExceptionInfo() { Name = "Light List Accent 2", UiPriority = 61 };
      LatentStyleExceptionInfo latentStyleExceptionInfo193 = new LatentStyleExceptionInfo() { Name = "Light Grid Accent 2", UiPriority = 62 };
      LatentStyleExceptionInfo latentStyleExceptionInfo194 = new LatentStyleExceptionInfo() { Name = "Medium Shading 1 Accent 2", UiPriority = 63 };
      LatentStyleExceptionInfo latentStyleExceptionInfo195 = new LatentStyleExceptionInfo() { Name = "Medium Shading 2 Accent 2", UiPriority = 64 };
      LatentStyleExceptionInfo latentStyleExceptionInfo196 = new LatentStyleExceptionInfo() { Name = "Medium List 1 Accent 2", UiPriority = 65 };
      LatentStyleExceptionInfo latentStyleExceptionInfo197 = new LatentStyleExceptionInfo() { Name = "Medium List 2 Accent 2", UiPriority = 66 };
      LatentStyleExceptionInfo latentStyleExceptionInfo198 = new LatentStyleExceptionInfo() { Name = "Medium Grid 1 Accent 2", UiPriority = 67 };
      LatentStyleExceptionInfo latentStyleExceptionInfo199 = new LatentStyleExceptionInfo() { Name = "Medium Grid 2 Accent 2", UiPriority = 68 };
      LatentStyleExceptionInfo latentStyleExceptionInfo200 = new LatentStyleExceptionInfo() { Name = "Medium Grid 3 Accent 2", UiPriority = 69 };
      LatentStyleExceptionInfo latentStyleExceptionInfo201 = new LatentStyleExceptionInfo() { Name = "Dark List Accent 2", UiPriority = 70 };
      LatentStyleExceptionInfo latentStyleExceptionInfo202 = new LatentStyleExceptionInfo() { Name = "Colorful Shading Accent 2", UiPriority = 71 };
      LatentStyleExceptionInfo latentStyleExceptionInfo203 = new LatentStyleExceptionInfo() { Name = "Colorful List Accent 2", UiPriority = 72 };
      LatentStyleExceptionInfo latentStyleExceptionInfo204 = new LatentStyleExceptionInfo() { Name = "Colorful Grid Accent 2", UiPriority = 73 };
      LatentStyleExceptionInfo latentStyleExceptionInfo205 = new LatentStyleExceptionInfo() { Name = "Light Shading Accent 3", UiPriority = 60 };
      LatentStyleExceptionInfo latentStyleExceptionInfo206 = new LatentStyleExceptionInfo() { Name = "Light List Accent 3", UiPriority = 61 };
      LatentStyleExceptionInfo latentStyleExceptionInfo207 = new LatentStyleExceptionInfo() { Name = "Light Grid Accent 3", UiPriority = 62 };
      LatentStyleExceptionInfo latentStyleExceptionInfo208 = new LatentStyleExceptionInfo() { Name = "Medium Shading 1 Accent 3", UiPriority = 63 };
      LatentStyleExceptionInfo latentStyleExceptionInfo209 = new LatentStyleExceptionInfo() { Name = "Medium Shading 2 Accent 3", UiPriority = 64 };
      LatentStyleExceptionInfo latentStyleExceptionInfo210 = new LatentStyleExceptionInfo() { Name = "Medium List 1 Accent 3", UiPriority = 65 };
      LatentStyleExceptionInfo latentStyleExceptionInfo211 = new LatentStyleExceptionInfo() { Name = "Medium List 2 Accent 3", UiPriority = 66 };
      LatentStyleExceptionInfo latentStyleExceptionInfo212 = new LatentStyleExceptionInfo() { Name = "Medium Grid 1 Accent 3", UiPriority = 67 };
      LatentStyleExceptionInfo latentStyleExceptionInfo213 = new LatentStyleExceptionInfo() { Name = "Medium Grid 2 Accent 3", UiPriority = 68 };
      LatentStyleExceptionInfo latentStyleExceptionInfo214 = new LatentStyleExceptionInfo() { Name = "Medium Grid 3 Accent 3", UiPriority = 69 };
      LatentStyleExceptionInfo latentStyleExceptionInfo215 = new LatentStyleExceptionInfo() { Name = "Dark List Accent 3", UiPriority = 70 };
      LatentStyleExceptionInfo latentStyleExceptionInfo216 = new LatentStyleExceptionInfo() { Name = "Colorful Shading Accent 3", UiPriority = 71 };
      LatentStyleExceptionInfo latentStyleExceptionInfo217 = new LatentStyleExceptionInfo() { Name = "Colorful List Accent 3", UiPriority = 72 };
      LatentStyleExceptionInfo latentStyleExceptionInfo218 = new LatentStyleExceptionInfo() { Name = "Colorful Grid Accent 3", UiPriority = 73 };
      LatentStyleExceptionInfo latentStyleExceptionInfo219 = new LatentStyleExceptionInfo() { Name = "Light Shading Accent 4", UiPriority = 60 };
      LatentStyleExceptionInfo latentStyleExceptionInfo220 = new LatentStyleExceptionInfo() { Name = "Light List Accent 4", UiPriority = 61 };
      LatentStyleExceptionInfo latentStyleExceptionInfo221 = new LatentStyleExceptionInfo() { Name = "Light Grid Accent 4", UiPriority = 62 };
      LatentStyleExceptionInfo latentStyleExceptionInfo222 = new LatentStyleExceptionInfo() { Name = "Medium Shading 1 Accent 4", UiPriority = 63 };
      LatentStyleExceptionInfo latentStyleExceptionInfo223 = new LatentStyleExceptionInfo() { Name = "Medium Shading 2 Accent 4", UiPriority = 64 };
      LatentStyleExceptionInfo latentStyleExceptionInfo224 = new LatentStyleExceptionInfo() { Name = "Medium List 1 Accent 4", UiPriority = 65 };
      LatentStyleExceptionInfo latentStyleExceptionInfo225 = new LatentStyleExceptionInfo() { Name = "Medium List 2 Accent 4", UiPriority = 66 };
      LatentStyleExceptionInfo latentStyleExceptionInfo226 = new LatentStyleExceptionInfo() { Name = "Medium Grid 1 Accent 4", UiPriority = 67 };
      LatentStyleExceptionInfo latentStyleExceptionInfo227 = new LatentStyleExceptionInfo() { Name = "Medium Grid 2 Accent 4", UiPriority = 68 };
      LatentStyleExceptionInfo latentStyleExceptionInfo228 = new LatentStyleExceptionInfo() { Name = "Medium Grid 3 Accent 4", UiPriority = 69 };
      LatentStyleExceptionInfo latentStyleExceptionInfo229 = new LatentStyleExceptionInfo() { Name = "Dark List Accent 4", UiPriority = 70 };
      LatentStyleExceptionInfo latentStyleExceptionInfo230 = new LatentStyleExceptionInfo() { Name = "Colorful Shading Accent 4", UiPriority = 71 };
      LatentStyleExceptionInfo latentStyleExceptionInfo231 = new LatentStyleExceptionInfo() { Name = "Colorful List Accent 4", UiPriority = 72 };
      LatentStyleExceptionInfo latentStyleExceptionInfo232 = new LatentStyleExceptionInfo() { Name = "Colorful Grid Accent 4", UiPriority = 73 };
      LatentStyleExceptionInfo latentStyleExceptionInfo233 = new LatentStyleExceptionInfo() { Name = "Light Shading Accent 5", UiPriority = 60 };
      LatentStyleExceptionInfo latentStyleExceptionInfo234 = new LatentStyleExceptionInfo() { Name = "Light List Accent 5", UiPriority = 61 };
      LatentStyleExceptionInfo latentStyleExceptionInfo235 = new LatentStyleExceptionInfo() { Name = "Light Grid Accent 5", UiPriority = 62 };
      LatentStyleExceptionInfo latentStyleExceptionInfo236 = new LatentStyleExceptionInfo() { Name = "Medium Shading 1 Accent 5", UiPriority = 63 };
      LatentStyleExceptionInfo latentStyleExceptionInfo237 = new LatentStyleExceptionInfo() { Name = "Medium Shading 2 Accent 5", UiPriority = 64 };
      LatentStyleExceptionInfo latentStyleExceptionInfo238 = new LatentStyleExceptionInfo() { Name = "Medium List 1 Accent 5", UiPriority = 65 };
      LatentStyleExceptionInfo latentStyleExceptionInfo239 = new LatentStyleExceptionInfo() { Name = "Medium List 2 Accent 5", UiPriority = 66 };
      LatentStyleExceptionInfo latentStyleExceptionInfo240 = new LatentStyleExceptionInfo() { Name = "Medium Grid 1 Accent 5", UiPriority = 67 };
      LatentStyleExceptionInfo latentStyleExceptionInfo241 = new LatentStyleExceptionInfo() { Name = "Medium Grid 2 Accent 5", UiPriority = 68 };
      LatentStyleExceptionInfo latentStyleExceptionInfo242 = new LatentStyleExceptionInfo() { Name = "Medium Grid 3 Accent 5", UiPriority = 69 };
      LatentStyleExceptionInfo latentStyleExceptionInfo243 = new LatentStyleExceptionInfo() { Name = "Dark List Accent 5", UiPriority = 70 };
      LatentStyleExceptionInfo latentStyleExceptionInfo244 = new LatentStyleExceptionInfo() { Name = "Colorful Shading Accent 5", UiPriority = 71 };
      LatentStyleExceptionInfo latentStyleExceptionInfo245 = new LatentStyleExceptionInfo() { Name = "Colorful List Accent 5", UiPriority = 72 };
      LatentStyleExceptionInfo latentStyleExceptionInfo246 = new LatentStyleExceptionInfo() { Name = "Colorful Grid Accent 5", UiPriority = 73 };
      LatentStyleExceptionInfo latentStyleExceptionInfo247 = new LatentStyleExceptionInfo() { Name = "Light Shading Accent 6", UiPriority = 60 };
      LatentStyleExceptionInfo latentStyleExceptionInfo248 = new LatentStyleExceptionInfo() { Name = "Light List Accent 6", UiPriority = 61 };
      LatentStyleExceptionInfo latentStyleExceptionInfo249 = new LatentStyleExceptionInfo() { Name = "Light Grid Accent 6", UiPriority = 62 };
      LatentStyleExceptionInfo latentStyleExceptionInfo250 = new LatentStyleExceptionInfo() { Name = "Medium Shading 1 Accent 6", UiPriority = 63 };
      LatentStyleExceptionInfo latentStyleExceptionInfo251 = new LatentStyleExceptionInfo() { Name = "Medium Shading 2 Accent 6", UiPriority = 64 };
      LatentStyleExceptionInfo latentStyleExceptionInfo252 = new LatentStyleExceptionInfo() { Name = "Medium List 1 Accent 6", UiPriority = 65 };
      LatentStyleExceptionInfo latentStyleExceptionInfo253 = new LatentStyleExceptionInfo() { Name = "Medium List 2 Accent 6", UiPriority = 66 };
      LatentStyleExceptionInfo latentStyleExceptionInfo254 = new LatentStyleExceptionInfo() { Name = "Medium Grid 1 Accent 6", UiPriority = 67 };
      LatentStyleExceptionInfo latentStyleExceptionInfo255 = new LatentStyleExceptionInfo() { Name = "Medium Grid 2 Accent 6", UiPriority = 68 };
      LatentStyleExceptionInfo latentStyleExceptionInfo256 = new LatentStyleExceptionInfo() { Name = "Medium Grid 3 Accent 6", UiPriority = 69 };
      LatentStyleExceptionInfo latentStyleExceptionInfo257 = new LatentStyleExceptionInfo() { Name = "Dark List Accent 6", UiPriority = 70 };
      LatentStyleExceptionInfo latentStyleExceptionInfo258 = new LatentStyleExceptionInfo() { Name = "Colorful Shading Accent 6", UiPriority = 71 };
      LatentStyleExceptionInfo latentStyleExceptionInfo259 = new LatentStyleExceptionInfo() { Name = "Colorful List Accent 6", UiPriority = 72 };
      LatentStyleExceptionInfo latentStyleExceptionInfo260 = new LatentStyleExceptionInfo() { Name = "Colorful Grid Accent 6", UiPriority = 73 };
      LatentStyleExceptionInfo latentStyleExceptionInfo261 = new LatentStyleExceptionInfo() { Name = "Subtle Emphasis", UiPriority = 19, PrimaryStyle = true };
      LatentStyleExceptionInfo latentStyleExceptionInfo262 = new LatentStyleExceptionInfo() { Name = "Intense Emphasis", UiPriority = 21, PrimaryStyle = true };
      LatentStyleExceptionInfo latentStyleExceptionInfo263 = new LatentStyleExceptionInfo() { Name = "Subtle Reference", UiPriority = 31, PrimaryStyle = true };
      LatentStyleExceptionInfo latentStyleExceptionInfo264 = new LatentStyleExceptionInfo() { Name = "Intense Reference", UiPriority = 32, PrimaryStyle = true };
      LatentStyleExceptionInfo latentStyleExceptionInfo265 = new LatentStyleExceptionInfo() { Name = "Book Title", UiPriority = 33, PrimaryStyle = true };
      LatentStyleExceptionInfo latentStyleExceptionInfo266 = new LatentStyleExceptionInfo() { Name = "Bibliography", UiPriority = 37, SemiHidden = true, UnhideWhenUsed = true };
      LatentStyleExceptionInfo latentStyleExceptionInfo267 = new LatentStyleExceptionInfo() { Name = "TOC Heading", UiPriority = 39, SemiHidden = true, UnhideWhenUsed = true, PrimaryStyle = true };
      LatentStyleExceptionInfo latentStyleExceptionInfo268 = new LatentStyleExceptionInfo() { Name = "Plain Table 1", UiPriority = 41 };
      LatentStyleExceptionInfo latentStyleExceptionInfo269 = new LatentStyleExceptionInfo() { Name = "Plain Table 2", UiPriority = 42 };
      LatentStyleExceptionInfo latentStyleExceptionInfo270 = new LatentStyleExceptionInfo() { Name = "Plain Table 3", UiPriority = 43 };
      LatentStyleExceptionInfo latentStyleExceptionInfo271 = new LatentStyleExceptionInfo() { Name = "Plain Table 4", UiPriority = 44 };
      LatentStyleExceptionInfo latentStyleExceptionInfo272 = new LatentStyleExceptionInfo() { Name = "Plain Table 5", UiPriority = 45 };
      LatentStyleExceptionInfo latentStyleExceptionInfo273 = new LatentStyleExceptionInfo() { Name = "Grid Table Light", UiPriority = 40 };
      LatentStyleExceptionInfo latentStyleExceptionInfo274 = new LatentStyleExceptionInfo() { Name = "Grid Table 1 Light", UiPriority = 46 };
      LatentStyleExceptionInfo latentStyleExceptionInfo275 = new LatentStyleExceptionInfo() { Name = "Grid Table 2", UiPriority = 47 };
      LatentStyleExceptionInfo latentStyleExceptionInfo276 = new LatentStyleExceptionInfo() { Name = "Grid Table 3", UiPriority = 48 };
      LatentStyleExceptionInfo latentStyleExceptionInfo277 = new LatentStyleExceptionInfo() { Name = "Grid Table 4", UiPriority = 49 };
      LatentStyleExceptionInfo latentStyleExceptionInfo278 = new LatentStyleExceptionInfo() { Name = "Grid Table 5 Dark", UiPriority = 50 };
      LatentStyleExceptionInfo latentStyleExceptionInfo279 = new LatentStyleExceptionInfo() { Name = "Grid Table 6 Colorful", UiPriority = 51 };
      LatentStyleExceptionInfo latentStyleExceptionInfo280 = new LatentStyleExceptionInfo() { Name = "Grid Table 7 Colorful", UiPriority = 52 };
      LatentStyleExceptionInfo latentStyleExceptionInfo281 = new LatentStyleExceptionInfo() { Name = "Grid Table 1 Light Accent 1", UiPriority = 46 };
      LatentStyleExceptionInfo latentStyleExceptionInfo282 = new LatentStyleExceptionInfo() { Name = "Grid Table 2 Accent 1", UiPriority = 47 };
      LatentStyleExceptionInfo latentStyleExceptionInfo283 = new LatentStyleExceptionInfo() { Name = "Grid Table 3 Accent 1", UiPriority = 48 };
      LatentStyleExceptionInfo latentStyleExceptionInfo284 = new LatentStyleExceptionInfo() { Name = "Grid Table 4 Accent 1", UiPriority = 49 };
      LatentStyleExceptionInfo latentStyleExceptionInfo285 = new LatentStyleExceptionInfo() { Name = "Grid Table 5 Dark Accent 1", UiPriority = 50 };
      LatentStyleExceptionInfo latentStyleExceptionInfo286 = new LatentStyleExceptionInfo() { Name = "Grid Table 6 Colorful Accent 1", UiPriority = 51 };
      LatentStyleExceptionInfo latentStyleExceptionInfo287 = new LatentStyleExceptionInfo() { Name = "Grid Table 7 Colorful Accent 1", UiPriority = 52 };
      LatentStyleExceptionInfo latentStyleExceptionInfo288 = new LatentStyleExceptionInfo() { Name = "Grid Table 1 Light Accent 2", UiPriority = 46 };
      LatentStyleExceptionInfo latentStyleExceptionInfo289 = new LatentStyleExceptionInfo() { Name = "Grid Table 2 Accent 2", UiPriority = 47 };
      LatentStyleExceptionInfo latentStyleExceptionInfo290 = new LatentStyleExceptionInfo() { Name = "Grid Table 3 Accent 2", UiPriority = 48 };
      LatentStyleExceptionInfo latentStyleExceptionInfo291 = new LatentStyleExceptionInfo() { Name = "Grid Table 4 Accent 2", UiPriority = 49 };
      LatentStyleExceptionInfo latentStyleExceptionInfo292 = new LatentStyleExceptionInfo() { Name = "Grid Table 5 Dark Accent 2", UiPriority = 50 };
      LatentStyleExceptionInfo latentStyleExceptionInfo293 = new LatentStyleExceptionInfo() { Name = "Grid Table 6 Colorful Accent 2", UiPriority = 51 };
      LatentStyleExceptionInfo latentStyleExceptionInfo294 = new LatentStyleExceptionInfo() { Name = "Grid Table 7 Colorful Accent 2", UiPriority = 52 };
      LatentStyleExceptionInfo latentStyleExceptionInfo295 = new LatentStyleExceptionInfo() { Name = "Grid Table 1 Light Accent 3", UiPriority = 46 };
      LatentStyleExceptionInfo latentStyleExceptionInfo296 = new LatentStyleExceptionInfo() { Name = "Grid Table 2 Accent 3", UiPriority = 47 };
      LatentStyleExceptionInfo latentStyleExceptionInfo297 = new LatentStyleExceptionInfo() { Name = "Grid Table 3 Accent 3", UiPriority = 48 };
      LatentStyleExceptionInfo latentStyleExceptionInfo298 = new LatentStyleExceptionInfo() { Name = "Grid Table 4 Accent 3", UiPriority = 49 };
      LatentStyleExceptionInfo latentStyleExceptionInfo299 = new LatentStyleExceptionInfo() { Name = "Grid Table 5 Dark Accent 3", UiPriority = 50 };
      LatentStyleExceptionInfo latentStyleExceptionInfo300 = new LatentStyleExceptionInfo() { Name = "Grid Table 6 Colorful Accent 3", UiPriority = 51 };
      LatentStyleExceptionInfo latentStyleExceptionInfo301 = new LatentStyleExceptionInfo() { Name = "Grid Table 7 Colorful Accent 3", UiPriority = 52 };
      LatentStyleExceptionInfo latentStyleExceptionInfo302 = new LatentStyleExceptionInfo() { Name = "Grid Table 1 Light Accent 4", UiPriority = 46 };
      LatentStyleExceptionInfo latentStyleExceptionInfo303 = new LatentStyleExceptionInfo() { Name = "Grid Table 2 Accent 4", UiPriority = 47 };
      LatentStyleExceptionInfo latentStyleExceptionInfo304 = new LatentStyleExceptionInfo() { Name = "Grid Table 3 Accent 4", UiPriority = 48 };
      LatentStyleExceptionInfo latentStyleExceptionInfo305 = new LatentStyleExceptionInfo() { Name = "Grid Table 4 Accent 4", UiPriority = 49 };
      LatentStyleExceptionInfo latentStyleExceptionInfo306 = new LatentStyleExceptionInfo() { Name = "Grid Table 5 Dark Accent 4", UiPriority = 50 };
      LatentStyleExceptionInfo latentStyleExceptionInfo307 = new LatentStyleExceptionInfo() { Name = "Grid Table 6 Colorful Accent 4", UiPriority = 51 };
      LatentStyleExceptionInfo latentStyleExceptionInfo308 = new LatentStyleExceptionInfo() { Name = "Grid Table 7 Colorful Accent 4", UiPriority = 52 };
      LatentStyleExceptionInfo latentStyleExceptionInfo309 = new LatentStyleExceptionInfo() { Name = "Grid Table 1 Light Accent 5", UiPriority = 46 };
      LatentStyleExceptionInfo latentStyleExceptionInfo310 = new LatentStyleExceptionInfo() { Name = "Grid Table 2 Accent 5", UiPriority = 47 };
      LatentStyleExceptionInfo latentStyleExceptionInfo311 = new LatentStyleExceptionInfo() { Name = "Grid Table 3 Accent 5", UiPriority = 48 };
      LatentStyleExceptionInfo latentStyleExceptionInfo312 = new LatentStyleExceptionInfo() { Name = "Grid Table 4 Accent 5", UiPriority = 49 };
      LatentStyleExceptionInfo latentStyleExceptionInfo313 = new LatentStyleExceptionInfo() { Name = "Grid Table 5 Dark Accent 5", UiPriority = 50 };
      LatentStyleExceptionInfo latentStyleExceptionInfo314 = new LatentStyleExceptionInfo() { Name = "Grid Table 6 Colorful Accent 5", UiPriority = 51 };
      LatentStyleExceptionInfo latentStyleExceptionInfo315 = new LatentStyleExceptionInfo() { Name = "Grid Table 7 Colorful Accent 5", UiPriority = 52 };
      LatentStyleExceptionInfo latentStyleExceptionInfo316 = new LatentStyleExceptionInfo() { Name = "Grid Table 1 Light Accent 6", UiPriority = 46 };
      LatentStyleExceptionInfo latentStyleExceptionInfo317 = new LatentStyleExceptionInfo() { Name = "Grid Table 2 Accent 6", UiPriority = 47 };
      LatentStyleExceptionInfo latentStyleExceptionInfo318 = new LatentStyleExceptionInfo() { Name = "Grid Table 3 Accent 6", UiPriority = 48 };
      LatentStyleExceptionInfo latentStyleExceptionInfo319 = new LatentStyleExceptionInfo() { Name = "Grid Table 4 Accent 6", UiPriority = 49 };
      LatentStyleExceptionInfo latentStyleExceptionInfo320 = new LatentStyleExceptionInfo() { Name = "Grid Table 5 Dark Accent 6", UiPriority = 50 };
      LatentStyleExceptionInfo latentStyleExceptionInfo321 = new LatentStyleExceptionInfo() { Name = "Grid Table 6 Colorful Accent 6", UiPriority = 51 };
      LatentStyleExceptionInfo latentStyleExceptionInfo322 = new LatentStyleExceptionInfo() { Name = "Grid Table 7 Colorful Accent 6", UiPriority = 52 };
      LatentStyleExceptionInfo latentStyleExceptionInfo323 = new LatentStyleExceptionInfo() { Name = "List Table 1 Light", UiPriority = 46 };
      LatentStyleExceptionInfo latentStyleExceptionInfo324 = new LatentStyleExceptionInfo() { Name = "List Table 2", UiPriority = 47 };
      LatentStyleExceptionInfo latentStyleExceptionInfo325 = new LatentStyleExceptionInfo() { Name = "List Table 3", UiPriority = 48 };
      LatentStyleExceptionInfo latentStyleExceptionInfo326 = new LatentStyleExceptionInfo() { Name = "List Table 4", UiPriority = 49 };
      LatentStyleExceptionInfo latentStyleExceptionInfo327 = new LatentStyleExceptionInfo() { Name = "List Table 5 Dark", UiPriority = 50 };
      LatentStyleExceptionInfo latentStyleExceptionInfo328 = new LatentStyleExceptionInfo() { Name = "List Table 6 Colorful", UiPriority = 51 };
      LatentStyleExceptionInfo latentStyleExceptionInfo329 = new LatentStyleExceptionInfo() { Name = "List Table 7 Colorful", UiPriority = 52 };
      LatentStyleExceptionInfo latentStyleExceptionInfo330 = new LatentStyleExceptionInfo() { Name = "List Table 1 Light Accent 1", UiPriority = 46 };
      LatentStyleExceptionInfo latentStyleExceptionInfo331 = new LatentStyleExceptionInfo() { Name = "List Table 2 Accent 1", UiPriority = 47 };
      LatentStyleExceptionInfo latentStyleExceptionInfo332 = new LatentStyleExceptionInfo() { Name = "List Table 3 Accent 1", UiPriority = 48 };
      LatentStyleExceptionInfo latentStyleExceptionInfo333 = new LatentStyleExceptionInfo() { Name = "List Table 4 Accent 1", UiPriority = 49 };
      LatentStyleExceptionInfo latentStyleExceptionInfo334 = new LatentStyleExceptionInfo() { Name = "List Table 5 Dark Accent 1", UiPriority = 50 };
      LatentStyleExceptionInfo latentStyleExceptionInfo335 = new LatentStyleExceptionInfo() { Name = "List Table 6 Colorful Accent 1", UiPriority = 51 };
      LatentStyleExceptionInfo latentStyleExceptionInfo336 = new LatentStyleExceptionInfo() { Name = "List Table 7 Colorful Accent 1", UiPriority = 52 };
      LatentStyleExceptionInfo latentStyleExceptionInfo337 = new LatentStyleExceptionInfo() { Name = "List Table 1 Light Accent 2", UiPriority = 46 };
      LatentStyleExceptionInfo latentStyleExceptionInfo338 = new LatentStyleExceptionInfo() { Name = "List Table 2 Accent 2", UiPriority = 47 };
      LatentStyleExceptionInfo latentStyleExceptionInfo339 = new LatentStyleExceptionInfo() { Name = "List Table 3 Accent 2", UiPriority = 48 };
      LatentStyleExceptionInfo latentStyleExceptionInfo340 = new LatentStyleExceptionInfo() { Name = "List Table 4 Accent 2", UiPriority = 49 };
      LatentStyleExceptionInfo latentStyleExceptionInfo341 = new LatentStyleExceptionInfo() { Name = "List Table 5 Dark Accent 2", UiPriority = 50 };
      LatentStyleExceptionInfo latentStyleExceptionInfo342 = new LatentStyleExceptionInfo() { Name = "List Table 6 Colorful Accent 2", UiPriority = 51 };
      LatentStyleExceptionInfo latentStyleExceptionInfo343 = new LatentStyleExceptionInfo() { Name = "List Table 7 Colorful Accent 2", UiPriority = 52 };
      LatentStyleExceptionInfo latentStyleExceptionInfo344 = new LatentStyleExceptionInfo() { Name = "List Table 1 Light Accent 3", UiPriority = 46 };
      LatentStyleExceptionInfo latentStyleExceptionInfo345 = new LatentStyleExceptionInfo() { Name = "List Table 2 Accent 3", UiPriority = 47 };
      LatentStyleExceptionInfo latentStyleExceptionInfo346 = new LatentStyleExceptionInfo() { Name = "List Table 3 Accent 3", UiPriority = 48 };
      LatentStyleExceptionInfo latentStyleExceptionInfo347 = new LatentStyleExceptionInfo() { Name = "List Table 4 Accent 3", UiPriority = 49 };
      LatentStyleExceptionInfo latentStyleExceptionInfo348 = new LatentStyleExceptionInfo() { Name = "List Table 5 Dark Accent 3", UiPriority = 50 };
      LatentStyleExceptionInfo latentStyleExceptionInfo349 = new LatentStyleExceptionInfo() { Name = "List Table 6 Colorful Accent 3", UiPriority = 51 };
      LatentStyleExceptionInfo latentStyleExceptionInfo350 = new LatentStyleExceptionInfo() { Name = "List Table 7 Colorful Accent 3", UiPriority = 52 };
      LatentStyleExceptionInfo latentStyleExceptionInfo351 = new LatentStyleExceptionInfo() { Name = "List Table 1 Light Accent 4", UiPriority = 46 };
      LatentStyleExceptionInfo latentStyleExceptionInfo352 = new LatentStyleExceptionInfo() { Name = "List Table 2 Accent 4", UiPriority = 47 };
      LatentStyleExceptionInfo latentStyleExceptionInfo353 = new LatentStyleExceptionInfo() { Name = "List Table 3 Accent 4", UiPriority = 48 };
      LatentStyleExceptionInfo latentStyleExceptionInfo354 = new LatentStyleExceptionInfo() { Name = "List Table 4 Accent 4", UiPriority = 49 };
      LatentStyleExceptionInfo latentStyleExceptionInfo355 = new LatentStyleExceptionInfo() { Name = "List Table 5 Dark Accent 4", UiPriority = 50 };
      LatentStyleExceptionInfo latentStyleExceptionInfo356 = new LatentStyleExceptionInfo() { Name = "List Table 6 Colorful Accent 4", UiPriority = 51 };
      LatentStyleExceptionInfo latentStyleExceptionInfo357 = new LatentStyleExceptionInfo() { Name = "List Table 7 Colorful Accent 4", UiPriority = 52 };
      LatentStyleExceptionInfo latentStyleExceptionInfo358 = new LatentStyleExceptionInfo() { Name = "List Table 1 Light Accent 5", UiPriority = 46 };
      LatentStyleExceptionInfo latentStyleExceptionInfo359 = new LatentStyleExceptionInfo() { Name = "List Table 2 Accent 5", UiPriority = 47 };
      LatentStyleExceptionInfo latentStyleExceptionInfo360 = new LatentStyleExceptionInfo() { Name = "List Table 3 Accent 5", UiPriority = 48 };
      LatentStyleExceptionInfo latentStyleExceptionInfo361 = new LatentStyleExceptionInfo() { Name = "List Table 4 Accent 5", UiPriority = 49 };
      LatentStyleExceptionInfo latentStyleExceptionInfo362 = new LatentStyleExceptionInfo() { Name = "List Table 5 Dark Accent 5", UiPriority = 50 };
      LatentStyleExceptionInfo latentStyleExceptionInfo363 = new LatentStyleExceptionInfo() { Name = "List Table 6 Colorful Accent 5", UiPriority = 51 };
      LatentStyleExceptionInfo latentStyleExceptionInfo364 = new LatentStyleExceptionInfo() { Name = "List Table 7 Colorful Accent 5", UiPriority = 52 };
      LatentStyleExceptionInfo latentStyleExceptionInfo365 = new LatentStyleExceptionInfo() { Name = "List Table 1 Light Accent 6", UiPriority = 46 };
      LatentStyleExceptionInfo latentStyleExceptionInfo366 = new LatentStyleExceptionInfo() { Name = "List Table 2 Accent 6", UiPriority = 47 };
      LatentStyleExceptionInfo latentStyleExceptionInfo367 = new LatentStyleExceptionInfo() { Name = "List Table 3 Accent 6", UiPriority = 48 };
      LatentStyleExceptionInfo latentStyleExceptionInfo368 = new LatentStyleExceptionInfo() { Name = "List Table 4 Accent 6", UiPriority = 49 };
      LatentStyleExceptionInfo latentStyleExceptionInfo369 = new LatentStyleExceptionInfo() { Name = "List Table 5 Dark Accent 6", UiPriority = 50 };
      LatentStyleExceptionInfo latentStyleExceptionInfo370 = new LatentStyleExceptionInfo() { Name = "List Table 6 Colorful Accent 6", UiPriority = 51 };
      LatentStyleExceptionInfo latentStyleExceptionInfo371 = new LatentStyleExceptionInfo() { Name = "List Table 7 Colorful Accent 6", UiPriority = 52 };

      latentStyles1.Append(latentStyleExceptionInfo1);
      latentStyles1.Append(latentStyleExceptionInfo2);
      latentStyles1.Append(latentStyleExceptionInfo3);
      latentStyles1.Append(latentStyleExceptionInfo4);
      latentStyles1.Append(latentStyleExceptionInfo5);
      latentStyles1.Append(latentStyleExceptionInfo6);
      latentStyles1.Append(latentStyleExceptionInfo7);
      latentStyles1.Append(latentStyleExceptionInfo8);
      latentStyles1.Append(latentStyleExceptionInfo9);
      latentStyles1.Append(latentStyleExceptionInfo10);
      latentStyles1.Append(latentStyleExceptionInfo11);
      latentStyles1.Append(latentStyleExceptionInfo12);
      latentStyles1.Append(latentStyleExceptionInfo13);
      latentStyles1.Append(latentStyleExceptionInfo14);
      latentStyles1.Append(latentStyleExceptionInfo15);
      latentStyles1.Append(latentStyleExceptionInfo16);
      latentStyles1.Append(latentStyleExceptionInfo17);
      latentStyles1.Append(latentStyleExceptionInfo18);
      latentStyles1.Append(latentStyleExceptionInfo19);
      latentStyles1.Append(latentStyleExceptionInfo20);
      latentStyles1.Append(latentStyleExceptionInfo21);
      latentStyles1.Append(latentStyleExceptionInfo22);
      latentStyles1.Append(latentStyleExceptionInfo23);
      latentStyles1.Append(latentStyleExceptionInfo24);
      latentStyles1.Append(latentStyleExceptionInfo25);
      latentStyles1.Append(latentStyleExceptionInfo26);
      latentStyles1.Append(latentStyleExceptionInfo27);
      latentStyles1.Append(latentStyleExceptionInfo28);
      latentStyles1.Append(latentStyleExceptionInfo29);
      latentStyles1.Append(latentStyleExceptionInfo30);
      latentStyles1.Append(latentStyleExceptionInfo31);
      latentStyles1.Append(latentStyleExceptionInfo32);
      latentStyles1.Append(latentStyleExceptionInfo33);
      latentStyles1.Append(latentStyleExceptionInfo34);
      latentStyles1.Append(latentStyleExceptionInfo35);
      latentStyles1.Append(latentStyleExceptionInfo36);
      latentStyles1.Append(latentStyleExceptionInfo37);
      latentStyles1.Append(latentStyleExceptionInfo38);
      latentStyles1.Append(latentStyleExceptionInfo39);
      latentStyles1.Append(latentStyleExceptionInfo40);
      latentStyles1.Append(latentStyleExceptionInfo41);
      latentStyles1.Append(latentStyleExceptionInfo42);
      latentStyles1.Append(latentStyleExceptionInfo43);
      latentStyles1.Append(latentStyleExceptionInfo44);
      latentStyles1.Append(latentStyleExceptionInfo45);
      latentStyles1.Append(latentStyleExceptionInfo46);
      latentStyles1.Append(latentStyleExceptionInfo47);
      latentStyles1.Append(latentStyleExceptionInfo48);
      latentStyles1.Append(latentStyleExceptionInfo49);
      latentStyles1.Append(latentStyleExceptionInfo50);
      latentStyles1.Append(latentStyleExceptionInfo51);
      latentStyles1.Append(latentStyleExceptionInfo52);
      latentStyles1.Append(latentStyleExceptionInfo53);
      latentStyles1.Append(latentStyleExceptionInfo54);
      latentStyles1.Append(latentStyleExceptionInfo55);
      latentStyles1.Append(latentStyleExceptionInfo56);
      latentStyles1.Append(latentStyleExceptionInfo57);
      latentStyles1.Append(latentStyleExceptionInfo58);
      latentStyles1.Append(latentStyleExceptionInfo59);
      latentStyles1.Append(latentStyleExceptionInfo60);
      latentStyles1.Append(latentStyleExceptionInfo61);
      latentStyles1.Append(latentStyleExceptionInfo62);
      latentStyles1.Append(latentStyleExceptionInfo63);
      latentStyles1.Append(latentStyleExceptionInfo64);
      latentStyles1.Append(latentStyleExceptionInfo65);
      latentStyles1.Append(latentStyleExceptionInfo66);
      latentStyles1.Append(latentStyleExceptionInfo67);
      latentStyles1.Append(latentStyleExceptionInfo68);
      latentStyles1.Append(latentStyleExceptionInfo69);
      latentStyles1.Append(latentStyleExceptionInfo70);
      latentStyles1.Append(latentStyleExceptionInfo71);
      latentStyles1.Append(latentStyleExceptionInfo72);
      latentStyles1.Append(latentStyleExceptionInfo73);
      latentStyles1.Append(latentStyleExceptionInfo74);
      latentStyles1.Append(latentStyleExceptionInfo75);
      latentStyles1.Append(latentStyleExceptionInfo76);
      latentStyles1.Append(latentStyleExceptionInfo77);
      latentStyles1.Append(latentStyleExceptionInfo78);
      latentStyles1.Append(latentStyleExceptionInfo79);
      latentStyles1.Append(latentStyleExceptionInfo80);
      latentStyles1.Append(latentStyleExceptionInfo81);
      latentStyles1.Append(latentStyleExceptionInfo82);
      latentStyles1.Append(latentStyleExceptionInfo83);
      latentStyles1.Append(latentStyleExceptionInfo84);
      latentStyles1.Append(latentStyleExceptionInfo85);
      latentStyles1.Append(latentStyleExceptionInfo86);
      latentStyles1.Append(latentStyleExceptionInfo87);
      latentStyles1.Append(latentStyleExceptionInfo88);
      latentStyles1.Append(latentStyleExceptionInfo89);
      latentStyles1.Append(latentStyleExceptionInfo90);
      latentStyles1.Append(latentStyleExceptionInfo91);
      latentStyles1.Append(latentStyleExceptionInfo92);
      latentStyles1.Append(latentStyleExceptionInfo93);
      latentStyles1.Append(latentStyleExceptionInfo94);
      latentStyles1.Append(latentStyleExceptionInfo95);
      latentStyles1.Append(latentStyleExceptionInfo96);
      latentStyles1.Append(latentStyleExceptionInfo97);
      latentStyles1.Append(latentStyleExceptionInfo98);
      latentStyles1.Append(latentStyleExceptionInfo99);
      latentStyles1.Append(latentStyleExceptionInfo100);
      latentStyles1.Append(latentStyleExceptionInfo101);
      latentStyles1.Append(latentStyleExceptionInfo102);
      latentStyles1.Append(latentStyleExceptionInfo103);
      latentStyles1.Append(latentStyleExceptionInfo104);
      latentStyles1.Append(latentStyleExceptionInfo105);
      latentStyles1.Append(latentStyleExceptionInfo106);
      latentStyles1.Append(latentStyleExceptionInfo107);
      latentStyles1.Append(latentStyleExceptionInfo108);
      latentStyles1.Append(latentStyleExceptionInfo109);
      latentStyles1.Append(latentStyleExceptionInfo110);
      latentStyles1.Append(latentStyleExceptionInfo111);
      latentStyles1.Append(latentStyleExceptionInfo112);
      latentStyles1.Append(latentStyleExceptionInfo113);
      latentStyles1.Append(latentStyleExceptionInfo114);
      latentStyles1.Append(latentStyleExceptionInfo115);
      latentStyles1.Append(latentStyleExceptionInfo116);
      latentStyles1.Append(latentStyleExceptionInfo117);
      latentStyles1.Append(latentStyleExceptionInfo118);
      latentStyles1.Append(latentStyleExceptionInfo119);
      latentStyles1.Append(latentStyleExceptionInfo120);
      latentStyles1.Append(latentStyleExceptionInfo121);
      latentStyles1.Append(latentStyleExceptionInfo122);
      latentStyles1.Append(latentStyleExceptionInfo123);
      latentStyles1.Append(latentStyleExceptionInfo124);
      latentStyles1.Append(latentStyleExceptionInfo125);
      latentStyles1.Append(latentStyleExceptionInfo126);
      latentStyles1.Append(latentStyleExceptionInfo127);
      latentStyles1.Append(latentStyleExceptionInfo128);
      latentStyles1.Append(latentStyleExceptionInfo129);
      latentStyles1.Append(latentStyleExceptionInfo130);
      latentStyles1.Append(latentStyleExceptionInfo131);
      latentStyles1.Append(latentStyleExceptionInfo132);
      latentStyles1.Append(latentStyleExceptionInfo133);
      latentStyles1.Append(latentStyleExceptionInfo134);
      latentStyles1.Append(latentStyleExceptionInfo135);
      latentStyles1.Append(latentStyleExceptionInfo136);
      latentStyles1.Append(latentStyleExceptionInfo137);
      latentStyles1.Append(latentStyleExceptionInfo138);
      latentStyles1.Append(latentStyleExceptionInfo139);
      latentStyles1.Append(latentStyleExceptionInfo140);
      latentStyles1.Append(latentStyleExceptionInfo141);
      latentStyles1.Append(latentStyleExceptionInfo142);
      latentStyles1.Append(latentStyleExceptionInfo143);
      latentStyles1.Append(latentStyleExceptionInfo144);
      latentStyles1.Append(latentStyleExceptionInfo145);
      latentStyles1.Append(latentStyleExceptionInfo146);
      latentStyles1.Append(latentStyleExceptionInfo147);
      latentStyles1.Append(latentStyleExceptionInfo148);
      latentStyles1.Append(latentStyleExceptionInfo149);
      latentStyles1.Append(latentStyleExceptionInfo150);
      latentStyles1.Append(latentStyleExceptionInfo151);
      latentStyles1.Append(latentStyleExceptionInfo152);
      latentStyles1.Append(latentStyleExceptionInfo153);
      latentStyles1.Append(latentStyleExceptionInfo154);
      latentStyles1.Append(latentStyleExceptionInfo155);
      latentStyles1.Append(latentStyleExceptionInfo156);
      latentStyles1.Append(latentStyleExceptionInfo157);
      latentStyles1.Append(latentStyleExceptionInfo158);
      latentStyles1.Append(latentStyleExceptionInfo159);
      latentStyles1.Append(latentStyleExceptionInfo160);
      latentStyles1.Append(latentStyleExceptionInfo161);
      latentStyles1.Append(latentStyleExceptionInfo162);
      latentStyles1.Append(latentStyleExceptionInfo163);
      latentStyles1.Append(latentStyleExceptionInfo164);
      latentStyles1.Append(latentStyleExceptionInfo165);
      latentStyles1.Append(latentStyleExceptionInfo166);
      latentStyles1.Append(latentStyleExceptionInfo167);
      latentStyles1.Append(latentStyleExceptionInfo168);
      latentStyles1.Append(latentStyleExceptionInfo169);
      latentStyles1.Append(latentStyleExceptionInfo170);
      latentStyles1.Append(latentStyleExceptionInfo171);
      latentStyles1.Append(latentStyleExceptionInfo172);
      latentStyles1.Append(latentStyleExceptionInfo173);
      latentStyles1.Append(latentStyleExceptionInfo174);
      latentStyles1.Append(latentStyleExceptionInfo175);
      latentStyles1.Append(latentStyleExceptionInfo176);
      latentStyles1.Append(latentStyleExceptionInfo177);
      latentStyles1.Append(latentStyleExceptionInfo178);
      latentStyles1.Append(latentStyleExceptionInfo179);
      latentStyles1.Append(latentStyleExceptionInfo180);
      latentStyles1.Append(latentStyleExceptionInfo181);
      latentStyles1.Append(latentStyleExceptionInfo182);
      latentStyles1.Append(latentStyleExceptionInfo183);
      latentStyles1.Append(latentStyleExceptionInfo184);
      latentStyles1.Append(latentStyleExceptionInfo185);
      latentStyles1.Append(latentStyleExceptionInfo186);
      latentStyles1.Append(latentStyleExceptionInfo187);
      latentStyles1.Append(latentStyleExceptionInfo188);
      latentStyles1.Append(latentStyleExceptionInfo189);
      latentStyles1.Append(latentStyleExceptionInfo190);
      latentStyles1.Append(latentStyleExceptionInfo191);
      latentStyles1.Append(latentStyleExceptionInfo192);
      latentStyles1.Append(latentStyleExceptionInfo193);
      latentStyles1.Append(latentStyleExceptionInfo194);
      latentStyles1.Append(latentStyleExceptionInfo195);
      latentStyles1.Append(latentStyleExceptionInfo196);
      latentStyles1.Append(latentStyleExceptionInfo197);
      latentStyles1.Append(latentStyleExceptionInfo198);
      latentStyles1.Append(latentStyleExceptionInfo199);
      latentStyles1.Append(latentStyleExceptionInfo200);
      latentStyles1.Append(latentStyleExceptionInfo201);
      latentStyles1.Append(latentStyleExceptionInfo202);
      latentStyles1.Append(latentStyleExceptionInfo203);
      latentStyles1.Append(latentStyleExceptionInfo204);
      latentStyles1.Append(latentStyleExceptionInfo205);
      latentStyles1.Append(latentStyleExceptionInfo206);
      latentStyles1.Append(latentStyleExceptionInfo207);
      latentStyles1.Append(latentStyleExceptionInfo208);
      latentStyles1.Append(latentStyleExceptionInfo209);
      latentStyles1.Append(latentStyleExceptionInfo210);
      latentStyles1.Append(latentStyleExceptionInfo211);
      latentStyles1.Append(latentStyleExceptionInfo212);
      latentStyles1.Append(latentStyleExceptionInfo213);
      latentStyles1.Append(latentStyleExceptionInfo214);
      latentStyles1.Append(latentStyleExceptionInfo215);
      latentStyles1.Append(latentStyleExceptionInfo216);
      latentStyles1.Append(latentStyleExceptionInfo217);
      latentStyles1.Append(latentStyleExceptionInfo218);
      latentStyles1.Append(latentStyleExceptionInfo219);
      latentStyles1.Append(latentStyleExceptionInfo220);
      latentStyles1.Append(latentStyleExceptionInfo221);
      latentStyles1.Append(latentStyleExceptionInfo222);
      latentStyles1.Append(latentStyleExceptionInfo223);
      latentStyles1.Append(latentStyleExceptionInfo224);
      latentStyles1.Append(latentStyleExceptionInfo225);
      latentStyles1.Append(latentStyleExceptionInfo226);
      latentStyles1.Append(latentStyleExceptionInfo227);
      latentStyles1.Append(latentStyleExceptionInfo228);
      latentStyles1.Append(latentStyleExceptionInfo229);
      latentStyles1.Append(latentStyleExceptionInfo230);
      latentStyles1.Append(latentStyleExceptionInfo231);
      latentStyles1.Append(latentStyleExceptionInfo232);
      latentStyles1.Append(latentStyleExceptionInfo233);
      latentStyles1.Append(latentStyleExceptionInfo234);
      latentStyles1.Append(latentStyleExceptionInfo235);
      latentStyles1.Append(latentStyleExceptionInfo236);
      latentStyles1.Append(latentStyleExceptionInfo237);
      latentStyles1.Append(latentStyleExceptionInfo238);
      latentStyles1.Append(latentStyleExceptionInfo239);
      latentStyles1.Append(latentStyleExceptionInfo240);
      latentStyles1.Append(latentStyleExceptionInfo241);
      latentStyles1.Append(latentStyleExceptionInfo242);
      latentStyles1.Append(latentStyleExceptionInfo243);
      latentStyles1.Append(latentStyleExceptionInfo244);
      latentStyles1.Append(latentStyleExceptionInfo245);
      latentStyles1.Append(latentStyleExceptionInfo246);
      latentStyles1.Append(latentStyleExceptionInfo247);
      latentStyles1.Append(latentStyleExceptionInfo248);
      latentStyles1.Append(latentStyleExceptionInfo249);
      latentStyles1.Append(latentStyleExceptionInfo250);
      latentStyles1.Append(latentStyleExceptionInfo251);
      latentStyles1.Append(latentStyleExceptionInfo252);
      latentStyles1.Append(latentStyleExceptionInfo253);
      latentStyles1.Append(latentStyleExceptionInfo254);
      latentStyles1.Append(latentStyleExceptionInfo255);
      latentStyles1.Append(latentStyleExceptionInfo256);
      latentStyles1.Append(latentStyleExceptionInfo257);
      latentStyles1.Append(latentStyleExceptionInfo258);
      latentStyles1.Append(latentStyleExceptionInfo259);
      latentStyles1.Append(latentStyleExceptionInfo260);
      latentStyles1.Append(latentStyleExceptionInfo261);
      latentStyles1.Append(latentStyleExceptionInfo262);
      latentStyles1.Append(latentStyleExceptionInfo263);
      latentStyles1.Append(latentStyleExceptionInfo264);
      latentStyles1.Append(latentStyleExceptionInfo265);
      latentStyles1.Append(latentStyleExceptionInfo266);
      latentStyles1.Append(latentStyleExceptionInfo267);
      latentStyles1.Append(latentStyleExceptionInfo268);
      latentStyles1.Append(latentStyleExceptionInfo269);
      latentStyles1.Append(latentStyleExceptionInfo270);
      latentStyles1.Append(latentStyleExceptionInfo271);
      latentStyles1.Append(latentStyleExceptionInfo272);
      latentStyles1.Append(latentStyleExceptionInfo273);
      latentStyles1.Append(latentStyleExceptionInfo274);
      latentStyles1.Append(latentStyleExceptionInfo275);
      latentStyles1.Append(latentStyleExceptionInfo276);
      latentStyles1.Append(latentStyleExceptionInfo277);
      latentStyles1.Append(latentStyleExceptionInfo278);
      latentStyles1.Append(latentStyleExceptionInfo279);
      latentStyles1.Append(latentStyleExceptionInfo280);
      latentStyles1.Append(latentStyleExceptionInfo281);
      latentStyles1.Append(latentStyleExceptionInfo282);
      latentStyles1.Append(latentStyleExceptionInfo283);
      latentStyles1.Append(latentStyleExceptionInfo284);
      latentStyles1.Append(latentStyleExceptionInfo285);
      latentStyles1.Append(latentStyleExceptionInfo286);
      latentStyles1.Append(latentStyleExceptionInfo287);
      latentStyles1.Append(latentStyleExceptionInfo288);
      latentStyles1.Append(latentStyleExceptionInfo289);
      latentStyles1.Append(latentStyleExceptionInfo290);
      latentStyles1.Append(latentStyleExceptionInfo291);
      latentStyles1.Append(latentStyleExceptionInfo292);
      latentStyles1.Append(latentStyleExceptionInfo293);
      latentStyles1.Append(latentStyleExceptionInfo294);
      latentStyles1.Append(latentStyleExceptionInfo295);
      latentStyles1.Append(latentStyleExceptionInfo296);
      latentStyles1.Append(latentStyleExceptionInfo297);
      latentStyles1.Append(latentStyleExceptionInfo298);
      latentStyles1.Append(latentStyleExceptionInfo299);
      latentStyles1.Append(latentStyleExceptionInfo300);
      latentStyles1.Append(latentStyleExceptionInfo301);
      latentStyles1.Append(latentStyleExceptionInfo302);
      latentStyles1.Append(latentStyleExceptionInfo303);
      latentStyles1.Append(latentStyleExceptionInfo304);
      latentStyles1.Append(latentStyleExceptionInfo305);
      latentStyles1.Append(latentStyleExceptionInfo306);
      latentStyles1.Append(latentStyleExceptionInfo307);
      latentStyles1.Append(latentStyleExceptionInfo308);
      latentStyles1.Append(latentStyleExceptionInfo309);
      latentStyles1.Append(latentStyleExceptionInfo310);
      latentStyles1.Append(latentStyleExceptionInfo311);
      latentStyles1.Append(latentStyleExceptionInfo312);
      latentStyles1.Append(latentStyleExceptionInfo313);
      latentStyles1.Append(latentStyleExceptionInfo314);
      latentStyles1.Append(latentStyleExceptionInfo315);
      latentStyles1.Append(latentStyleExceptionInfo316);
      latentStyles1.Append(latentStyleExceptionInfo317);
      latentStyles1.Append(latentStyleExceptionInfo318);
      latentStyles1.Append(latentStyleExceptionInfo319);
      latentStyles1.Append(latentStyleExceptionInfo320);
      latentStyles1.Append(latentStyleExceptionInfo321);
      latentStyles1.Append(latentStyleExceptionInfo322);
      latentStyles1.Append(latentStyleExceptionInfo323);
      latentStyles1.Append(latentStyleExceptionInfo324);
      latentStyles1.Append(latentStyleExceptionInfo325);
      latentStyles1.Append(latentStyleExceptionInfo326);
      latentStyles1.Append(latentStyleExceptionInfo327);
      latentStyles1.Append(latentStyleExceptionInfo328);
      latentStyles1.Append(latentStyleExceptionInfo329);
      latentStyles1.Append(latentStyleExceptionInfo330);
      latentStyles1.Append(latentStyleExceptionInfo331);
      latentStyles1.Append(latentStyleExceptionInfo332);
      latentStyles1.Append(latentStyleExceptionInfo333);
      latentStyles1.Append(latentStyleExceptionInfo334);
      latentStyles1.Append(latentStyleExceptionInfo335);
      latentStyles1.Append(latentStyleExceptionInfo336);
      latentStyles1.Append(latentStyleExceptionInfo337);
      latentStyles1.Append(latentStyleExceptionInfo338);
      latentStyles1.Append(latentStyleExceptionInfo339);
      latentStyles1.Append(latentStyleExceptionInfo340);
      latentStyles1.Append(latentStyleExceptionInfo341);
      latentStyles1.Append(latentStyleExceptionInfo342);
      latentStyles1.Append(latentStyleExceptionInfo343);
      latentStyles1.Append(latentStyleExceptionInfo344);
      latentStyles1.Append(latentStyleExceptionInfo345);
      latentStyles1.Append(latentStyleExceptionInfo346);
      latentStyles1.Append(latentStyleExceptionInfo347);
      latentStyles1.Append(latentStyleExceptionInfo348);
      latentStyles1.Append(latentStyleExceptionInfo349);
      latentStyles1.Append(latentStyleExceptionInfo350);
      latentStyles1.Append(latentStyleExceptionInfo351);
      latentStyles1.Append(latentStyleExceptionInfo352);
      latentStyles1.Append(latentStyleExceptionInfo353);
      latentStyles1.Append(latentStyleExceptionInfo354);
      latentStyles1.Append(latentStyleExceptionInfo355);
      latentStyles1.Append(latentStyleExceptionInfo356);
      latentStyles1.Append(latentStyleExceptionInfo357);
      latentStyles1.Append(latentStyleExceptionInfo358);
      latentStyles1.Append(latentStyleExceptionInfo359);
      latentStyles1.Append(latentStyleExceptionInfo360);
      latentStyles1.Append(latentStyleExceptionInfo361);
      latentStyles1.Append(latentStyleExceptionInfo362);
      latentStyles1.Append(latentStyleExceptionInfo363);
      latentStyles1.Append(latentStyleExceptionInfo364);
      latentStyles1.Append(latentStyleExceptionInfo365);
      latentStyles1.Append(latentStyleExceptionInfo366);
      latentStyles1.Append(latentStyleExceptionInfo367);
      latentStyles1.Append(latentStyleExceptionInfo368);
      latentStyles1.Append(latentStyleExceptionInfo369);
      latentStyles1.Append(latentStyleExceptionInfo370);
      latentStyles1.Append(latentStyleExceptionInfo371);

      DocumentFormat.OpenXml.Wordprocessing.Style style1 = new DocumentFormat.OpenXml.Wordprocessing.Style() { Type = StyleValues.Paragraph, StyleId = "Normal", Default = true };
      StyleName styleName1 = new StyleName() { Val = "Normal" };
      PrimaryStyle primaryStyle1 = new PrimaryStyle();
      Rsid rsid1 = new Rsid() { Val = "0023422A" };

      StyleRunProperties styleRunProperties1 = new StyleRunProperties();
      RunFonts runFonts2 = new RunFonts() { Ascii = "Cambria", HighAnsi = "Cambria", ComplexScript = "Cambria" };
      FontSize fontSize1 = new FontSize() { Val = "24" };
      FontSizeComplexScript fontSizeComplexScript1 = new FontSizeComplexScript() { Val = "24" };
      DocumentFormat.OpenXml.Wordprocessing.Languages languages2 = new DocumentFormat.OpenXml.Wordprocessing.Languages() { Val = "it-IT", EastAsia = "it-IT" };

      styleRunProperties1.Append(runFonts2);
      styleRunProperties1.Append(fontSize1);
      styleRunProperties1.Append(fontSizeComplexScript1);
      styleRunProperties1.Append(languages2);

      style1.Append(styleName1);
      style1.Append(primaryStyle1);
      style1.Append(rsid1);
      style1.Append(styleRunProperties1);

      DocumentFormat.OpenXml.Wordprocessing.Style style2 = new DocumentFormat.OpenXml.Wordprocessing.Style() { Type = StyleValues.Paragraph, StyleId = "Heading1" };
      StyleName styleName2 = new StyleName() { Val = "heading 1" };
      BasedOn basedOn1 = new BasedOn() { Val = "Normal" };
      NextParagraphStyle nextParagraphStyle1 = new NextParagraphStyle() { Val = "Normal" };
      LinkedStyle linkedStyle1 = new LinkedStyle() { Val = "Heading1Char" };
      UIPriority uIPriority1 = new UIPriority() { Val = 9 };
      PrimaryStyle primaryStyle2 = new PrimaryStyle();
      Rsid rsid2 = new Rsid() { Val = "00873C64" };

      StyleParagraphProperties styleParagraphProperties1 = new StyleParagraphProperties();
      KeepNext keepNext1 = new KeepNext();
      SpacingBetweenLines spacingBetweenLines1 = new SpacingBetweenLines() { Before = "240", After = "60" };
      DocumentFormat.OpenXml.Wordprocessing.OutlineLevel outlineLevel1 = new DocumentFormat.OpenXml.Wordprocessing.OutlineLevel() { Val = 0 };

      styleParagraphProperties1.Append(keepNext1);
      styleParagraphProperties1.Append(spacingBetweenLines1);
      styleParagraphProperties1.Append(outlineLevel1);

      StyleRunProperties styleRunProperties2 = new StyleRunProperties();
      Bold bold1 = new Bold();
      BoldComplexScript boldComplexScript1 = new BoldComplexScript();
      Kern kern1 = new Kern() { Val = (UInt32Value)32U };
      FontSize fontSize2 = new FontSize() { Val = "32" };
      FontSizeComplexScript fontSizeComplexScript2 = new FontSizeComplexScript() { Val = "32" };

      styleRunProperties2.Append(bold1);
      styleRunProperties2.Append(boldComplexScript1);
      styleRunProperties2.Append(kern1);
      styleRunProperties2.Append(fontSize2);
      styleRunProperties2.Append(fontSizeComplexScript2);

      style2.Append(styleName2);
      style2.Append(basedOn1);
      style2.Append(nextParagraphStyle1);
      style2.Append(linkedStyle1);
      style2.Append(uIPriority1);
      style2.Append(primaryStyle2);
      style2.Append(rsid2);
      style2.Append(styleParagraphProperties1);
      style2.Append(styleRunProperties2);

      DocumentFormat.OpenXml.Wordprocessing.Style style3 = new DocumentFormat.OpenXml.Wordprocessing.Style() { Type = StyleValues.Paragraph, StyleId = "Heading7" };
      StyleName styleName3 = new StyleName() { Val = "heading 7" };
      BasedOn basedOn2 = new BasedOn() { Val = "Normal" };
      NextParagraphStyle nextParagraphStyle2 = new NextParagraphStyle() { Val = "Normal" };
      LinkedStyle linkedStyle2 = new LinkedStyle() { Val = "Heading7Char" };
      UIPriority uIPriority2 = new UIPriority() { Val = 9 };
      PrimaryStyle primaryStyle3 = new PrimaryStyle();
      Rsid rsid3 = new Rsid() { Val = "009B54C6" };

      StyleParagraphProperties styleParagraphProperties2 = new StyleParagraphProperties();
      KeepNext keepNext2 = new KeepNext();
      SpacingBetweenLines spacingBetweenLines2 = new SpacingBetweenLines() { Line = "240", LineRule = LineSpacingRuleValues.AtLeast };
      Justification justification1 = new Justification() { Val = JustificationValues.Center };
      DocumentFormat.OpenXml.Wordprocessing.OutlineLevel outlineLevel2 = new DocumentFormat.OpenXml.Wordprocessing.OutlineLevel() { Val = 6 };

      styleParagraphProperties2.Append(keepNext2);
      styleParagraphProperties2.Append(spacingBetweenLines2);
      styleParagraphProperties2.Append(justification1);
      styleParagraphProperties2.Append(outlineLevel2);

      StyleRunProperties styleRunProperties3 = new StyleRunProperties();
      Bold bold2 = new Bold();
      Italic italic1 = new Italic();
      FontSize fontSize3 = new FontSize() { Val = "40" };
      FontSizeComplexScript fontSizeComplexScript3 = new FontSizeComplexScript() { Val = "20" };

      styleRunProperties3.Append(bold2);
      styleRunProperties3.Append(italic1);
      styleRunProperties3.Append(fontSize3);
      styleRunProperties3.Append(fontSizeComplexScript3);

      style3.Append(styleName3);
      style3.Append(basedOn2);
      style3.Append(nextParagraphStyle2);
      style3.Append(linkedStyle2);
      style3.Append(uIPriority2);
      style3.Append(primaryStyle3);
      style3.Append(rsid3);
      style3.Append(styleParagraphProperties2);
      style3.Append(styleRunProperties3);

      DocumentFormat.OpenXml.Wordprocessing.Style style4 = new DocumentFormat.OpenXml.Wordprocessing.Style() { Type = StyleValues.Character, StyleId = "DefaultParagraphFont", Default = true };
      StyleName styleName4 = new StyleName() { Val = "Default Paragraph Font" };
      UIPriority uIPriority3 = new UIPriority() { Val = 1 };
      SemiHidden semiHidden1 = new SemiHidden();

      style4.Append(styleName4);
      style4.Append(uIPriority3);
      style4.Append(semiHidden1);

      DocumentFormat.OpenXml.Wordprocessing.Style style5 = new DocumentFormat.OpenXml.Wordprocessing.Style() { Type = StyleValues.Table, StyleId = "TableNormal", Default = true };
      StyleName styleName5 = new StyleName() { Val = "Normal Table" };
      UIPriority uIPriority4 = new UIPriority() { Val = 99 };
      SemiHidden semiHidden2 = new SemiHidden();
      UnhideWhenUsed unhideWhenUsed1 = new UnhideWhenUsed();

      StyleTableProperties styleTableProperties1 = new StyleTableProperties();
      TableIndentation tableIndentation1 = new TableIndentation() { Width = 0, Type = TableWidthUnitValues.Dxa };

      TableCellMarginDefault tableCellMarginDefault1 = new TableCellMarginDefault();
      TopMargin topMargin1 = new TopMargin() { Width = "0", Type = TableWidthUnitValues.Dxa };
      TableCellLeftMargin tableCellLeftMargin1 = new TableCellLeftMargin() { Width = 108, Type = TableWidthValues.Dxa };
      BottomMargin bottomMargin1 = new BottomMargin() { Width = "0", Type = TableWidthUnitValues.Dxa };
      TableCellRightMargin tableCellRightMargin1 = new TableCellRightMargin() { Width = 108, Type = TableWidthValues.Dxa };

      tableCellMarginDefault1.Append(topMargin1);
      tableCellMarginDefault1.Append(tableCellLeftMargin1);
      tableCellMarginDefault1.Append(bottomMargin1);
      tableCellMarginDefault1.Append(tableCellRightMargin1);

      styleTableProperties1.Append(tableIndentation1);
      styleTableProperties1.Append(tableCellMarginDefault1);

      style5.Append(styleName5);
      style5.Append(uIPriority4);
      style5.Append(semiHidden2);
      style5.Append(unhideWhenUsed1);
      style5.Append(styleTableProperties1);

      DocumentFormat.OpenXml.Wordprocessing.Style style6 = new DocumentFormat.OpenXml.Wordprocessing.Style() { Type = StyleValues.Numbering, StyleId = "NoList", Default = true };
      StyleName styleName6 = new StyleName() { Val = "No List" };
      UIPriority uIPriority5 = new UIPriority() { Val = 99 };
      SemiHidden semiHidden3 = new SemiHidden();
      UnhideWhenUsed unhideWhenUsed2 = new UnhideWhenUsed();

      style6.Append(styleName6);
      style6.Append(uIPriority5);
      style6.Append(semiHidden3);
      style6.Append(unhideWhenUsed2);

      DocumentFormat.OpenXml.Wordprocessing.Style style7 = new DocumentFormat.OpenXml.Wordprocessing.Style() { Type = StyleValues.Character, StyleId = "Heading1Char", CustomStyle = true };
      StyleName styleName7 = new StyleName() { Val = "Heading 1 Char" };
      LinkedStyle linkedStyle3 = new LinkedStyle() { Val = "Heading1" };
      UIPriority uIPriority6 = new UIPriority() { Val = 9 };
      Locked locked1 = new Locked();
      Rsid rsid4 = new Rsid() { Val = "00873C64" };

      StyleRunProperties styleRunProperties4 = new StyleRunProperties();
      RunFonts runFonts3 = new RunFonts() { Ascii = "Cambria", HighAnsi = "Cambria", ComplexScript = "Cambria" };
      Bold bold3 = new Bold();
      Kern kern2 = new Kern() { Val = (UInt32Value)32U };
      FontSize fontSize4 = new FontSize() { Val = "32" };

      styleRunProperties4.Append(runFonts3);
      styleRunProperties4.Append(bold3);
      styleRunProperties4.Append(kern2);
      styleRunProperties4.Append(fontSize4);

      style7.Append(styleName7);
      style7.Append(linkedStyle3);
      style7.Append(uIPriority6);
      style7.Append(locked1);
      style7.Append(rsid4);
      style7.Append(styleRunProperties4);

      DocumentFormat.OpenXml.Wordprocessing.Style style8 = new DocumentFormat.OpenXml.Wordprocessing.Style() { Type = StyleValues.Character, StyleId = "Heading7Char", CustomStyle = true };
      StyleName styleName8 = new StyleName() { Val = "Heading 7 Char" };
      LinkedStyle linkedStyle4 = new LinkedStyle() { Val = "Heading7" };
      UIPriority uIPriority7 = new UIPriority() { Val = 9 };
      SemiHidden semiHidden4 = new SemiHidden();
      Locked locked2 = new Locked();

      StyleRunProperties styleRunProperties5 = new StyleRunProperties();
      RunFonts runFonts4 = new RunFonts() { Ascii = "Cambria", HighAnsi = "Cambria", ComplexScript = "Cambria" };
      FontSize fontSize5 = new FontSize() { Val = "24" };
      FontSizeComplexScript fontSizeComplexScript4 = new FontSizeComplexScript() { Val = "24" };

      styleRunProperties5.Append(runFonts4);
      styleRunProperties5.Append(fontSize5);
      styleRunProperties5.Append(fontSizeComplexScript4);

      style8.Append(styleName8);
      style8.Append(linkedStyle4);
      style8.Append(uIPriority7);
      style8.Append(semiHidden4);
      style8.Append(locked2);
      style8.Append(styleRunProperties5);

      DocumentFormat.OpenXml.Wordprocessing.Style style9 = new DocumentFormat.OpenXml.Wordprocessing.Style() { Type = StyleValues.Table, StyleId = "TableGrid" };
      StyleName styleName9 = new StyleName() { Val = "Table Grid" };
      BasedOn basedOn3 = new BasedOn() { Val = "TableNormal" };
      UIPriority uIPriority8 = new UIPriority() { Val = 59 };
      Rsid rsid5 = new Rsid() { Val = "008A2B08" };

      StyleRunProperties styleRunProperties6 = new StyleRunProperties();
      RunFonts runFonts5 = new RunFonts() { Ascii = "Cambria", HighAnsi = "Cambria", ComplexScript = "Cambria" };

      styleRunProperties6.Append(runFonts5);

      StyleTableProperties styleTableProperties2 = new StyleTableProperties();

      TableBorders tableBorders1 = new TableBorders();
      TopBorder topBorder1 = new TopBorder() { Val = BorderValues.Single, Color = "auto", Size = (UInt32Value)4U, Space = (UInt32Value)0U };
      LeftBorder leftBorder1 = new LeftBorder() { Val = BorderValues.Single, Color = "auto", Size = (UInt32Value)4U, Space = (UInt32Value)0U };
      BottomBorder bottomBorder1 = new BottomBorder() { Val = BorderValues.Single, Color = "auto", Size = (UInt32Value)4U, Space = (UInt32Value)0U };
      RightBorder rightBorder1 = new RightBorder() { Val = BorderValues.Single, Color = "auto", Size = (UInt32Value)4U, Space = (UInt32Value)0U };
      InsideHorizontalBorder insideHorizontalBorder1 = new InsideHorizontalBorder() { Val = BorderValues.Single, Color = "auto", Size = (UInt32Value)4U, Space = (UInt32Value)0U };
      InsideVerticalBorder insideVerticalBorder1 = new InsideVerticalBorder() { Val = BorderValues.Single, Color = "auto", Size = (UInt32Value)4U, Space = (UInt32Value)0U };

      tableBorders1.Append(topBorder1);
      tableBorders1.Append(leftBorder1);
      tableBorders1.Append(bottomBorder1);
      tableBorders1.Append(rightBorder1);
      tableBorders1.Append(insideHorizontalBorder1);
      tableBorders1.Append(insideVerticalBorder1);

      styleTableProperties2.Append(tableBorders1);

      style9.Append(styleName9);
      style9.Append(basedOn3);
      style9.Append(uIPriority8);
      style9.Append(rsid5);
      style9.Append(styleRunProperties6);
      style9.Append(styleTableProperties2);

      DocumentFormat.OpenXml.Wordprocessing.Style style10 = new DocumentFormat.OpenXml.Wordprocessing.Style() { Type = StyleValues.Character, StyleId = "Hyperlink" };
      StyleName styleName10 = new StyleName() { Val = "Hyperlink" };
      UIPriority uIPriority9 = new UIPriority() { Val = 99 };
      Rsid rsid6 = new Rsid() { Val = "00CD173D" };

      StyleRunProperties styleRunProperties7 = new StyleRunProperties();
      RunFonts runFonts6 = new RunFonts() { ComplexScript = "Cambria" };
      DocumentFormat.OpenXml.Wordprocessing.Color color1 = new DocumentFormat.OpenXml.Wordprocessing.Color() { Val = "auto" };
      Underline underline1 = new Underline() { Val = UnderlineValues.Single };

      styleRunProperties7.Append(runFonts6);
      styleRunProperties7.Append(color1);
      styleRunProperties7.Append(underline1);

      style10.Append(styleName10);
      style10.Append(uIPriority9);
      style10.Append(rsid6);
      style10.Append(styleRunProperties7);

      DocumentFormat.OpenXml.Wordprocessing.Style style11 = new DocumentFormat.OpenXml.Wordprocessing.Style() { Type = StyleValues.Paragraph, StyleId = "Indirizzointerno", CustomStyle = true };
      StyleName styleName11 = new StyleName() { Val = "Indirizzo interno" };
      BasedOn basedOn4 = new BasedOn() { Val = "Normal" };
      Rsid rsid7 = new Rsid() { Val = "0039274E" };

      StyleParagraphProperties styleParagraphProperties3 = new StyleParagraphProperties();
      Indentation indentation1 = new Indentation() { Start = "835", End = "-360" };

      styleParagraphProperties3.Append(indentation1);

      StyleRunProperties styleRunProperties8 = new StyleRunProperties();
      FontSize fontSize6 = new FontSize() { Val = "20" };
      FontSizeComplexScript fontSizeComplexScript5 = new FontSizeComplexScript() { Val = "20" };

      styleRunProperties8.Append(fontSize6);
      styleRunProperties8.Append(fontSizeComplexScript5);

      style11.Append(styleName11);
      style11.Append(basedOn4);
      style11.Append(rsid7);
      style11.Append(styleParagraphProperties3);
      style11.Append(styleRunProperties8);

      DocumentFormat.OpenXml.Wordprocessing.Style style12 = new DocumentFormat.OpenXml.Wordprocessing.Style() { Type = StyleValues.Paragraph, StyleId = "Header" };
      StyleName styleName12 = new StyleName() { Val = "header" };
      BasedOn basedOn5 = new BasedOn() { Val = "Normal" };
      LinkedStyle linkedStyle5 = new LinkedStyle() { Val = "HeaderChar" };
      UIPriority uIPriority10 = new UIPriority() { Val = 99 };
      Rsid rsid8 = new Rsid() { Val = "00AB67C7" };

      StyleParagraphProperties styleParagraphProperties4 = new StyleParagraphProperties();

      Tabs tabs1 = new Tabs();
      DocumentFormat.OpenXml.Wordprocessing.TabStop tabStop1 = new DocumentFormat.OpenXml.Wordprocessing.TabStop() { Val = TabStopValues.Center, Position = 4819 };
      DocumentFormat.OpenXml.Wordprocessing.TabStop tabStop2 = new DocumentFormat.OpenXml.Wordprocessing.TabStop() { Val = TabStopValues.Right, Position = 9638 };

      tabs1.Append(tabStop1);
      tabs1.Append(tabStop2);
      OverflowPunctuation overflowPunctuation1 = new OverflowPunctuation() { Val = false };
      AutoSpaceDE autoSpaceDE1 = new AutoSpaceDE() { Val = false };
      AutoSpaceDN autoSpaceDN1 = new AutoSpaceDN() { Val = false };
      AdjustRightIndent adjustRightIndent1 = new AdjustRightIndent() { Val = false };
      TextAlignment textAlignment1 = new TextAlignment() { Val = VerticalTextAlignmentValues.Baseline };

      styleParagraphProperties4.Append(tabs1);
      styleParagraphProperties4.Append(overflowPunctuation1);
      styleParagraphProperties4.Append(autoSpaceDE1);
      styleParagraphProperties4.Append(autoSpaceDN1);
      styleParagraphProperties4.Append(adjustRightIndent1);
      styleParagraphProperties4.Append(textAlignment1);

      StyleRunProperties styleRunProperties9 = new StyleRunProperties();
      FontSize fontSize7 = new FontSize() { Val = "20" };
      FontSizeComplexScript fontSizeComplexScript6 = new FontSizeComplexScript() { Val = "20" };

      styleRunProperties9.Append(fontSize7);
      styleRunProperties9.Append(fontSizeComplexScript6);

      style12.Append(styleName12);
      style12.Append(basedOn5);
      style12.Append(linkedStyle5);
      style12.Append(uIPriority10);
      style12.Append(rsid8);
      style12.Append(styleParagraphProperties4);
      style12.Append(styleRunProperties9);

      DocumentFormat.OpenXml.Wordprocessing.Style style13 = new DocumentFormat.OpenXml.Wordprocessing.Style() { Type = StyleValues.Character, StyleId = "HeaderChar", CustomStyle = true };
      StyleName styleName13 = new StyleName() { Val = "Header Char" };
      LinkedStyle linkedStyle6 = new LinkedStyle() { Val = "Header" };
      UIPriority uIPriority11 = new UIPriority() { Val = 99 };
      Locked locked3 = new Locked();
      Rsid rsid9 = new Rsid() { Val = "0091322E" };

      StyleRunProperties styleRunProperties10 = new StyleRunProperties();
      RunFonts runFonts7 = new RunFonts() { ComplexScript = "Cambria" };

      styleRunProperties10.Append(runFonts7);

      style13.Append(styleName13);
      style13.Append(linkedStyle6);
      style13.Append(uIPriority11);
      style13.Append(locked3);
      style13.Append(rsid9);
      style13.Append(styleRunProperties10);

      DocumentFormat.OpenXml.Wordprocessing.Style style14 = new DocumentFormat.OpenXml.Wordprocessing.Style() { Type = StyleValues.Character, StyleId = "Strong" };
      StyleName styleName14 = new StyleName() { Val = "Strong" };
      UIPriority uIPriority12 = new UIPriority() { Val = 22 };
      PrimaryStyle primaryStyle4 = new PrimaryStyle();
      Rsid rsid10 = new Rsid() { Val = "009075F0" };

      StyleRunProperties styleRunProperties11 = new StyleRunProperties();
      RunFonts runFonts8 = new RunFonts() { ComplexScript = "Cambria" };
      Bold bold4 = new Bold();

      styleRunProperties11.Append(runFonts8);
      styleRunProperties11.Append(bold4);

      style14.Append(styleName14);
      style14.Append(uIPriority12);
      style14.Append(primaryStyle4);
      style14.Append(rsid10);
      style14.Append(styleRunProperties11);

      DocumentFormat.OpenXml.Wordprocessing.Style style15 = new DocumentFormat.OpenXml.Wordprocessing.Style() { Type = StyleValues.Paragraph, StyleId = "Footer" };
      StyleName styleName15 = new StyleName() { Val = "footer" };
      BasedOn basedOn6 = new BasedOn() { Val = "Normal" };
      LinkedStyle linkedStyle7 = new LinkedStyle() { Val = "FooterChar" };
      UIPriority uIPriority13 = new UIPriority() { Val = 99 };
      Rsid rsid11 = new Rsid() { Val = "008859BD" };

      StyleParagraphProperties styleParagraphProperties5 = new StyleParagraphProperties();

      Tabs tabs2 = new Tabs();
      DocumentFormat.OpenXml.Wordprocessing.TabStop tabStop3 = new DocumentFormat.OpenXml.Wordprocessing.TabStop() { Val = TabStopValues.Center, Position = 4819 };
      DocumentFormat.OpenXml.Wordprocessing.TabStop tabStop4 = new DocumentFormat.OpenXml.Wordprocessing.TabStop() { Val = TabStopValues.Right, Position = 9638 };

      tabs2.Append(tabStop3);
      tabs2.Append(tabStop4);

      styleParagraphProperties5.Append(tabs2);

      style15.Append(styleName15);
      style15.Append(basedOn6);
      style15.Append(linkedStyle7);
      style15.Append(uIPriority13);
      style15.Append(rsid11);
      style15.Append(styleParagraphProperties5);

      DocumentFormat.OpenXml.Wordprocessing.Style style16 = new DocumentFormat.OpenXml.Wordprocessing.Style() { Type = StyleValues.Character, StyleId = "FooterChar", CustomStyle = true };
      StyleName styleName16 = new StyleName() { Val = "Footer Char" };
      LinkedStyle linkedStyle8 = new LinkedStyle() { Val = "Footer" };
      UIPriority uIPriority14 = new UIPriority() { Val = 99 };
      Locked locked4 = new Locked();
      Rsid rsid12 = new Rsid() { Val = "005E18BF" };

      StyleRunProperties styleRunProperties12 = new StyleRunProperties();
      RunFonts runFonts9 = new RunFonts() { ComplexScript = "Cambria" };
      FontSize fontSize8 = new FontSize() { Val = "24" };

      styleRunProperties12.Append(runFonts9);
      styleRunProperties12.Append(fontSize8);

      style16.Append(styleName16);
      style16.Append(linkedStyle8);
      style16.Append(uIPriority14);
      style16.Append(locked4);
      style16.Append(rsid12);
      style16.Append(styleRunProperties12);

      DocumentFormat.OpenXml.Wordprocessing.Style style17 = new DocumentFormat.OpenXml.Wordprocessing.Style() { Type = StyleValues.Character, StyleId = "PageNumber" };
      StyleName styleName17 = new StyleName() { Val = "page number" };
      UIPriority uIPriority15 = new UIPriority() { Val = 99 };
      Rsid rsid13 = new Rsid() { Val = "008859BD" };

      StyleRunProperties styleRunProperties13 = new StyleRunProperties();
      RunFonts runFonts10 = new RunFonts() { ComplexScript = "Cambria" };

      styleRunProperties13.Append(runFonts10);

      style17.Append(styleName17);
      style17.Append(uIPriority15);
      style17.Append(rsid13);
      style17.Append(styleRunProperties13);

      DocumentFormat.OpenXml.Wordprocessing.Style style18 = new DocumentFormat.OpenXml.Wordprocessing.Style() { Type = StyleValues.Paragraph, StyleId = "NormalWeb" };
      StyleName styleName18 = new StyleName() { Val = "Normal (Web)" };
      BasedOn basedOn7 = new BasedOn() { Val = "Normal" };
      UIPriority uIPriority16 = new UIPriority() { Val = 99 };
      Rsid rsid14 = new Rsid() { Val = "006E303F" };

      StyleParagraphProperties styleParagraphProperties6 = new StyleParagraphProperties();
      SpacingBetweenLines spacingBetweenLines3 = new SpacingBetweenLines() { After = "225" };

      styleParagraphProperties6.Append(spacingBetweenLines3);

      style18.Append(styleName18);
      style18.Append(basedOn7);
      style18.Append(uIPriority16);
      style18.Append(rsid14);
      style18.Append(styleParagraphProperties6);

      DocumentFormat.OpenXml.Wordprocessing.Style style19 = new DocumentFormat.OpenXml.Wordprocessing.Style() { Type = StyleValues.Paragraph, StyleId = "BodyText2" };
      StyleName styleName19 = new StyleName() { Val = "Body Text 2" };
      BasedOn basedOn8 = new BasedOn() { Val = "Normal" };
      LinkedStyle linkedStyle9 = new LinkedStyle() { Val = "BodyText2Char" };
      UIPriority uIPriority17 = new UIPriority() { Val = 99 };
      Rsid rsid15 = new Rsid() { Val = "009B54C6" };

      StyleParagraphProperties styleParagraphProperties7 = new StyleParagraphProperties();
      SpacingBetweenLines spacingBetweenLines4 = new SpacingBetweenLines() { Line = "240", LineRule = LineSpacingRuleValues.AtLeast };
      Indentation indentation2 = new Indentation() { End = "333" };

      styleParagraphProperties7.Append(spacingBetweenLines4);
      styleParagraphProperties7.Append(indentation2);

      StyleRunProperties styleRunProperties14 = new StyleRunProperties();
      Bold bold5 = new Bold();
      FontSizeComplexScript fontSizeComplexScript7 = new FontSizeComplexScript() { Val = "20" };

      styleRunProperties14.Append(bold5);
      styleRunProperties14.Append(fontSizeComplexScript7);

      style19.Append(styleName19);
      style19.Append(basedOn8);
      style19.Append(linkedStyle9);
      style19.Append(uIPriority17);
      style19.Append(rsid15);
      style19.Append(styleParagraphProperties7);
      style19.Append(styleRunProperties14);

      DocumentFormat.OpenXml.Wordprocessing.Style style20 = new DocumentFormat.OpenXml.Wordprocessing.Style() { Type = StyleValues.Character, StyleId = "BodyText2Char", CustomStyle = true };
      StyleName styleName20 = new StyleName() { Val = "Body Text 2 Char" };
      LinkedStyle linkedStyle10 = new LinkedStyle() { Val = "BodyText2" };
      UIPriority uIPriority18 = new UIPriority() { Val = 99 };
      SemiHidden semiHidden5 = new SemiHidden();
      Locked locked5 = new Locked();

      StyleRunProperties styleRunProperties15 = new StyleRunProperties();
      RunFonts runFonts11 = new RunFonts() { ComplexScript = "Cambria" };
      FontSize fontSize9 = new FontSize() { Val = "24" };
      FontSizeComplexScript fontSizeComplexScript8 = new FontSizeComplexScript() { Val = "24" };

      styleRunProperties15.Append(runFonts11);
      styleRunProperties15.Append(fontSize9);
      styleRunProperties15.Append(fontSizeComplexScript8);

      style20.Append(styleName20);
      style20.Append(linkedStyle10);
      style20.Append(uIPriority18);
      style20.Append(semiHidden5);
      style20.Append(locked5);
      style20.Append(styleRunProperties15);

      DocumentFormat.OpenXml.Wordprocessing.Style style21 = new DocumentFormat.OpenXml.Wordprocessing.Style() { Type = StyleValues.Character, StyleId = "themebody1", CustomStyle = true };
      StyleName styleName21 = new StyleName() { Val = "themebody1" };
      Rsid rsid16 = new Rsid() { Val = "00065544" };

      StyleRunProperties styleRunProperties16 = new StyleRunProperties();
      DocumentFormat.OpenXml.Wordprocessing.Color color2 = new DocumentFormat.OpenXml.Wordprocessing.Color() { Val = "auto" };

      styleRunProperties16.Append(color2);

      style21.Append(styleName21);
      style21.Append(rsid16);
      style21.Append(styleRunProperties16);

      DocumentFormat.OpenXml.Wordprocessing.Style style22 = new DocumentFormat.OpenXml.Wordprocessing.Style() { Type = StyleValues.Paragraph, StyleId = "BlockText" };
      StyleName styleName22 = new StyleName() { Val = "Block Text" };
      BasedOn basedOn9 = new BasedOn() { Val = "Normal" };
      UIPriority uIPriority19 = new UIPriority() { Val = 99 };
      Rsid rsid17 = new Rsid() { Val = "008B1EE4" };

      StyleParagraphProperties styleParagraphProperties8 = new StyleParagraphProperties();
      Indentation indentation3 = new Indentation() { Start = "900", End = "98" };

      styleParagraphProperties8.Append(indentation3);

      StyleRunProperties styleRunProperties17 = new StyleRunProperties();
      FontSize fontSize10 = new FontSize() { Val = "20" };
      FontSizeComplexScript fontSizeComplexScript9 = new FontSizeComplexScript() { Val = "20" };

      styleRunProperties17.Append(fontSize10);
      styleRunProperties17.Append(fontSizeComplexScript9);

      style22.Append(styleName22);
      style22.Append(basedOn9);
      style22.Append(uIPriority19);
      style22.Append(rsid17);
      style22.Append(styleParagraphProperties8);
      style22.Append(styleRunProperties17);

      DocumentFormat.OpenXml.Wordprocessing.Style style23 = new DocumentFormat.OpenXml.Wordprocessing.Style() { Type = StyleValues.Character, StyleId = "normale111", CustomStyle = true };
      StyleName styleName23 = new StyleName() { Val = "normale111" };
      Rsid rsid18 = new Rsid() { Val = "00E73252" };

      StyleRunProperties styleRunProperties18 = new StyleRunProperties();
      RunFonts runFonts12 = new RunFonts() { Ascii = "Cambria", HighAnsi = "Cambria" };
      DocumentFormat.OpenXml.Wordprocessing.Color color3 = new DocumentFormat.OpenXml.Wordprocessing.Color() { Val = "auto" };
      FontSize fontSize11 = new FontSize() { Val = "17" };

      styleRunProperties18.Append(runFonts12);
      styleRunProperties18.Append(color3);
      styleRunProperties18.Append(fontSize11);

      style23.Append(styleName23);
      style23.Append(rsid18);
      style23.Append(styleRunProperties18);

      DocumentFormat.OpenXml.Wordprocessing.Style style24 = new DocumentFormat.OpenXml.Wordprocessing.Style() { Type = StyleValues.Paragraph, StyleId = "BalloonText" };
      StyleName styleName24 = new StyleName() { Val = "Balloon Text" };
      BasedOn basedOn10 = new BasedOn() { Val = "Normal" };
      LinkedStyle linkedStyle11 = new LinkedStyle() { Val = "BalloonTextChar" };
      UIPriority uIPriority20 = new UIPriority() { Val = 99 };
      SemiHidden semiHidden6 = new SemiHidden();
      UnhideWhenUsed unhideWhenUsed3 = new UnhideWhenUsed();
      Rsid rsid19 = new Rsid() { Val = "001B4971" };

      StyleRunProperties styleRunProperties19 = new StyleRunProperties();
      FontSize fontSize12 = new FontSize() { Val = "16" };
      FontSizeComplexScript fontSizeComplexScript10 = new FontSizeComplexScript() { Val = "16" };

      styleRunProperties19.Append(fontSize12);
      styleRunProperties19.Append(fontSizeComplexScript10);

      style24.Append(styleName24);
      style24.Append(basedOn10);
      style24.Append(linkedStyle11);
      style24.Append(uIPriority20);
      style24.Append(semiHidden6);
      style24.Append(unhideWhenUsed3);
      style24.Append(rsid19);
      style24.Append(styleRunProperties19);

      DocumentFormat.OpenXml.Wordprocessing.Style style25 = new DocumentFormat.OpenXml.Wordprocessing.Style() { Type = StyleValues.Character, StyleId = "BalloonTextChar", CustomStyle = true };
      StyleName styleName25 = new StyleName() { Val = "Balloon Text Char" };
      LinkedStyle linkedStyle12 = new LinkedStyle() { Val = "BalloonText" };
      UIPriority uIPriority21 = new UIPriority() { Val = 99 };
      SemiHidden semiHidden7 = new SemiHidden();
      Locked locked6 = new Locked();
      Rsid rsid20 = new Rsid() { Val = "001B4971" };

      StyleRunProperties styleRunProperties20 = new StyleRunProperties();
      RunFonts runFonts13 = new RunFonts() { Ascii = "Cambria", HighAnsi = "Cambria", ComplexScript = "Cambria" };
      FontSize fontSize13 = new FontSize() { Val = "16" };

      styleRunProperties20.Append(runFonts13);
      styleRunProperties20.Append(fontSize13);

      style25.Append(styleName25);
      style25.Append(linkedStyle12);
      style25.Append(uIPriority21);
      style25.Append(semiHidden7);
      style25.Append(locked6);
      style25.Append(rsid20);
      style25.Append(styleRunProperties20);

      DocumentFormat.OpenXml.Wordprocessing.Style style26 = new DocumentFormat.OpenXml.Wordprocessing.Style() { Type = StyleValues.Paragraph, StyleId = "ListParagraph" };
      StyleName styleName26 = new StyleName() { Val = "List Paragraph" };
      BasedOn basedOn11 = new BasedOn() { Val = "Normal" };
      UIPriority uIPriority22 = new UIPriority() { Val = 34 };
      PrimaryStyle primaryStyle5 = new PrimaryStyle();
      Rsid rsid21 = new Rsid() { Val = "00D1577C" };

      StyleParagraphProperties styleParagraphProperties9 = new StyleParagraphProperties();
      Indentation indentation4 = new Indentation() { Start = "708" };

      styleParagraphProperties9.Append(indentation4);

      style26.Append(styleName26);
      style26.Append(basedOn11);
      style26.Append(uIPriority22);
      style26.Append(primaryStyle5);
      style26.Append(rsid21);
      style26.Append(styleParagraphProperties9);

      DocumentFormat.OpenXml.Wordprocessing.Style style27 = new DocumentFormat.OpenXml.Wordprocessing.Style() { Type = StyleValues.Character, StyleId = "nodenavigates", CustomStyle = true };
      StyleName styleName27 = new StyleName() { Val = "node_navigates" };
      Rsid rsid22 = new Rsid() { Val = "00193450" };

      style27.Append(styleName27);
      style27.Append(rsid22);

      styles1.Append(docDefaults1);
      styles1.Append(latentStyles1);
      styles1.Append(style1);
      styles1.Append(style2);
      styles1.Append(style3);
      styles1.Append(style4);
      styles1.Append(style5);
      styles1.Append(style6);
      styles1.Append(style7);
      styles1.Append(style8);
      styles1.Append(style9);
      styles1.Append(style10);
      styles1.Append(style11);
      styles1.Append(style12);
      styles1.Append(style13);
      styles1.Append(style14);
      styles1.Append(style15);
      styles1.Append(style16);
      styles1.Append(style17);
      styles1.Append(style18);
      styles1.Append(style19);
      styles1.Append(style20);
      styles1.Append(style21);
      styles1.Append(style22);
      styles1.Append(style23);
      styles1.Append(style24);
      styles1.Append(style25);
      styles1.Append(style26);
      styles1.Append(style27);

      part.Styles = styles1;
    }

    #endregion

    #region Setting Definition

    public void CreateDocumentSettingsPart(DocumentSettingsPart part)
    {


      Settings settings1 = new Settings() { MCAttributes = new MarkupCompatibilityAttributes() { Ignorable = "w14 w15" } };
      settings1.AddNamespaceDeclaration("mc", "http://schemas.openxmlformats.org/markup-compatibility/2006");
      settings1.AddNamespaceDeclaration("o", "urn:schemas-microsoft-com:office:office");
      settings1.AddNamespaceDeclaration("r", "http://schemas.openxmlformats.org/officeDocument/2006/relationships");
      settings1.AddNamespaceDeclaration("m", "http://schemas.openxmlformats.org/officeDocument/2006/math");
      settings1.AddNamespaceDeclaration("v", "urn:schemas-microsoft-com:vml");
      settings1.AddNamespaceDeclaration("w10", "urn:schemas-microsoft-com:office:word");
      settings1.AddNamespaceDeclaration("w", "http://schemas.openxmlformats.org/wordprocessingml/2006/main");
      settings1.AddNamespaceDeclaration("w14", "http://schemas.microsoft.com/office/word/2010/wordml");
      settings1.AddNamespaceDeclaration("w15", "http://schemas.microsoft.com/office/word/2012/wordml");
      settings1.AddNamespaceDeclaration("sl", "http://schemas.openxmlformats.org/schemaLibrary/2006/main");
      DocumentFormat.OpenXml.Wordprocessing.Zoom zoom1 = new DocumentFormat.OpenXml.Wordprocessing.Zoom() { Percent = "100" };
      EmbedSystemFonts embedSystemFonts1 = new EmbedSystemFonts();
      StylePaneFormatFilter stylePaneFormatFilter1 = new StylePaneFormatFilter() { Val = "3F01", AllStyles = true, CustomStyles = false, LatentStyles = false, StylesInUse = false, HeadingStyles = false, NumberingStyles = false, TableStyles = false, DirectFormattingOnRuns = true, DirectFormattingOnParagraphs = true, DirectFormattingOnNumbering = true, DirectFormattingOnTables = true, ClearFormatting = true, Top3HeadingStyles = true, VisibleStyles = false, AlternateStyleNames = false };
      DefaultTabStop defaultTabStop1 = new DefaultTabStop() { Val = 709 };
      HyphenationZone hyphenationZone1 = new HyphenationZone() { Val = "283" };
      NoPunctuationKerning noPunctuationKerning1 = new NoPunctuationKerning();
      DocumentFormat.OpenXml.Wordprocessing.CharacterSpacingControl characterSpacingControl1 = new DocumentFormat.OpenXml.Wordprocessing.CharacterSpacingControl() { Val = CharacterSpacingValues.DoNotCompress };

      HeaderShapeDefaults headerShapeDefaults1 = new HeaderShapeDefaults();
      Ovml.ShapeDefaults shapeDefaults1 = new Ovml.ShapeDefaults() { Extension = V.ExtensionHandlingBehaviorValues.Edit, MaxShapeId = 2049 };

      headerShapeDefaults1.Append(shapeDefaults1);

      FootnoteDocumentWideProperties footnoteDocumentWideProperties1 = new FootnoteDocumentWideProperties();
      FootnoteSpecialReference footnoteSpecialReference1 = new FootnoteSpecialReference() { Id = -1 };
      FootnoteSpecialReference footnoteSpecialReference2 = new FootnoteSpecialReference() { Id = 0 };

      footnoteDocumentWideProperties1.Append(footnoteSpecialReference1);
      footnoteDocumentWideProperties1.Append(footnoteSpecialReference2);

      EndnoteDocumentWideProperties endnoteDocumentWideProperties1 = new EndnoteDocumentWideProperties();
      EndnoteSpecialReference endnoteSpecialReference1 = new EndnoteSpecialReference() { Id = -1 };
      EndnoteSpecialReference endnoteSpecialReference2 = new EndnoteSpecialReference() { Id = 0 };

      endnoteDocumentWideProperties1.Append(endnoteSpecialReference1);
      endnoteDocumentWideProperties1.Append(endnoteSpecialReference2);

      Compatibility compatibility1 = new Compatibility();
      CompatibilitySetting compatibilitySetting1 = new CompatibilitySetting() { Name = CompatSettingNameValues.CompatibilityMode, Uri = "http://schemas.microsoft.com/office/word", Val = "15" };
      CompatibilitySetting compatibilitySetting2 = new CompatibilitySetting() { Name = CompatSettingNameValues.OverrideTableStyleFontSizeAndJustification, Uri = "http://schemas.microsoft.com/office/word", Val = "1" };
      CompatibilitySetting compatibilitySetting3 = new CompatibilitySetting() { Name = CompatSettingNameValues.EnableOpenTypeFeatures, Uri = "http://schemas.microsoft.com/office/word", Val = "1" };
      CompatibilitySetting compatibilitySetting4 = new CompatibilitySetting() { Name = CompatSettingNameValues.DoNotFlipMirrorIndents, Uri = "http://schemas.microsoft.com/office/word", Val = "1" };
      CompatibilitySetting compatibilitySetting5 = new CompatibilitySetting() { Name = CompatSettingNameValues.DifferentiateMultirowTableHeaders, Uri = "http://schemas.microsoft.com/office/word", Val = "1" };

      compatibility1.Append(compatibilitySetting1);
      compatibility1.Append(compatibilitySetting2);
      compatibility1.Append(compatibilitySetting3);
      compatibility1.Append(compatibilitySetting4);
      compatibility1.Append(compatibilitySetting5);

      Rsids rsids1 = new Rsids();
      RsidRoot rsidRoot1 = new RsidRoot() { Val = "008D6FFD" };
      Rsid rsid1 = new Rsid() { Val = "00002A50" };
      Rsid rsid2 = new Rsid() { Val = "0000393C" };
      Rsid rsid3 = new Rsid() { Val = "00004080" };
      Rsid rsid4 = new Rsid() { Val = "000069C8" };
      Rsid rsid5 = new Rsid() { Val = "000072C7" };
      Rsid rsid6 = new Rsid() { Val = "00010449" };
      Rsid rsid7 = new Rsid() { Val = "00014CFB" };
      Rsid rsid8 = new Rsid() { Val = "00014E93" };
      Rsid rsid9 = new Rsid() { Val = "00016093" };
      Rsid rsid10 = new Rsid() { Val = "0001764B" };
      Rsid rsid11 = new Rsid() { Val = "000203FF" };
      Rsid rsid12 = new Rsid() { Val = "000205DD" };
      Rsid rsid13 = new Rsid() { Val = "00021DFD" };
      Rsid rsid14 = new Rsid() { Val = "00023808" };
      Rsid rsid15 = new Rsid() { Val = "0002443D" };
      Rsid rsid16 = new Rsid() { Val = "00025743" };
      Rsid rsid17 = new Rsid() { Val = "00026E34" };
      Rsid rsid18 = new Rsid() { Val = "00030610" };
      Rsid rsid19 = new Rsid() { Val = "00031379" };
      Rsid rsid20 = new Rsid() { Val = "0003298D" };
      Rsid rsid21 = new Rsid() { Val = "00033FD8" };
      Rsid rsid22 = new Rsid() { Val = "00041F3E" };
      Rsid rsid23 = new Rsid() { Val = "000420E2" };
      Rsid rsid24 = new Rsid() { Val = "00045047" };
      Rsid rsid25 = new Rsid() { Val = "0004636C" };
      Rsid rsid26 = new Rsid() { Val = "00051F74" };
      Rsid rsid27 = new Rsid() { Val = "00052B80" };
      Rsid rsid28 = new Rsid() { Val = "00052E5A" };
      Rsid rsid29 = new Rsid() { Val = "0005384E" };
      Rsid rsid30 = new Rsid() { Val = "00053E1F" };
      Rsid rsid31 = new Rsid() { Val = "00054624" };
      Rsid rsid32 = new Rsid() { Val = "00055489" };
      Rsid rsid33 = new Rsid() { Val = "0005568E" };
      Rsid rsid34 = new Rsid() { Val = "00061814" };
      Rsid rsid35 = new Rsid() { Val = "000618C3" };
      Rsid rsid36 = new Rsid() { Val = "00062928" };
      Rsid rsid37 = new Rsid() { Val = "0006395E" };
      Rsid rsid38 = new Rsid() { Val = "00064B7F" };
      Rsid rsid39 = new Rsid() { Val = "00065544" };
      Rsid rsid40 = new Rsid() { Val = "00067375" };
      Rsid rsid41 = new Rsid() { Val = "00070735" };
      Rsid rsid42 = new Rsid() { Val = "00071B09" };
      Rsid rsid43 = new Rsid() { Val = "00073C38" };
      Rsid rsid44 = new Rsid() { Val = "00076E4E" };
      Rsid rsid45 = new Rsid() { Val = "00081CA0" };
      Rsid rsid46 = new Rsid() { Val = "000822D5" };
      Rsid rsid47 = new Rsid() { Val = "000836FD" };
      Rsid rsid48 = new Rsid() { Val = "00086AB6" };
      Rsid rsid49 = new Rsid() { Val = "00091362" };
      Rsid rsid50 = new Rsid() { Val = "000A099D" };
      Rsid rsid51 = new Rsid() { Val = "000A0F36" };
      Rsid rsid52 = new Rsid() { Val = "000A1D9C" };
      Rsid rsid53 = new Rsid() { Val = "000A1F56" };
      Rsid rsid54 = new Rsid() { Val = "000A223A" };
      Rsid rsid55 = new Rsid() { Val = "000A3A27" };
      Rsid rsid56 = new Rsid() { Val = "000A3DC1" };
      Rsid rsid57 = new Rsid() { Val = "000A6481" };
      Rsid rsid58 = new Rsid() { Val = "000B03C9" };
      Rsid rsid59 = new Rsid() { Val = "000B0E3B" };
      Rsid rsid60 = new Rsid() { Val = "000B1FBE" };
      Rsid rsid61 = new Rsid() { Val = "000B276B" };
      Rsid rsid62 = new Rsid() { Val = "000B4889" };
      Rsid rsid63 = new Rsid() { Val = "000B4D36" };
      Rsid rsid64 = new Rsid() { Val = "000B7170" };
      Rsid rsid65 = new Rsid() { Val = "000B71FD" };
      Rsid rsid66 = new Rsid() { Val = "000B73CE" };
      Rsid rsid67 = new Rsid() { Val = "000B7BE0" };
      Rsid rsid68 = new Rsid() { Val = "000C45D8" };
      Rsid rsid69 = new Rsid() { Val = "000C770B" };
      Rsid rsid70 = new Rsid() { Val = "000D1FA5" };
      Rsid rsid71 = new Rsid() { Val = "000D2346" };
      Rsid rsid72 = new Rsid() { Val = "000D6EF3" };
      Rsid rsid73 = new Rsid() { Val = "000E0E36" };
      Rsid rsid74 = new Rsid() { Val = "000E2E1F" };
      Rsid rsid75 = new Rsid() { Val = "000F2645" };
      Rsid rsid76 = new Rsid() { Val = "000F2702" };
      Rsid rsid77 = new Rsid() { Val = "000F401D" };
      Rsid rsid78 = new Rsid() { Val = "000F5DB9" };
      Rsid rsid79 = new Rsid() { Val = "000F6DED" };
      Rsid rsid80 = new Rsid() { Val = "0010652E" };
      Rsid rsid81 = new Rsid() { Val = "001105EF" };
      Rsid rsid82 = new Rsid() { Val = "001110A0" };
      Rsid rsid83 = new Rsid() { Val = "00111D7A" };
      Rsid rsid84 = new Rsid() { Val = "00112957" };
      Rsid rsid85 = new Rsid() { Val = "00113223" };
      Rsid rsid86 = new Rsid() { Val = "0011539A" };
      Rsid rsid87 = new Rsid() { Val = "00116FDE" };
      Rsid rsid88 = new Rsid() { Val = "00117331" };
      Rsid rsid89 = new Rsid() { Val = "00120581" };
      Rsid rsid90 = new Rsid() { Val = "00121255" };
      Rsid rsid91 = new Rsid() { Val = "001216D7" };
      Rsid rsid92 = new Rsid() { Val = "00125D50" };
      Rsid rsid93 = new Rsid() { Val = "00126237" };
      Rsid rsid94 = new Rsid() { Val = "00126B2F" };
      Rsid rsid95 = new Rsid() { Val = "00127070" };
      Rsid rsid96 = new Rsid() { Val = "00131A91" };
      Rsid rsid97 = new Rsid() { Val = "00131B99" };
      Rsid rsid98 = new Rsid() { Val = "0013359E" };
      Rsid rsid99 = new Rsid() { Val = "00135943" };
      Rsid rsid100 = new Rsid() { Val = "001400D3" };
      Rsid rsid101 = new Rsid() { Val = "00142A43" };
      Rsid rsid102 = new Rsid() { Val = "001433D6" };
      Rsid rsid103 = new Rsid() { Val = "001433F8" };
      Rsid rsid104 = new Rsid() { Val = "00144025" };
      Rsid rsid105 = new Rsid() { Val = "001529F3" };
      Rsid rsid106 = new Rsid() { Val = "0015386A" };
      Rsid rsid107 = new Rsid() { Val = "00154845" };
      Rsid rsid108 = new Rsid() { Val = "00154F26" };
      Rsid rsid109 = new Rsid() { Val = "00156F4C" };
      Rsid rsid110 = new Rsid() { Val = "00161357" };
      Rsid rsid111 = new Rsid() { Val = "00163928" };
      Rsid rsid112 = new Rsid() { Val = "0017408A" };
      Rsid rsid113 = new Rsid() { Val = "0017643C" };
      Rsid rsid114 = new Rsid() { Val = "00177B5E" };
      Rsid rsid115 = new Rsid() { Val = "0018102E" };
      Rsid rsid116 = new Rsid() { Val = "001870E7" };
      Rsid rsid117 = new Rsid() { Val = "001902DC" };
      Rsid rsid118 = new Rsid() { Val = "00190C23" };
      Rsid rsid119 = new Rsid() { Val = "00193450" };
      Rsid rsid120 = new Rsid() { Val = "00193C0D" };
      Rsid rsid121 = new Rsid() { Val = "001953FC" };
      Rsid rsid122 = new Rsid() { Val = "001A14B8" };
      Rsid rsid123 = new Rsid() { Val = "001A2526" };
      Rsid rsid124 = new Rsid() { Val = "001A30D8" };
      Rsid rsid125 = new Rsid() { Val = "001A4F93" };
      Rsid rsid126 = new Rsid() { Val = "001A6017" };
      Rsid rsid127 = new Rsid() { Val = "001A6134" };
      Rsid rsid128 = new Rsid() { Val = "001A6486" };
      Rsid rsid129 = new Rsid() { Val = "001B0904" };
      Rsid rsid130 = new Rsid() { Val = "001B1D28" };
      Rsid rsid131 = new Rsid() { Val = "001B1D8C" };
      Rsid rsid132 = new Rsid() { Val = "001B4971" };
      Rsid rsid133 = new Rsid() { Val = "001B4EEE" };
      Rsid rsid134 = new Rsid() { Val = "001B607E" };
      Rsid rsid135 = new Rsid() { Val = "001C1481" };
      Rsid rsid136 = new Rsid() { Val = "001C1C59" };
      Rsid rsid137 = new Rsid() { Val = "001C253D" };
      Rsid rsid138 = new Rsid() { Val = "001C263F" };
      Rsid rsid139 = new Rsid() { Val = "001C2F81" };
      Rsid rsid140 = new Rsid() { Val = "001C37D7" };
      Rsid rsid141 = new Rsid() { Val = "001C405D" };
      Rsid rsid142 = new Rsid() { Val = "001D087A" };
      Rsid rsid143 = new Rsid() { Val = "001E1361" };
      Rsid rsid144 = new Rsid() { Val = "001E541E" };
      Rsid rsid145 = new Rsid() { Val = "001E65D2" };
      Rsid rsid146 = new Rsid() { Val = "001E789C" };
      Rsid rsid147 = new Rsid() { Val = "001F0761" };
      Rsid rsid148 = new Rsid() { Val = "001F082B" };
      Rsid rsid149 = new Rsid() { Val = "001F477C" };
      Rsid rsid150 = new Rsid() { Val = "001F6E95" };
      Rsid rsid151 = new Rsid() { Val = "001F7C92" };
      Rsid rsid152 = new Rsid() { Val = "00203ABB" };
      Rsid rsid153 = new Rsid() { Val = "002075BF" };
      Rsid rsid154 = new Rsid() { Val = "0021023E" };
      Rsid rsid155 = new Rsid() { Val = "00211AC2" };
      Rsid rsid156 = new Rsid() { Val = "002128A2" };
      Rsid rsid157 = new Rsid() { Val = "0021498F" };
      Rsid rsid158 = new Rsid() { Val = "002161CE" };
      Rsid rsid159 = new Rsid() { Val = "002162BB" };
      Rsid rsid160 = new Rsid() { Val = "00217F7F" };
      Rsid rsid161 = new Rsid() { Val = "002202B7" };
      Rsid rsid162 = new Rsid() { Val = "00222378" };
      Rsid rsid163 = new Rsid() { Val = "002239A7" };
      Rsid rsid164 = new Rsid() { Val = "00223D02" };
      Rsid rsid165 = new Rsid() { Val = "0022427A" };
      Rsid rsid166 = new Rsid() { Val = "00224A9F" };
      Rsid rsid167 = new Rsid() { Val = "00225E07" };
      Rsid rsid168 = new Rsid() { Val = "00226119" };
      Rsid rsid169 = new Rsid() { Val = "002262E4" };
      Rsid rsid170 = new Rsid() { Val = "002310D2" };
      Rsid rsid171 = new Rsid() { Val = "002318D7" };
      Rsid rsid172 = new Rsid() { Val = "0023422A" };
      Rsid rsid173 = new Rsid() { Val = "0023600F" };
      Rsid rsid174 = new Rsid() { Val = "00237D2E" };
      Rsid rsid175 = new Rsid() { Val = "002407D4" };
      Rsid rsid176 = new Rsid() { Val = "0024192B" };
      Rsid rsid177 = new Rsid() { Val = "00243EA0" };
      Rsid rsid178 = new Rsid() { Val = "00244157" };
      Rsid rsid179 = new Rsid() { Val = "002447CF" };
      Rsid rsid180 = new Rsid() { Val = "002450E1" };
      Rsid rsid181 = new Rsid() { Val = "0024725A" };
      Rsid rsid182 = new Rsid() { Val = "002502E6" };
      Rsid rsid183 = new Rsid() { Val = "00250D57" };
      Rsid rsid184 = new Rsid() { Val = "00251EDA" };
      Rsid rsid185 = new Rsid() { Val = "00254985" };
      Rsid rsid186 = new Rsid() { Val = "00255221" };
      Rsid rsid187 = new Rsid() { Val = "002553D4" };
      Rsid rsid188 = new Rsid() { Val = "0026025F" };
      Rsid rsid189 = new Rsid() { Val = "002604BF" };
      Rsid rsid190 = new Rsid() { Val = "00261B26" };
      Rsid rsid191 = new Rsid() { Val = "00262E62" };
      Rsid rsid192 = new Rsid() { Val = "00264A6F" };
      Rsid rsid193 = new Rsid() { Val = "00266145" };
      Rsid rsid194 = new Rsid() { Val = "002668AA" };
      Rsid rsid195 = new Rsid() { Val = "00270DD0" };
      Rsid rsid196 = new Rsid() { Val = "002722C7" };
      Rsid rsid197 = new Rsid() { Val = "00275533" };
      Rsid rsid198 = new Rsid() { Val = "00276B05" };
      Rsid rsid199 = new Rsid() { Val = "00277E28" };
      Rsid rsid200 = new Rsid() { Val = "00283198" };
      Rsid rsid201 = new Rsid() { Val = "00284152" };
      Rsid rsid202 = new Rsid() { Val = "00284341" };
      Rsid rsid203 = new Rsid() { Val = "00285CB5" };
      Rsid rsid204 = new Rsid() { Val = "00285E5C" };
      Rsid rsid205 = new Rsid() { Val = "0029010A" };
      Rsid rsid206 = new Rsid() { Val = "00290E22" };
      Rsid rsid207 = new Rsid() { Val = "0029447B" };
      Rsid rsid208 = new Rsid() { Val = "0029514E" };
      Rsid rsid209 = new Rsid() { Val = "00295E4A" };
      Rsid rsid210 = new Rsid() { Val = "002973C6" };
      Rsid rsid211 = new Rsid() { Val = "00297E6E" };
      Rsid rsid212 = new Rsid() { Val = "002A2B6C" };
      Rsid rsid213 = new Rsid() { Val = "002A3D4B" };
      Rsid rsid214 = new Rsid() { Val = "002A4099" };
      Rsid rsid215 = new Rsid() { Val = "002A785B" };
      Rsid rsid216 = new Rsid() { Val = "002B037A" };
      Rsid rsid217 = new Rsid() { Val = "002B1F30" };
      Rsid rsid218 = new Rsid() { Val = "002B3344" };
      Rsid rsid219 = new Rsid() { Val = "002B508D" };
      Rsid rsid220 = new Rsid() { Val = "002B6047" };
      Rsid rsid221 = new Rsid() { Val = "002B74A4" };
      Rsid rsid222 = new Rsid() { Val = "002B7B21" };
      Rsid rsid223 = new Rsid() { Val = "002C13DD" };
      Rsid rsid224 = new Rsid() { Val = "002C1F40" };
      Rsid rsid225 = new Rsid() { Val = "002C238D" };
      Rsid rsid226 = new Rsid() { Val = "002C2777" };
      Rsid rsid227 = new Rsid() { Val = "002C2A2F" };
      Rsid rsid228 = new Rsid() { Val = "002C7DE0" };
      Rsid rsid229 = new Rsid() { Val = "002D1AAA" };
      Rsid rsid230 = new Rsid() { Val = "002D1D66" };
      Rsid rsid231 = new Rsid() { Val = "002D3831" };
      Rsid rsid232 = new Rsid() { Val = "002D400B" };
      Rsid rsid233 = new Rsid() { Val = "002D44F7" };
      Rsid rsid234 = new Rsid() { Val = "002D4691" };
      Rsid rsid235 = new Rsid() { Val = "002D50B4" };
      Rsid rsid236 = new Rsid() { Val = "002E03EE" };
      Rsid rsid237 = new Rsid() { Val = "002E0C51" };
      Rsid rsid238 = new Rsid() { Val = "002E1263" };
      Rsid rsid239 = new Rsid() { Val = "002E6109" };
      Rsid rsid240 = new Rsid() { Val = "002F044F" };
      Rsid rsid241 = new Rsid() { Val = "002F6B4E" };
      Rsid rsid242 = new Rsid() { Val = "002F7147" };
      Rsid rsid243 = new Rsid() { Val = "0030046B" };
      Rsid rsid244 = new Rsid() { Val = "003050DB" };
      Rsid rsid245 = new Rsid() { Val = "003059FF" };
      Rsid rsid246 = new Rsid() { Val = "0030697C" };
      Rsid rsid247 = new Rsid() { Val = "003126BC" };
      Rsid rsid248 = new Rsid() { Val = "00313A99" };
      Rsid rsid249 = new Rsid() { Val = "00314202" };
      Rsid rsid250 = new Rsid() { Val = "00317EF8" };
      Rsid rsid251 = new Rsid() { Val = "00320113" };
      Rsid rsid252 = new Rsid() { Val = "00324B08" };
      Rsid rsid253 = new Rsid() { Val = "00325349" };
      Rsid rsid254 = new Rsid() { Val = "0033175A" };
      Rsid rsid255 = new Rsid() { Val = "003322F3" };
      Rsid rsid256 = new Rsid() { Val = "00333789" };
      Rsid rsid257 = new Rsid() { Val = "00333C44" };
      Rsid rsid258 = new Rsid() { Val = "0033448A" };
      Rsid rsid259 = new Rsid() { Val = "00334581" };
      Rsid rsid260 = new Rsid() { Val = "00336A96" };
      Rsid rsid261 = new Rsid() { Val = "00342723" };
      Rsid rsid262 = new Rsid() { Val = "0034531C" };
      Rsid rsid263 = new Rsid() { Val = "003454FB" };
      Rsid rsid264 = new Rsid() { Val = "003459A6" };
      Rsid rsid265 = new Rsid() { Val = "00346D1C" };
      Rsid rsid266 = new Rsid() { Val = "003472DB" };
      Rsid rsid267 = new Rsid() { Val = "00350F0F" };
      Rsid rsid268 = new Rsid() { Val = "00353975" };
      Rsid rsid269 = new Rsid() { Val = "00353B95" };
      Rsid rsid270 = new Rsid() { Val = "00353D95" };
      Rsid rsid271 = new Rsid() { Val = "00354D55" };
      Rsid rsid272 = new Rsid() { Val = "00355661" };
      Rsid rsid273 = new Rsid() { Val = "0036305E" };
      Rsid rsid274 = new Rsid() { Val = "00363449" };
      Rsid rsid275 = new Rsid() { Val = "00364AC1" };
      Rsid rsid276 = new Rsid() { Val = "00365EE2" };
      Rsid rsid277 = new Rsid() { Val = "0036695A" };
      Rsid rsid278 = new Rsid() { Val = "00370574" };
      Rsid rsid279 = new Rsid() { Val = "00371B3D" };
      Rsid rsid280 = new Rsid() { Val = "00377B21" };
      Rsid rsid281 = new Rsid() { Val = "00377D1F" };
      Rsid rsid282 = new Rsid() { Val = "0038265F" };
      Rsid rsid283 = new Rsid() { Val = "003826E7" };
      Rsid rsid284 = new Rsid() { Val = "0039005C" };
      Rsid rsid285 = new Rsid() { Val = "00390A49" };
      Rsid rsid286 = new Rsid() { Val = "00390B4F" };
      Rsid rsid287 = new Rsid() { Val = "0039274E" };
      Rsid rsid288 = new Rsid() { Val = "00395768" };
      Rsid rsid289 = new Rsid() { Val = "00397288" };
      Rsid rsid290 = new Rsid() { Val = "003A238A" };
      Rsid rsid291 = new Rsid() { Val = "003A3A72" };
      Rsid rsid292 = new Rsid() { Val = "003A42D5" };
      Rsid rsid293 = new Rsid() { Val = "003A5A0A" };
      Rsid rsid294 = new Rsid() { Val = "003A7AA0" };
      Rsid rsid295 = new Rsid() { Val = "003B0B43" };
      Rsid rsid296 = new Rsid() { Val = "003B1846" };
      Rsid rsid297 = new Rsid() { Val = "003B24D7" };
      Rsid rsid298 = new Rsid() { Val = "003B46DD" };
      Rsid rsid299 = new Rsid() { Val = "003B79A0" };
      Rsid rsid300 = new Rsid() { Val = "003C1DF2" };
      Rsid rsid301 = new Rsid() { Val = "003C1EC9" };
      Rsid rsid302 = new Rsid() { Val = "003C3838" };
      Rsid rsid303 = new Rsid() { Val = "003C3C0E" };
      Rsid rsid304 = new Rsid() { Val = "003C66E2" };
      Rsid rsid305 = new Rsid() { Val = "003D0149" };
      Rsid rsid306 = new Rsid() { Val = "003D0E94" };
      Rsid rsid307 = new Rsid() { Val = "003D69BD" };
      Rsid rsid308 = new Rsid() { Val = "003D6E6B" };
      Rsid rsid309 = new Rsid() { Val = "003E059C" };
      Rsid rsid310 = new Rsid() { Val = "003E22E9" };
      Rsid rsid311 = new Rsid() { Val = "003E31F6" };
      Rsid rsid312 = new Rsid() { Val = "003E3C28" };
      Rsid rsid313 = new Rsid() { Val = "003E4CBB" };
      Rsid rsid314 = new Rsid() { Val = "003F00CC" };
      Rsid rsid315 = new Rsid() { Val = "003F0EBB" };
      Rsid rsid316 = new Rsid() { Val = "003F2A49" };
      Rsid rsid317 = new Rsid() { Val = "003F329D" };
      Rsid rsid318 = new Rsid() { Val = "003F3E00" };
      Rsid rsid319 = new Rsid() { Val = "003F465F" };
      Rsid rsid320 = new Rsid() { Val = "003F6031" };
      Rsid rsid321 = new Rsid() { Val = "003F70D4" };
      Rsid rsid322 = new Rsid() { Val = "00401E9C" };
      Rsid rsid323 = new Rsid() { Val = "004048FD" };
      Rsid rsid324 = new Rsid() { Val = "004101A4" };
      Rsid rsid325 = new Rsid() { Val = "00410EFF" };
      Rsid rsid326 = new Rsid() { Val = "004143F5" };
      Rsid rsid327 = new Rsid() { Val = "00416B31" };
      Rsid rsid328 = new Rsid() { Val = "004212BD" };
      Rsid rsid329 = new Rsid() { Val = "00426E0C" };
      Rsid rsid330 = new Rsid() { Val = "00427A28" };
      Rsid rsid331 = new Rsid() { Val = "00431240" };
      Rsid rsid332 = new Rsid() { Val = "00431E6A" };
      Rsid rsid333 = new Rsid() { Val = "00435B77" };
      Rsid rsid334 = new Rsid() { Val = "004440ED" };
      Rsid rsid335 = new Rsid() { Val = "00444326" };
      Rsid rsid336 = new Rsid() { Val = "00444D87" };
      Rsid rsid337 = new Rsid() { Val = "004453E4" };
      Rsid rsid338 = new Rsid() { Val = "00445905" };
      Rsid rsid339 = new Rsid() { Val = "0044683A" };
      Rsid rsid340 = new Rsid() { Val = "004469A6" };
      Rsid rsid341 = new Rsid() { Val = "00447A0C" };
      Rsid rsid342 = new Rsid() { Val = "00447A87" };
      Rsid rsid343 = new Rsid() { Val = "00461CE4" };
      Rsid rsid344 = new Rsid() { Val = "00464D36" };
      Rsid rsid345 = new Rsid() { Val = "00465FDA" };
      Rsid rsid346 = new Rsid() { Val = "0046625A" };
      Rsid rsid347 = new Rsid() { Val = "00476F73" };
      Rsid rsid348 = new Rsid() { Val = "0048204A" };
      Rsid rsid349 = new Rsid() { Val = "00482EC1" };
      Rsid rsid350 = new Rsid() { Val = "0048359B" };
      Rsid rsid351 = new Rsid() { Val = "004845DA" };
      Rsid rsid352 = new Rsid() { Val = "00484CDF" };
      Rsid rsid353 = new Rsid() { Val = "004863B5" };
      Rsid rsid354 = new Rsid() { Val = "0048659E" };
      Rsid rsid355 = new Rsid() { Val = "00486696" };
      Rsid rsid356 = new Rsid() { Val = "00487D3D" };
      Rsid rsid357 = new Rsid() { Val = "00493038" };
      Rsid rsid358 = new Rsid() { Val = "004937A8" };
      Rsid rsid359 = new Rsid() { Val = "00494B07" };
      Rsid rsid360 = new Rsid() { Val = "00495AE4" };
      Rsid rsid361 = new Rsid() { Val = "00495E54" };
      Rsid rsid362 = new Rsid() { Val = "004A055A" };
      Rsid rsid363 = new Rsid() { Val = "004A3955" };
      Rsid rsid364 = new Rsid() { Val = "004A5083" };
      Rsid rsid365 = new Rsid() { Val = "004A5BD8" };
      Rsid rsid366 = new Rsid() { Val = "004A67B6" };
      Rsid rsid367 = new Rsid() { Val = "004A6FA9" };
      Rsid rsid368 = new Rsid() { Val = "004A7236" };
      Rsid rsid369 = new Rsid() { Val = "004B0052" };
      Rsid rsid370 = new Rsid() { Val = "004B130D" };
      Rsid rsid371 = new Rsid() { Val = "004B1EE4" };
      Rsid rsid372 = new Rsid() { Val = "004B36C1" };
      Rsid rsid373 = new Rsid() { Val = "004C0BAC" };
      Rsid rsid374 = new Rsid() { Val = "004C2918" };
      Rsid rsid375 = new Rsid() { Val = "004C47EE" };
      Rsid rsid376 = new Rsid() { Val = "004D03F5" };
      Rsid rsid377 = new Rsid() { Val = "004D2C6D" };
      Rsid rsid378 = new Rsid() { Val = "004D4B64" };
      Rsid rsid379 = new Rsid() { Val = "004E0A81" };
      Rsid rsid380 = new Rsid() { Val = "004E36E5" };
      Rsid rsid381 = new Rsid() { Val = "004E40AF" };
      Rsid rsid382 = new Rsid() { Val = "004E4A72" };
      Rsid rsid383 = new Rsid() { Val = "004E5583" };
      Rsid rsid384 = new Rsid() { Val = "004E6FDC" };
      Rsid rsid385 = new Rsid() { Val = "004F46FA" };
      Rsid rsid386 = new Rsid() { Val = "004F5823" };
      Rsid rsid387 = new Rsid() { Val = "004F5939" };
      Rsid rsid388 = new Rsid() { Val = "004F7B49" };
      Rsid rsid389 = new Rsid() { Val = "004F7F78" };
      Rsid rsid390 = new Rsid() { Val = "005021BB" };
      Rsid rsid391 = new Rsid() { Val = "0050355C" };
      Rsid rsid392 = new Rsid() { Val = "00504FD9" };
      Rsid rsid393 = new Rsid() { Val = "00505641" };
      Rsid rsid394 = new Rsid() { Val = "00506C3F" };
      Rsid rsid395 = new Rsid() { Val = "00513C6B" };
      Rsid rsid396 = new Rsid() { Val = "00516306" };
      Rsid rsid397 = new Rsid() { Val = "00517DB2" };
      Rsid rsid398 = new Rsid() { Val = "00523031" };
      Rsid rsid399 = new Rsid() { Val = "0052365C" };
      Rsid rsid400 = new Rsid() { Val = "0052459D" };
      Rsid rsid401 = new Rsid() { Val = "00526FD4" };
      Rsid rsid402 = new Rsid() { Val = "0052758C" };
      Rsid rsid403 = new Rsid() { Val = "00531033" };
      Rsid rsid404 = new Rsid() { Val = "00531574" };
      Rsid rsid405 = new Rsid() { Val = "005329A6" };
      Rsid rsid406 = new Rsid() { Val = "00533300" };
      Rsid rsid407 = new Rsid() { Val = "00533F62" };
      Rsid rsid408 = new Rsid() { Val = "005401F9" };
      Rsid rsid409 = new Rsid() { Val = "005415D9" };
      Rsid rsid410 = new Rsid() { Val = "005417AE" };
      Rsid rsid411 = new Rsid() { Val = "00541984" };
      Rsid rsid412 = new Rsid() { Val = "0054277C" };
      Rsid rsid413 = new Rsid() { Val = "00543D28" };
      Rsid rsid414 = new Rsid() { Val = "00543E02" };
      Rsid rsid415 = new Rsid() { Val = "00544261" };
      Rsid rsid416 = new Rsid() { Val = "00544F4F" };
      Rsid rsid417 = new Rsid() { Val = "00552745" };
      Rsid rsid418 = new Rsid() { Val = "00552772" };
      Rsid rsid419 = new Rsid() { Val = "00553440" };
      Rsid rsid420 = new Rsid() { Val = "00562434" };
      Rsid rsid421 = new Rsid() { Val = "00563616" };
      Rsid rsid422 = new Rsid() { Val = "005646C2" };
      Rsid rsid423 = new Rsid() { Val = "00564959" };
      Rsid rsid424 = new Rsid() { Val = "00573420" };
      Rsid rsid425 = new Rsid() { Val = "00577582" };
      Rsid rsid426 = new Rsid() { Val = "005801F8" };
      Rsid rsid427 = new Rsid() { Val = "005822B3" };
      Rsid rsid428 = new Rsid() { Val = "00583538" };
      Rsid rsid429 = new Rsid() { Val = "00584E29" };
      Rsid rsid430 = new Rsid() { Val = "005859CF" };
      Rsid rsid431 = new Rsid() { Val = "0058605A" };
      Rsid rsid432 = new Rsid() { Val = "00586F5C" };
      Rsid rsid433 = new Rsid() { Val = "00587056" };
      Rsid rsid434 = new Rsid() { Val = "005875AE" };
      Rsid rsid435 = new Rsid() { Val = "005921AB" };
      Rsid rsid436 = new Rsid() { Val = "00592F05" };
      Rsid rsid437 = new Rsid() { Val = "005955FF" };
      Rsid rsid438 = new Rsid() { Val = "0059647B" };
      Rsid rsid439 = new Rsid() { Val = "0059717C" };
      Rsid rsid440 = new Rsid() { Val = "00597D1B" };
      Rsid rsid441 = new Rsid() { Val = "005A1C19" };
      Rsid rsid442 = new Rsid() { Val = "005A231C" };
      Rsid rsid443 = new Rsid() { Val = "005A24F0" };
      Rsid rsid444 = new Rsid() { Val = "005A2920" };
      Rsid rsid445 = new Rsid() { Val = "005A2A6D" };
      Rsid rsid446 = new Rsid() { Val = "005A2B67" };
      Rsid rsid447 = new Rsid() { Val = "005A4FDF" };
      Rsid rsid448 = new Rsid() { Val = "005A7674" };
      Rsid rsid449 = new Rsid() { Val = "005A7C4C" };
      Rsid rsid450 = new Rsid() { Val = "005B158D" };
      Rsid rsid451 = new Rsid() { Val = "005B2AF6" };
      Rsid rsid452 = new Rsid() { Val = "005B6A4C" };
      Rsid rsid453 = new Rsid() { Val = "005B759B" };
      Rsid rsid454 = new Rsid() { Val = "005C0C08" };
      Rsid rsid455 = new Rsid() { Val = "005C2614" };
      Rsid rsid456 = new Rsid() { Val = "005C30F8" };
      Rsid rsid457 = new Rsid() { Val = "005C65C5" };
      Rsid rsid458 = new Rsid() { Val = "005D02BD" };
      Rsid rsid459 = new Rsid() { Val = "005D2A38" };
      Rsid rsid460 = new Rsid() { Val = "005D4B3B" };
      Rsid rsid461 = new Rsid() { Val = "005D5C75" };
      Rsid rsid462 = new Rsid() { Val = "005D7D7C" };
      Rsid rsid463 = new Rsid() { Val = "005E0220" };
      Rsid rsid464 = new Rsid() { Val = "005E17D1" };
      Rsid rsid465 = new Rsid() { Val = "005E18BF" };
      Rsid rsid466 = new Rsid() { Val = "005E3B08" };
      Rsid rsid467 = new Rsid() { Val = "005E7428" };
      Rsid rsid468 = new Rsid() { Val = "005E7552" };
      Rsid rsid469 = new Rsid() { Val = "005F3CDE" };
      Rsid rsid470 = new Rsid() { Val = "005F5BBB" };
      Rsid rsid471 = new Rsid() { Val = "005F70CF" };
      Rsid rsid472 = new Rsid() { Val = "005F7BAA" };
      Rsid rsid473 = new Rsid() { Val = "006001B2" };
      Rsid rsid474 = new Rsid() { Val = "00601444" };
      Rsid rsid475 = new Rsid() { Val = "0060574A" };
      Rsid rsid476 = new Rsid() { Val = "00605CCF" };
      Rsid rsid477 = new Rsid() { Val = "00610280" };
      Rsid rsid478 = new Rsid() { Val = "00610887" };
      Rsid rsid479 = new Rsid() { Val = "0061409B" };
      Rsid rsid480 = new Rsid() { Val = "00614414" };
      Rsid rsid481 = new Rsid() { Val = "006160BA" };
      Rsid rsid482 = new Rsid() { Val = "00617FF8" };
      Rsid rsid483 = new Rsid() { Val = "00620E0F" };
      Rsid rsid484 = new Rsid() { Val = "006223A2" };
      Rsid rsid485 = new Rsid() { Val = "006253E8" };
      Rsid rsid486 = new Rsid() { Val = "00630969" };
      Rsid rsid487 = new Rsid() { Val = "00631658" };
      Rsid rsid488 = new Rsid() { Val = "00631789" };
      Rsid rsid489 = new Rsid() { Val = "00632126" };
      Rsid rsid490 = new Rsid() { Val = "006327A4" };
      Rsid rsid491 = new Rsid() { Val = "0063354D" };
      Rsid rsid492 = new Rsid() { Val = "00635E63" };
      Rsid rsid493 = new Rsid() { Val = "00637C34" };
      Rsid rsid494 = new Rsid() { Val = "00637F67" };
      Rsid rsid495 = new Rsid() { Val = "00643EE6" };
      Rsid rsid496 = new Rsid() { Val = "00644EA9" };
      Rsid rsid497 = new Rsid() { Val = "00645CFA" };
      Rsid rsid498 = new Rsid() { Val = "006464AE" };
      Rsid rsid499 = new Rsid() { Val = "006529D4" };
      Rsid rsid500 = new Rsid() { Val = "006542EA" };
      Rsid rsid501 = new Rsid() { Val = "00655550" };
      Rsid rsid502 = new Rsid() { Val = "006569BE" };
      Rsid rsid503 = new Rsid() { Val = "00660CCD" };
      Rsid rsid504 = new Rsid() { Val = "006613A7" };
      Rsid rsid505 = new Rsid() { Val = "00663862" };
      Rsid rsid506 = new Rsid() { Val = "0066599A" };
      Rsid rsid507 = new Rsid() { Val = "00667F0D" };
      Rsid rsid508 = new Rsid() { Val = "006704C5" };
      Rsid rsid509 = new Rsid() { Val = "00671F5F" };
      Rsid rsid510 = new Rsid() { Val = "0067253B" };
      Rsid rsid511 = new Rsid() { Val = "00673592" };
      Rsid rsid512 = new Rsid() { Val = "00676204" };
      Rsid rsid513 = new Rsid() { Val = "0067720D" };
      Rsid rsid514 = new Rsid() { Val = "006821C6" };
      Rsid rsid515 = new Rsid() { Val = "00682E4D" };
      Rsid rsid516 = new Rsid() { Val = "0068523B" };
      Rsid rsid517 = new Rsid() { Val = "006853D1" };
      Rsid rsid518 = new Rsid() { Val = "00692898" };
      Rsid rsid519 = new Rsid() { Val = "00692FAD" };
      Rsid rsid520 = new Rsid() { Val = "00694101" };
      Rsid rsid521 = new Rsid() { Val = "00696F98" };
      Rsid rsid522 = new Rsid() { Val = "006975A1" };
      Rsid rsid523 = new Rsid() { Val = "006A11ED" };
      Rsid rsid524 = new Rsid() { Val = "006A44A5" };
      Rsid rsid525 = new Rsid() { Val = "006A7F8D" };
      Rsid rsid526 = new Rsid() { Val = "006B190A" };
      Rsid rsid527 = new Rsid() { Val = "006B3553" };
      Rsid rsid528 = new Rsid() { Val = "006B35DA" };
      Rsid rsid529 = new Rsid() { Val = "006B47AD" };
      Rsid rsid530 = new Rsid() { Val = "006B4FCE" };
      Rsid rsid531 = new Rsid() { Val = "006B5492" };
      Rsid rsid532 = new Rsid() { Val = "006B7849" };
      Rsid rsid533 = new Rsid() { Val = "006C0702" };
      Rsid rsid534 = new Rsid() { Val = "006C31B1" };
      Rsid rsid535 = new Rsid() { Val = "006C46FE" };
      Rsid rsid536 = new Rsid() { Val = "006C532C" };
      Rsid rsid537 = new Rsid() { Val = "006C5A9C" };
      Rsid rsid538 = new Rsid() { Val = "006D0D12" };
      Rsid rsid539 = new Rsid() { Val = "006D1E16" };
      Rsid rsid540 = new Rsid() { Val = "006D2404" };
      Rsid rsid541 = new Rsid() { Val = "006D2734" };
      Rsid rsid542 = new Rsid() { Val = "006D2B41" };
      Rsid rsid543 = new Rsid() { Val = "006D6ACF" };
      Rsid rsid544 = new Rsid() { Val = "006E0333" };
      Rsid rsid545 = new Rsid() { Val = "006E23F7" };
      Rsid rsid546 = new Rsid() { Val = "006E303F" };
      Rsid rsid547 = new Rsid() { Val = "006E3365" };
      Rsid rsid548 = new Rsid() { Val = "006E571F" };
      Rsid rsid549 = new Rsid() { Val = "006E6496" };
      Rsid rsid550 = new Rsid() { Val = "006F1390" };
      Rsid rsid551 = new Rsid() { Val = "006F2ABD" };
      Rsid rsid552 = new Rsid() { Val = "006F48D8" };
      Rsid rsid553 = new Rsid() { Val = "006F780B" };
      Rsid rsid554 = new Rsid() { Val = "00701841" };
      Rsid rsid555 = new Rsid() { Val = "0070428E" };
      Rsid rsid556 = new Rsid() { Val = "00706313" };
      Rsid rsid557 = new Rsid() { Val = "00706CE3" };
      Rsid rsid558 = new Rsid() { Val = "0071770D" };
      Rsid rsid559 = new Rsid() { Val = "007211C5" };
      Rsid rsid560 = new Rsid() { Val = "0072131A" };
      Rsid rsid561 = new Rsid() { Val = "0072146E" };
      Rsid rsid562 = new Rsid() { Val = "00721EC3" };
      Rsid rsid563 = new Rsid() { Val = "0072453D" };
      Rsid rsid564 = new Rsid() { Val = "00726E7D" };
      Rsid rsid565 = new Rsid() { Val = "0072738C" };
      Rsid rsid566 = new Rsid() { Val = "007275BD" };
      Rsid rsid567 = new Rsid() { Val = "00731ED2" };
      Rsid rsid568 = new Rsid() { Val = "00732411" };
      Rsid rsid569 = new Rsid() { Val = "007377E4" };
      Rsid rsid570 = new Rsid() { Val = "00737DA1" };
      Rsid rsid571 = new Rsid() { Val = "00737E0B" };
      Rsid rsid572 = new Rsid() { Val = "00741AAD" };
      Rsid rsid573 = new Rsid() { Val = "00744011" };
      Rsid rsid574 = new Rsid() { Val = "0074738F" };
      Rsid rsid575 = new Rsid() { Val = "00753934" };
      Rsid rsid576 = new Rsid() { Val = "00754BC6" };
      Rsid rsid577 = new Rsid() { Val = "00755686" };
      Rsid rsid578 = new Rsid() { Val = "00755CAE" };
      Rsid rsid579 = new Rsid() { Val = "00760CBA" };
      Rsid rsid580 = new Rsid() { Val = "00764208" };
      Rsid rsid581 = new Rsid() { Val = "00766B51" };
      Rsid rsid582 = new Rsid() { Val = "00766B6C" };
      Rsid rsid583 = new Rsid() { Val = "00766DDE" };
      Rsid rsid584 = new Rsid() { Val = "0077292A" };
      Rsid rsid585 = new Rsid() { Val = "007770DA" };
      Rsid rsid586 = new Rsid() { Val = "00777A97" };
      Rsid rsid587 = new Rsid() { Val = "00780B85" };
      Rsid rsid588 = new Rsid() { Val = "00782DC4" };
      Rsid rsid589 = new Rsid() { Val = "007832A7" };
      Rsid rsid590 = new Rsid() { Val = "007862AC" };
      Rsid rsid591 = new Rsid() { Val = "00786779" };
      Rsid rsid592 = new Rsid() { Val = "0078761B" };
      Rsid rsid593 = new Rsid() { Val = "0079098B" };
      Rsid rsid594 = new Rsid() { Val = "00790BE2" };
      Rsid rsid595 = new Rsid() { Val = "007922BA" };
      Rsid rsid596 = new Rsid() { Val = "00792780" };
      Rsid rsid597 = new Rsid() { Val = "00793AE6" };
      Rsid rsid598 = new Rsid() { Val = "00794636" };
      Rsid rsid599 = new Rsid() { Val = "00794A15" };
      Rsid rsid600 = new Rsid() { Val = "00796084" };
      Rsid rsid601 = new Rsid() { Val = "007A3525" };
      Rsid rsid602 = new Rsid() { Val = "007A6AD3" };
      Rsid rsid603 = new Rsid() { Val = "007B3B43" };
      Rsid rsid604 = new Rsid() { Val = "007B71A6" };
      Rsid rsid605 = new Rsid() { Val = "007C1739" };
      Rsid rsid606 = new Rsid() { Val = "007C22C4" };
      Rsid rsid607 = new Rsid() { Val = "007C32EA" };
      Rsid rsid608 = new Rsid() { Val = "007C380E" };
      Rsid rsid609 = new Rsid() { Val = "007C40EB" };
      Rsid rsid610 = new Rsid() { Val = "007C5857" };
      Rsid rsid611 = new Rsid() { Val = "007D0DA9" };
      Rsid rsid612 = new Rsid() { Val = "007D4DC4" };
      Rsid rsid613 = new Rsid() { Val = "007D5804" };
      Rsid rsid614 = new Rsid() { Val = "007D732A" };
      Rsid rsid615 = new Rsid() { Val = "007E0D00" };
      Rsid rsid616 = new Rsid() { Val = "007E121F" };
      Rsid rsid617 = new Rsid() { Val = "007E1537" };
      Rsid rsid618 = new Rsid() { Val = "007F06B0" };
      Rsid rsid619 = new Rsid() { Val = "007F4357" };
      Rsid rsid620 = new Rsid() { Val = "007F68EF" };
      Rsid rsid621 = new Rsid() { Val = "007F7B39" };
      Rsid rsid622 = new Rsid() { Val = "008027F0" };
      Rsid rsid623 = new Rsid() { Val = "00803781" };
      Rsid rsid624 = new Rsid() { Val = "00803E51" };
      Rsid rsid625 = new Rsid() { Val = "00805381" };
      Rsid rsid626 = new Rsid() { Val = "008059E4" };
      Rsid rsid627 = new Rsid() { Val = "00806D5F" };
      Rsid rsid628 = new Rsid() { Val = "0080702F" };
      Rsid rsid629 = new Rsid() { Val = "008112C3" };
      Rsid rsid630 = new Rsid() { Val = "008116D3" };
      Rsid rsid631 = new Rsid() { Val = "008129E4" };
      Rsid rsid632 = new Rsid() { Val = "008132C1" };
      Rsid rsid633 = new Rsid() { Val = "008137B8" };
      Rsid rsid634 = new Rsid() { Val = "00813B5E" };
      Rsid rsid635 = new Rsid() { Val = "0081541B" };
      Rsid rsid636 = new Rsid() { Val = "0081768C" };
      Rsid rsid637 = new Rsid() { Val = "00820D61" };
      Rsid rsid638 = new Rsid() { Val = "0082438C" };
      Rsid rsid639 = new Rsid() { Val = "00830F03" };
      Rsid rsid640 = new Rsid() { Val = "00833128" };
      Rsid rsid641 = new Rsid() { Val = "0083439F" };
      Rsid rsid642 = new Rsid() { Val = "008420EB" };
      Rsid rsid643 = new Rsid() { Val = "00843551" };
      Rsid rsid644 = new Rsid() { Val = "008444BD" };
      Rsid rsid645 = new Rsid() { Val = "00844FD0" };
      Rsid rsid646 = new Rsid() { Val = "00845AAA" };
      Rsid rsid647 = new Rsid() { Val = "00847338" };
      Rsid rsid648 = new Rsid() { Val = "0085787D" };
      Rsid rsid649 = new Rsid() { Val = "00860970" };
      Rsid rsid650 = new Rsid() { Val = "00860A87" };
      Rsid rsid651 = new Rsid() { Val = "008610B8" };
      Rsid rsid652 = new Rsid() { Val = "00861A47" };
      Rsid rsid653 = new Rsid() { Val = "00862E9E" };
      Rsid rsid654 = new Rsid() { Val = "0086333D" };
      Rsid rsid655 = new Rsid() { Val = "00870A68" };
      Rsid rsid656 = new Rsid() { Val = "008721AB" };
      Rsid rsid657 = new Rsid() { Val = "00873C64" };
      Rsid rsid658 = new Rsid() { Val = "00876935" };
      Rsid rsid659 = new Rsid() { Val = "008810E3" };
      Rsid rsid660 = new Rsid() { Val = "008859BD" };
      Rsid rsid661 = new Rsid() { Val = "0088735E" };
      Rsid rsid662 = new Rsid() { Val = "00891A93" };
      Rsid rsid663 = new Rsid() { Val = "00892465" };
      Rsid rsid664 = new Rsid() { Val = "00892825" };
      Rsid rsid665 = new Rsid() { Val = "00894C9B" };
      Rsid rsid666 = new Rsid() { Val = "008A045E" };
      Rsid rsid667 = new Rsid() { Val = "008A0D3F" };
      Rsid rsid668 = new Rsid() { Val = "008A22F1" };
      Rsid rsid669 = new Rsid() { Val = "008A2467" };
      Rsid rsid670 = new Rsid() { Val = "008A2B08" };
      Rsid rsid671 = new Rsid() { Val = "008A3579" };
      Rsid rsid672 = new Rsid() { Val = "008A3993" };
      Rsid rsid673 = new Rsid() { Val = "008A4A5E" };
      Rsid rsid674 = new Rsid() { Val = "008A5943" };
      Rsid rsid675 = new Rsid() { Val = "008A6F97" };
      Rsid rsid676 = new Rsid() { Val = "008A77F8" };
      Rsid rsid677 = new Rsid() { Val = "008B1EE4" };
      Rsid rsid678 = new Rsid() { Val = "008B2106" };
      Rsid rsid679 = new Rsid() { Val = "008B32DE" };
      Rsid rsid680 = new Rsid() { Val = "008B3B5A" };
      Rsid rsid681 = new Rsid() { Val = "008B3FA6" };
      Rsid rsid682 = new Rsid() { Val = "008C1847" };
      Rsid rsid683 = new Rsid() { Val = "008C44E7" };
      Rsid rsid684 = new Rsid() { Val = "008D18C7" };
      Rsid rsid685 = new Rsid() { Val = "008D2F94" };
      Rsid rsid686 = new Rsid() { Val = "008D685B" };
      Rsid rsid687 = new Rsid() { Val = "008D6F2F" };
      Rsid rsid688 = new Rsid() { Val = "008D6FFD" };
      Rsid rsid689 = new Rsid() { Val = "008D74F4" };
      Rsid rsid690 = new Rsid() { Val = "008E0DF0" };
      Rsid rsid691 = new Rsid() { Val = "008E1898" };
      Rsid rsid692 = new Rsid() { Val = "008E723E" };
      Rsid rsid693 = new Rsid() { Val = "008F27C8" };
      Rsid rsid694 = new Rsid() { Val = "008F3551" };
      Rsid rsid695 = new Rsid() { Val = "008F50B5" };
      Rsid rsid696 = new Rsid() { Val = "008F5F1E" };
      Rsid rsid697 = new Rsid() { Val = "00901448" };
      Rsid rsid698 = new Rsid() { Val = "009019FE" };
      Rsid rsid699 = new Rsid() { Val = "00901B8B" };
      Rsid rsid700 = new Rsid() { Val = "009059EE" };
      Rsid rsid701 = new Rsid() { Val = "00906E5E" };
      Rsid rsid702 = new Rsid() { Val = "0090709A" };
      Rsid rsid703 = new Rsid() { Val = "009075F0" };
      Rsid rsid704 = new Rsid() { Val = "00907C5A" };
      Rsid rsid705 = new Rsid() { Val = "009107A1" };
      Rsid rsid706 = new Rsid() { Val = "00912C89" };
      Rsid rsid707 = new Rsid() { Val = "0091322E" };
      Rsid rsid708 = new Rsid() { Val = "00913B1A" };
      Rsid rsid709 = new Rsid() { Val = "00914F72" };
      Rsid rsid710 = new Rsid() { Val = "00915CB0" };
      Rsid rsid711 = new Rsid() { Val = "00916FFF" };
      Rsid rsid712 = new Rsid() { Val = "009170C2" };
      Rsid rsid713 = new Rsid() { Val = "00917CE9" };
      Rsid rsid714 = new Rsid() { Val = "00921E50" };
      Rsid rsid715 = new Rsid() { Val = "0092296B" };
      Rsid rsid716 = new Rsid() { Val = "00922D55" };
      Rsid rsid717 = new Rsid() { Val = "0092413B" };
      Rsid rsid718 = new Rsid() { Val = "009246CB" };
      Rsid rsid719 = new Rsid() { Val = "00925480" };
      Rsid rsid720 = new Rsid() { Val = "00925F2F" };
      Rsid rsid721 = new Rsid() { Val = "00927D2D" };
      Rsid rsid722 = new Rsid() { Val = "00930F8D" };
      Rsid rsid723 = new Rsid() { Val = "00931810" };
      Rsid rsid724 = new Rsid() { Val = "009323AD" };
      Rsid rsid725 = new Rsid() { Val = "00934A13" };
      Rsid rsid726 = new Rsid() { Val = "00934E7C" };
      Rsid rsid727 = new Rsid() { Val = "00935613" };
      Rsid rsid728 = new Rsid() { Val = "0093694E" };
      Rsid rsid729 = new Rsid() { Val = "009371B5" };
      Rsid rsid730 = new Rsid() { Val = "0093732C" };
      Rsid rsid731 = new Rsid() { Val = "00937782" };
      Rsid rsid732 = new Rsid() { Val = "009412D6" };
      Rsid rsid733 = new Rsid() { Val = "00943B91" };
      Rsid rsid734 = new Rsid() { Val = "00947103" };
      Rsid rsid735 = new Rsid() { Val = "00947599" };
      Rsid rsid736 = new Rsid() { Val = "00955140" };
      Rsid rsid737 = new Rsid() { Val = "009553D6" };
      Rsid rsid738 = new Rsid() { Val = "00956F2A" };
      Rsid rsid739 = new Rsid() { Val = "0095792D" };
      Rsid rsid740 = new Rsid() { Val = "00957EB1" };
      Rsid rsid741 = new Rsid() { Val = "00960986" };
      Rsid rsid742 = new Rsid() { Val = "0096255E" };
      Rsid rsid743 = new Rsid() { Val = "0096479E" };
      Rsid rsid744 = new Rsid() { Val = "00972058" };
      Rsid rsid745 = new Rsid() { Val = "00974B87" };
      Rsid rsid746 = new Rsid() { Val = "009768F6" };
      Rsid rsid747 = new Rsid() { Val = "00977F63" };
      Rsid rsid748 = new Rsid() { Val = "00982336" };
      Rsid rsid749 = new Rsid() { Val = "009837C3" };
      Rsid rsid750 = new Rsid() { Val = "009838AA" };
      Rsid rsid751 = new Rsid() { Val = "00984AF7" };
      Rsid rsid752 = new Rsid() { Val = "009861DE" };
      Rsid rsid753 = new Rsid() { Val = "009872E7" };
      Rsid rsid754 = new Rsid() { Val = "00987999" };
      Rsid rsid755 = new Rsid() { Val = "00990975" };
      Rsid rsid756 = new Rsid() { Val = "00992924" };
      Rsid rsid757 = new Rsid() { Val = "009930C0" };
      Rsid rsid758 = new Rsid() { Val = "009937E4" };
      Rsid rsid759 = new Rsid() { Val = "00993905" };
      Rsid rsid760 = new Rsid() { Val = "00995914" };
      Rsid rsid761 = new Rsid() { Val = "0099721E" };
      Rsid rsid762 = new Rsid() { Val = "009A1D14" };
      Rsid rsid763 = new Rsid() { Val = "009A21A9" };
      Rsid rsid764 = new Rsid() { Val = "009A29B6" };
      Rsid rsid765 = new Rsid() { Val = "009A2FB7" };
      Rsid rsid766 = new Rsid() { Val = "009A3F41" };
      Rsid rsid767 = new Rsid() { Val = "009A4D31" };
      Rsid rsid768 = new Rsid() { Val = "009A4EB3" };
      Rsid rsid769 = new Rsid() { Val = "009A5AEF" };
      Rsid rsid770 = new Rsid() { Val = "009A667E" };
      Rsid rsid771 = new Rsid() { Val = "009A6B17" };
      Rsid rsid772 = new Rsid() { Val = "009A7643" };
      Rsid rsid773 = new Rsid() { Val = "009B54C6" };
      Rsid rsid774 = new Rsid() { Val = "009B7C81" };
      Rsid rsid775 = new Rsid() { Val = "009C092F" };
      Rsid rsid776 = new Rsid() { Val = "009C2E0D" };
      Rsid rsid777 = new Rsid() { Val = "009C3225" };
      Rsid rsid778 = new Rsid() { Val = "009C7E1F" };
      Rsid rsid779 = new Rsid() { Val = "009D1C0A" };
      Rsid rsid780 = new Rsid() { Val = "009D7D95" };
      Rsid rsid781 = new Rsid() { Val = "009D7DC3" };
      Rsid rsid782 = new Rsid() { Val = "009E2982" };
      Rsid rsid783 = new Rsid() { Val = "009E3535" };
      Rsid rsid784 = new Rsid() { Val = "009E3CEF" };
      Rsid rsid785 = new Rsid() { Val = "009E4614" };
      Rsid rsid786 = new Rsid() { Val = "009F26A7" };
      Rsid rsid787 = new Rsid() { Val = "009F4D01" };
      Rsid rsid788 = new Rsid() { Val = "009F5B12" };
      Rsid rsid789 = new Rsid() { Val = "009F658F" };
      Rsid rsid790 = new Rsid() { Val = "00A002E8" };
      Rsid rsid791 = new Rsid() { Val = "00A02336" };
      Rsid rsid792 = new Rsid() { Val = "00A036BF" };
      Rsid rsid793 = new Rsid() { Val = "00A109D3" };
      Rsid rsid794 = new Rsid() { Val = "00A12D38" };
      Rsid rsid795 = new Rsid() { Val = "00A14FB1" };
      Rsid rsid796 = new Rsid() { Val = "00A172FC" };
      Rsid rsid797 = new Rsid() { Val = "00A2438F" };
      Rsid rsid798 = new Rsid() { Val = "00A260E9" };
      Rsid rsid799 = new Rsid() { Val = "00A30B0D" };
      Rsid rsid800 = new Rsid() { Val = "00A3527D" };
      Rsid rsid801 = new Rsid() { Val = "00A40CD2" };
      Rsid rsid802 = new Rsid() { Val = "00A42094" };
      Rsid rsid803 = new Rsid() { Val = "00A43BA0" };
      Rsid rsid804 = new Rsid() { Val = "00A455E9" };
      Rsid rsid805 = new Rsid() { Val = "00A51791" };
      Rsid rsid806 = new Rsid() { Val = "00A53F88" };
      Rsid rsid807 = new Rsid() { Val = "00A546B0" };
      Rsid rsid808 = new Rsid() { Val = "00A54C3A" };
      Rsid rsid809 = new Rsid() { Val = "00A5502D" };
      Rsid rsid810 = new Rsid() { Val = "00A63C8B" };
      Rsid rsid811 = new Rsid() { Val = "00A6754B" };
      Rsid rsid812 = new Rsid() { Val = "00A67A0C" };
      Rsid rsid813 = new Rsid() { Val = "00A709E5" };
      Rsid rsid814 = new Rsid() { Val = "00A729CD" };
      Rsid rsid815 = new Rsid() { Val = "00A72AC5" };
      Rsid rsid816 = new Rsid() { Val = "00A75664" };
      Rsid rsid817 = new Rsid() { Val = "00A772C7" };
      Rsid rsid818 = new Rsid() { Val = "00A77408" };
      Rsid rsid819 = new Rsid() { Val = "00A84979" };
      Rsid rsid820 = new Rsid() { Val = "00A90843" };
      Rsid rsid821 = new Rsid() { Val = "00A92514" };
      Rsid rsid822 = new Rsid() { Val = "00A928D6" };
      Rsid rsid823 = new Rsid() { Val = "00A93191" };
      Rsid rsid824 = new Rsid() { Val = "00A93559" };
      Rsid rsid825 = new Rsid() { Val = "00A97B18" };
      Rsid rsid826 = new Rsid() { Val = "00A97F62" };
      Rsid rsid827 = new Rsid() { Val = "00AA0CC6" };
      Rsid rsid828 = new Rsid() { Val = "00AA38B6" };
      Rsid rsid829 = new Rsid() { Val = "00AB0182" };
      Rsid rsid830 = new Rsid() { Val = "00AB068C" };
      Rsid rsid831 = new Rsid() { Val = "00AB447B" };
      Rsid rsid832 = new Rsid() { Val = "00AB49E9" };
      Rsid rsid833 = new Rsid() { Val = "00AB67C7" };
      Rsid rsid834 = new Rsid() { Val = "00AC07EF" };
      Rsid rsid835 = new Rsid() { Val = "00AC129F" };
      Rsid rsid836 = new Rsid() { Val = "00AC35F7" };
      Rsid rsid837 = new Rsid() { Val = "00AC7EC6" };
      Rsid rsid838 = new Rsid() { Val = "00AD08DA" };
      Rsid rsid839 = new Rsid() { Val = "00AD0D29" };
      Rsid rsid840 = new Rsid() { Val = "00AD3ABC" };
      Rsid rsid841 = new Rsid() { Val = "00AD4B94" };
      Rsid rsid842 = new Rsid() { Val = "00AE00D0" };
      Rsid rsid843 = new Rsid() { Val = "00AE3D82" };
      Rsid rsid844 = new Rsid() { Val = "00AE56E4" };
      Rsid rsid845 = new Rsid() { Val = "00AE6226" };
      Rsid rsid846 = new Rsid() { Val = "00AE69D9" };
      Rsid rsid847 = new Rsid() { Val = "00AE7607" };
      Rsid rsid848 = new Rsid() { Val = "00AF2EDB" };
      Rsid rsid849 = new Rsid() { Val = "00AF3150" };
      Rsid rsid850 = new Rsid() { Val = "00AF5F5C" };
      Rsid rsid851 = new Rsid() { Val = "00B005DB" };
      Rsid rsid852 = new Rsid() { Val = "00B05F15" };
      Rsid rsid853 = new Rsid() { Val = "00B11CBC" };
      Rsid rsid854 = new Rsid() { Val = "00B1314D" };
      Rsid rsid855 = new Rsid() { Val = "00B14767" };
      Rsid rsid856 = new Rsid() { Val = "00B158D5" };
      Rsid rsid857 = new Rsid() { Val = "00B16257" };
      Rsid rsid858 = new Rsid() { Val = "00B2398F" };
      Rsid rsid859 = new Rsid() { Val = "00B23A44" };
      Rsid rsid860 = new Rsid() { Val = "00B245E5" };
      Rsid rsid861 = new Rsid() { Val = "00B26C88" };
      Rsid rsid862 = new Rsid() { Val = "00B33043" };
      Rsid rsid863 = new Rsid() { Val = "00B33A0D" };
      Rsid rsid864 = new Rsid() { Val = "00B35DF0" };
      Rsid rsid865 = new Rsid() { Val = "00B36645" };
      Rsid rsid866 = new Rsid() { Val = "00B36C65" };
      Rsid rsid867 = new Rsid() { Val = "00B37363" };
      Rsid rsid868 = new Rsid() { Val = "00B413C5" };
      Rsid rsid869 = new Rsid() { Val = "00B42BBA" };
      Rsid rsid870 = new Rsid() { Val = "00B432DC" };
      Rsid rsid871 = new Rsid() { Val = "00B449C4" };
      Rsid rsid872 = new Rsid() { Val = "00B4558A" };
      Rsid rsid873 = new Rsid() { Val = "00B4735B" };
      Rsid rsid874 = new Rsid() { Val = "00B52A26" };
      Rsid rsid875 = new Rsid() { Val = "00B54D8F" };
      Rsid rsid876 = new Rsid() { Val = "00B55AFE" };
      Rsid rsid877 = new Rsid() { Val = "00B56EB4" };
      Rsid rsid878 = new Rsid() { Val = "00B57A39" };
      Rsid rsid879 = new Rsid() { Val = "00B62B74" };
      Rsid rsid880 = new Rsid() { Val = "00B63A97" };
      Rsid rsid881 = new Rsid() { Val = "00B66243" };
      Rsid rsid882 = new Rsid() { Val = "00B677F9" };
      Rsid rsid883 = new Rsid() { Val = "00B70F5C" };
      Rsid rsid884 = new Rsid() { Val = "00B724D5" };
      Rsid rsid885 = new Rsid() { Val = "00B74103" };
      Rsid rsid886 = new Rsid() { Val = "00B76705" };
      Rsid rsid887 = new Rsid() { Val = "00B77778" };
      Rsid rsid888 = new Rsid() { Val = "00B77F2F" };
      Rsid rsid889 = new Rsid() { Val = "00B77F8F" };
      Rsid rsid890 = new Rsid() { Val = "00B81322" };
      Rsid rsid891 = new Rsid() { Val = "00B818FB" };
      Rsid rsid892 = new Rsid() { Val = "00B81A0E" };
      Rsid rsid893 = new Rsid() { Val = "00B85B32" };
      Rsid rsid894 = new Rsid() { Val = "00B862F7" };
      Rsid rsid895 = new Rsid() { Val = "00B87686" };
      Rsid rsid896 = new Rsid() { Val = "00B91D8D" };
      Rsid rsid897 = new Rsid() { Val = "00B91E28" };
      Rsid rsid898 = new Rsid() { Val = "00B93415" };
      Rsid rsid899 = new Rsid() { Val = "00B95D15" };
      Rsid rsid900 = new Rsid() { Val = "00B976BE" };
      Rsid rsid901 = new Rsid() { Val = "00BA1C73" };
      Rsid rsid902 = new Rsid() { Val = "00BA5B62" };
      Rsid rsid903 = new Rsid() { Val = "00BC10FF" };
      Rsid rsid904 = new Rsid() { Val = "00BC1C31" };
      Rsid rsid905 = new Rsid() { Val = "00BC7D44" };
      Rsid rsid906 = new Rsid() { Val = "00BD11AB" };
      Rsid rsid907 = new Rsid() { Val = "00BD2A0D" };
      Rsid rsid908 = new Rsid() { Val = "00BD6152" };
      Rsid rsid909 = new Rsid() { Val = "00BD67DC" };
      Rsid rsid910 = new Rsid() { Val = "00BE2EEF" };
      Rsid rsid911 = new Rsid() { Val = "00BE694B" };
      Rsid rsid912 = new Rsid() { Val = "00BF1BEE" };
      Rsid rsid913 = new Rsid() { Val = "00BF27EE" };
      Rsid rsid914 = new Rsid() { Val = "00BF4736" };
      Rsid rsid915 = new Rsid() { Val = "00BF76DE" };
      Rsid rsid916 = new Rsid() { Val = "00C04D72" };
      Rsid rsid917 = new Rsid() { Val = "00C059B9" };
      Rsid rsid918 = new Rsid() { Val = "00C06F51" };
      Rsid rsid919 = new Rsid() { Val = "00C15876" };
      Rsid rsid920 = new Rsid() { Val = "00C239F9" };
      Rsid rsid921 = new Rsid() { Val = "00C24FFD" };
      Rsid rsid922 = new Rsid() { Val = "00C27001" };
      Rsid rsid923 = new Rsid() { Val = "00C276A5" };
      Rsid rsid924 = new Rsid() { Val = "00C27AC8" };
      Rsid rsid925 = new Rsid() { Val = "00C3030F" };
      Rsid rsid926 = new Rsid() { Val = "00C3244B" };
      Rsid rsid927 = new Rsid() { Val = "00C32AA7" };
      Rsid rsid928 = new Rsid() { Val = "00C32C79" };
      Rsid rsid929 = new Rsid() { Val = "00C330EE" };
      Rsid rsid930 = new Rsid() { Val = "00C337C5" };
      Rsid rsid931 = new Rsid() { Val = "00C37411" };
      Rsid rsid932 = new Rsid() { Val = "00C37B22" };
      Rsid rsid933 = new Rsid() { Val = "00C42BB3" };
      Rsid rsid934 = new Rsid() { Val = "00C447FC" };
      Rsid rsid935 = new Rsid() { Val = "00C44945" };
      Rsid rsid936 = new Rsid() { Val = "00C44C99" };
      Rsid rsid937 = new Rsid() { Val = "00C45816" };
      Rsid rsid938 = new Rsid() { Val = "00C462B9" };
      Rsid rsid939 = new Rsid() { Val = "00C4682D" };
      Rsid rsid940 = new Rsid() { Val = "00C46F9C" };
      Rsid rsid941 = new Rsid() { Val = "00C47110" };
      Rsid rsid942 = new Rsid() { Val = "00C522D1" };
      Rsid rsid943 = new Rsid() { Val = "00C52645" };
      Rsid rsid944 = new Rsid() { Val = "00C52DC4" };
      Rsid rsid945 = new Rsid() { Val = "00C5580A" };
      Rsid rsid946 = new Rsid() { Val = "00C577D1" };
      Rsid rsid947 = new Rsid() { Val = "00C60168" };
      Rsid rsid948 = new Rsid() { Val = "00C60577" };
      Rsid rsid949 = new Rsid() { Val = "00C620E5" };
      Rsid rsid950 = new Rsid() { Val = "00C65948" };
      Rsid rsid951 = new Rsid() { Val = "00C65A09" };
      Rsid rsid952 = new Rsid() { Val = "00C6619E" };
      Rsid rsid953 = new Rsid() { Val = "00C7364C" };
      Rsid rsid954 = new Rsid() { Val = "00C754A0" };
      Rsid rsid955 = new Rsid() { Val = "00C8278A" };
      Rsid rsid956 = new Rsid() { Val = "00C91B2C" };
      Rsid rsid957 = new Rsid() { Val = "00C92546" };
      Rsid rsid958 = new Rsid() { Val = "00C92A76" };
      Rsid rsid959 = new Rsid() { Val = "00C93EC5" };
      Rsid rsid960 = new Rsid() { Val = "00C969F8" };
      Rsid rsid961 = new Rsid() { Val = "00C975D1" };
      Rsid rsid962 = new Rsid() { Val = "00C97E23" };
      Rsid rsid963 = new Rsid() { Val = "00CA1199" };
      Rsid rsid964 = new Rsid() { Val = "00CA1EC5" };
      Rsid rsid965 = new Rsid() { Val = "00CA4036" };
      Rsid rsid966 = new Rsid() { Val = "00CA551F" };
      Rsid rsid967 = new Rsid() { Val = "00CB186C" };
      Rsid rsid968 = new Rsid() { Val = "00CB1902" };
      Rsid rsid969 = new Rsid() { Val = "00CB1BC6" };
      Rsid rsid970 = new Rsid() { Val = "00CC622E" };
      Rsid rsid971 = new Rsid() { Val = "00CD0945" };
      Rsid rsid972 = new Rsid() { Val = "00CD173D" };
      Rsid rsid973 = new Rsid() { Val = "00CD7BD3" };
      Rsid rsid974 = new Rsid() { Val = "00CE1021" };
      Rsid rsid975 = new Rsid() { Val = "00CE1682" };
      Rsid rsid976 = new Rsid() { Val = "00CE56D8" };
      Rsid rsid977 = new Rsid() { Val = "00CE61B5" };
      Rsid rsid978 = new Rsid() { Val = "00CF3433" };
      Rsid rsid979 = new Rsid() { Val = "00CF3A89" };
      Rsid rsid980 = new Rsid() { Val = "00CF67AD" };
      Rsid rsid981 = new Rsid() { Val = "00CF7D9D" };
      Rsid rsid982 = new Rsid() { Val = "00D0131F" };
      Rsid rsid983 = new Rsid() { Val = "00D03AD7" };
      Rsid rsid984 = new Rsid() { Val = "00D04060" };
      Rsid rsid985 = new Rsid() { Val = "00D048B3" };
      Rsid rsid986 = new Rsid() { Val = "00D06BB3" };
      Rsid rsid987 = new Rsid() { Val = "00D07D8B" };
      Rsid rsid988 = new Rsid() { Val = "00D07DA4" };
      Rsid rsid989 = new Rsid() { Val = "00D1045E" };
      Rsid rsid990 = new Rsid() { Val = "00D13098" };
      Rsid rsid991 = new Rsid() { Val = "00D13A66" };
      Rsid rsid992 = new Rsid() { Val = "00D1577C" };
      Rsid rsid993 = new Rsid() { Val = "00D22591" };
      Rsid rsid994 = new Rsid() { Val = "00D233A2" };
      Rsid rsid995 = new Rsid() { Val = "00D31EC3" };
      Rsid rsid996 = new Rsid() { Val = "00D3212C" };
      Rsid rsid997 = new Rsid() { Val = "00D33249" };
      Rsid rsid998 = new Rsid() { Val = "00D3575E" };
      Rsid rsid999 = new Rsid() { Val = "00D35A7E" };
      Rsid rsid1000 = new Rsid() { Val = "00D41804" };
      Rsid rsid1001 = new Rsid() { Val = "00D44350" };
      Rsid rsid1002 = new Rsid() { Val = "00D45098" };
      Rsid rsid1003 = new Rsid() { Val = "00D463AA" };
      Rsid rsid1004 = new Rsid() { Val = "00D463DE" };
      Rsid rsid1005 = new Rsid() { Val = "00D47893" };
      Rsid rsid1006 = new Rsid() { Val = "00D47B91" };
      Rsid rsid1007 = new Rsid() { Val = "00D515A6" };
      Rsid rsid1008 = new Rsid() { Val = "00D545E6" };
      Rsid rsid1009 = new Rsid() { Val = "00D577B4" };
      Rsid rsid1010 = new Rsid() { Val = "00D57BE5" };
      Rsid rsid1011 = new Rsid() { Val = "00D602F1" };
      Rsid rsid1012 = new Rsid() { Val = "00D616D8" };
      Rsid rsid1013 = new Rsid() { Val = "00D62459" };
      Rsid rsid1014 = new Rsid() { Val = "00D632E5" };
      Rsid rsid1015 = new Rsid() { Val = "00D6354E" };
      Rsid rsid1016 = new Rsid() { Val = "00D63C95" };
      Rsid rsid1017 = new Rsid() { Val = "00D64EA2" };
      Rsid rsid1018 = new Rsid() { Val = "00D7059B" };
      Rsid rsid1019 = new Rsid() { Val = "00D71D4D" };
      Rsid rsid1020 = new Rsid() { Val = "00D74B3A" };
      Rsid rsid1021 = new Rsid() { Val = "00D849D1" };
      Rsid rsid1022 = new Rsid() { Val = "00D8549E" };
      Rsid rsid1023 = new Rsid() { Val = "00D85967" };
      Rsid rsid1024 = new Rsid() { Val = "00D9283D" };
      Rsid rsid1025 = new Rsid() { Val = "00D933D9" };
      Rsid rsid1026 = new Rsid() { Val = "00D93D90" };
      Rsid rsid1027 = new Rsid() { Val = "00D94770" };
      Rsid rsid1028 = new Rsid() { Val = "00D950DC" };
      Rsid rsid1029 = new Rsid() { Val = "00DA2F51" };
      Rsid rsid1030 = new Rsid() { Val = "00DA32F5" };
      Rsid rsid1031 = new Rsid() { Val = "00DA4F99" };
      Rsid rsid1032 = new Rsid() { Val = "00DA6F2C" };
      Rsid rsid1033 = new Rsid() { Val = "00DB07A1" };
      Rsid rsid1034 = new Rsid() { Val = "00DB45A2" };
      Rsid rsid1035 = new Rsid() { Val = "00DB5010" };
      Rsid rsid1036 = new Rsid() { Val = "00DB54AE" };
      Rsid rsid1037 = new Rsid() { Val = "00DB65E1" };
      Rsid rsid1038 = new Rsid() { Val = "00DC04A6" };
      Rsid rsid1039 = new Rsid() { Val = "00DC2516" };
      Rsid rsid1040 = new Rsid() { Val = "00DC4934" };
      Rsid rsid1041 = new Rsid() { Val = "00DC51FF" };
      Rsid rsid1042 = new Rsid() { Val = "00DD2B7D" };
      Rsid rsid1043 = new Rsid() { Val = "00DD6069" };
      Rsid rsid1044 = new Rsid() { Val = "00DE0910" };
      Rsid rsid1045 = new Rsid() { Val = "00DE4C50" };
      Rsid rsid1046 = new Rsid() { Val = "00DE5DCE" };
      Rsid rsid1047 = new Rsid() { Val = "00DE5E10" };
      Rsid rsid1048 = new Rsid() { Val = "00DE74F4" };
      Rsid rsid1049 = new Rsid() { Val = "00DE7905" };
      Rsid rsid1050 = new Rsid() { Val = "00DE7CB7" };
      Rsid rsid1051 = new Rsid() { Val = "00DF4685" };
      Rsid rsid1052 = new Rsid() { Val = "00DF7275" };
      Rsid rsid1053 = new Rsid() { Val = "00DF7A40" };
      Rsid rsid1054 = new Rsid() { Val = "00E0116C" };
      Rsid rsid1055 = new Rsid() { Val = "00E01777" };
      Rsid rsid1056 = new Rsid() { Val = "00E021E8" };
      Rsid rsid1057 = new Rsid() { Val = "00E0362C" };
      Rsid rsid1058 = new Rsid() { Val = "00E04AE2" };
      Rsid rsid1059 = new Rsid() { Val = "00E05211" };
      Rsid rsid1060 = new Rsid() { Val = "00E0528F" };
      Rsid rsid1061 = new Rsid() { Val = "00E101FF" };
      Rsid rsid1062 = new Rsid() { Val = "00E107E0" };
      Rsid rsid1063 = new Rsid() { Val = "00E109C9" };
      Rsid rsid1064 = new Rsid() { Val = "00E109CF" };
      Rsid rsid1065 = new Rsid() { Val = "00E13217" };
      Rsid rsid1066 = new Rsid() { Val = "00E152B8" };
      Rsid rsid1067 = new Rsid() { Val = "00E15C0C" };
      Rsid rsid1068 = new Rsid() { Val = "00E175A7" };
      Rsid rsid1069 = new Rsid() { Val = "00E17718" };
      Rsid rsid1070 = new Rsid() { Val = "00E2049E" };
      Rsid rsid1071 = new Rsid() { Val = "00E212DB" };
      Rsid rsid1072 = new Rsid() { Val = "00E22865" };
      Rsid rsid1073 = new Rsid() { Val = "00E24FF0" };
      Rsid rsid1074 = new Rsid() { Val = "00E30069" };
      Rsid rsid1075 = new Rsid() { Val = "00E303E9" };
      Rsid rsid1076 = new Rsid() { Val = "00E30E1A" };
      Rsid rsid1077 = new Rsid() { Val = "00E30F1A" };
      Rsid rsid1078 = new Rsid() { Val = "00E30FAD" };
      Rsid rsid1079 = new Rsid() { Val = "00E31C4E" };
      Rsid rsid1080 = new Rsid() { Val = "00E32878" };
      Rsid rsid1081 = new Rsid() { Val = "00E33D67" };
      Rsid rsid1082 = new Rsid() { Val = "00E33F93" };
      Rsid rsid1083 = new Rsid() { Val = "00E34EA9" };
      Rsid rsid1084 = new Rsid() { Val = "00E35AB2" };
      Rsid rsid1085 = new Rsid() { Val = "00E40302" };
      Rsid rsid1086 = new Rsid() { Val = "00E42E7E" };
      Rsid rsid1087 = new Rsid() { Val = "00E4518E" };
      Rsid rsid1088 = new Rsid() { Val = "00E4597F" };
      Rsid rsid1089 = new Rsid() { Val = "00E47F2D" };
      Rsid rsid1090 = new Rsid() { Val = "00E55681" };
      Rsid rsid1091 = new Rsid() { Val = "00E5612D" };
      Rsid rsid1092 = new Rsid() { Val = "00E56A97" };
      Rsid rsid1093 = new Rsid() { Val = "00E6038E" };
      Rsid rsid1094 = new Rsid() { Val = "00E6097A" };
      Rsid rsid1095 = new Rsid() { Val = "00E6117F" };
      Rsid rsid1096 = new Rsid() { Val = "00E64E80" };
      Rsid rsid1097 = new Rsid() { Val = "00E672F2" };
      Rsid rsid1098 = new Rsid() { Val = "00E7319A" };
      Rsid rsid1099 = new Rsid() { Val = "00E73251" };
      Rsid rsid1100 = new Rsid() { Val = "00E73252" };
      Rsid rsid1101 = new Rsid() { Val = "00E7350E" };
      Rsid rsid1102 = new Rsid() { Val = "00E73EBE" };
      Rsid rsid1103 = new Rsid() { Val = "00E74F47" };
      Rsid rsid1104 = new Rsid() { Val = "00E75387" };
      Rsid rsid1105 = new Rsid() { Val = "00E76A9E" };
      Rsid rsid1106 = new Rsid() { Val = "00E81EAB" };
      Rsid rsid1107 = new Rsid() { Val = "00E82C3C" };
      Rsid rsid1108 = new Rsid() { Val = "00E85D51" };
      Rsid rsid1109 = new Rsid() { Val = "00E90D70" };
      Rsid rsid1110 = new Rsid() { Val = "00E91312" };
      Rsid rsid1111 = new Rsid() { Val = "00E9297D" };
      Rsid rsid1112 = new Rsid() { Val = "00E94B0A" };
      Rsid rsid1113 = new Rsid() { Val = "00E9678A" };
      Rsid rsid1114 = new Rsid() { Val = "00E96ED3" };
      Rsid rsid1115 = new Rsid() { Val = "00EA197E" };
      Rsid rsid1116 = new Rsid() { Val = "00EA1B90" };
      Rsid rsid1117 = new Rsid() { Val = "00EA2B19" };
      Rsid rsid1118 = new Rsid() { Val = "00EA39C2" };
      Rsid rsid1119 = new Rsid() { Val = "00EB0F30" };
      Rsid rsid1120 = new Rsid() { Val = "00EB24D6" };
      Rsid rsid1121 = new Rsid() { Val = "00EB260E" };
      Rsid rsid1122 = new Rsid() { Val = "00EB2C99" };
      Rsid rsid1123 = new Rsid() { Val = "00EB3666" };
      Rsid rsid1124 = new Rsid() { Val = "00EB4CC1" };
      Rsid rsid1125 = new Rsid() { Val = "00EB7F42" };
      Rsid rsid1126 = new Rsid() { Val = "00EC081A" };
      Rsid rsid1127 = new Rsid() { Val = "00EC14C3" };
      Rsid rsid1128 = new Rsid() { Val = "00ED2952" };
      Rsid rsid1129 = new Rsid() { Val = "00ED3407" };
      Rsid rsid1130 = new Rsid() { Val = "00EE27FD" };
      Rsid rsid1131 = new Rsid() { Val = "00EE31B9" };
      Rsid rsid1132 = new Rsid() { Val = "00EE5102" };
      Rsid rsid1133 = new Rsid() { Val = "00EE5744" };
      Rsid rsid1134 = new Rsid() { Val = "00EE660A" };
      Rsid rsid1135 = new Rsid() { Val = "00EF13EF" };
      Rsid rsid1136 = new Rsid() { Val = "00EF150B" };
      Rsid rsid1137 = new Rsid() { Val = "00EF213B" };
      Rsid rsid1138 = new Rsid() { Val = "00EF21DD" };
      Rsid rsid1139 = new Rsid() { Val = "00EF4D28" };
      Rsid rsid1140 = new Rsid() { Val = "00F003DD" };
      Rsid rsid1141 = new Rsid() { Val = "00F04CA4" };
      Rsid rsid1142 = new Rsid() { Val = "00F057FD" };
      Rsid rsid1143 = new Rsid() { Val = "00F06BFC" };
      Rsid rsid1144 = new Rsid() { Val = "00F070C1" };
      Rsid rsid1145 = new Rsid() { Val = "00F100A2" };
      Rsid rsid1146 = new Rsid() { Val = "00F10BCF" };
      Rsid rsid1147 = new Rsid() { Val = "00F10D5E" };
      Rsid rsid1148 = new Rsid() { Val = "00F113E8" };
      Rsid rsid1149 = new Rsid() { Val = "00F115DF" };
      Rsid rsid1150 = new Rsid() { Val = "00F1272B" };
      Rsid rsid1151 = new Rsid() { Val = "00F132AC" };
      Rsid rsid1152 = new Rsid() { Val = "00F177C5" };
      Rsid rsid1153 = new Rsid() { Val = "00F216CA" };
      Rsid rsid1154 = new Rsid() { Val = "00F23C09" };
      Rsid rsid1155 = new Rsid() { Val = "00F247E5" };
      Rsid rsid1156 = new Rsid() { Val = "00F26680" };
      Rsid rsid1157 = new Rsid() { Val = "00F2775B" };
      Rsid rsid1158 = new Rsid() { Val = "00F32F8B" };
      Rsid rsid1159 = new Rsid() { Val = "00F36FA6" };
      Rsid rsid1160 = new Rsid() { Val = "00F3798A" };
      Rsid rsid1161 = new Rsid() { Val = "00F40A58" };
      Rsid rsid1162 = new Rsid() { Val = "00F423EA" };
      Rsid rsid1163 = new Rsid() { Val = "00F429B3" };
      Rsid rsid1164 = new Rsid() { Val = "00F43F00" };
      Rsid rsid1165 = new Rsid() { Val = "00F45E35" };
      Rsid rsid1166 = new Rsid() { Val = "00F46165" };
      Rsid rsid1167 = new Rsid() { Val = "00F4674F" };
      Rsid rsid1168 = new Rsid() { Val = "00F510C4" };
      Rsid rsid1169 = new Rsid() { Val = "00F56C4F" };
      Rsid rsid1170 = new Rsid() { Val = "00F57537" };
      Rsid rsid1171 = new Rsid() { Val = "00F62ABF" };
      Rsid rsid1172 = new Rsid() { Val = "00F62E5B" };
      Rsid rsid1173 = new Rsid() { Val = "00F6383F" };
      Rsid rsid1174 = new Rsid() { Val = "00F66423" };
      Rsid rsid1175 = new Rsid() { Val = "00F66783" };
      Rsid rsid1176 = new Rsid() { Val = "00F75547" };
      Rsid rsid1177 = new Rsid() { Val = "00F761C0" };
      Rsid rsid1178 = new Rsid() { Val = "00F769BE" };
      Rsid rsid1179 = new Rsid() { Val = "00F77B16" };
      Rsid rsid1180 = new Rsid() { Val = "00F82170" };
      Rsid rsid1181 = new Rsid() { Val = "00F82F40" };
      Rsid rsid1182 = new Rsid() { Val = "00F8337A" };
      Rsid rsid1183 = new Rsid() { Val = "00F83FD3" };
      Rsid rsid1184 = new Rsid() { Val = "00F852A8" };
      Rsid rsid1185 = new Rsid() { Val = "00F85A19" };
      Rsid rsid1186 = new Rsid() { Val = "00F870B7" };
      Rsid rsid1187 = new Rsid() { Val = "00F93088" };
      Rsid rsid1188 = new Rsid() { Val = "00F93745" };
      Rsid rsid1189 = new Rsid() { Val = "00F956A0" };
      Rsid rsid1190 = new Rsid() { Val = "00F96BF0" };
      Rsid rsid1191 = new Rsid() { Val = "00F96FBB" };
      Rsid rsid1192 = new Rsid() { Val = "00FA32F8" };
      Rsid rsid1193 = new Rsid() { Val = "00FA7CBC" };
      Rsid rsid1194 = new Rsid() { Val = "00FA7E9A" };
      Rsid rsid1195 = new Rsid() { Val = "00FB0D20" };
      Rsid rsid1196 = new Rsid() { Val = "00FB2CF1" };
      Rsid rsid1197 = new Rsid() { Val = "00FB6227" };
      Rsid rsid1198 = new Rsid() { Val = "00FB778C" };
      Rsid rsid1199 = new Rsid() { Val = "00FC1F3D" };
      Rsid rsid1200 = new Rsid() { Val = "00FC30AF" };
      Rsid rsid1201 = new Rsid() { Val = "00FC3744" };
      Rsid rsid1202 = new Rsid() { Val = "00FC4A6F" };
      Rsid rsid1203 = new Rsid() { Val = "00FC653F" };
      Rsid rsid1204 = new Rsid() { Val = "00FC660B" };
      Rsid rsid1205 = new Rsid() { Val = "00FC710A" };
      Rsid rsid1206 = new Rsid() { Val = "00FD05A6" };
      Rsid rsid1207 = new Rsid() { Val = "00FD3BC2" };
      Rsid rsid1208 = new Rsid() { Val = "00FD7341" };
      Rsid rsid1209 = new Rsid() { Val = "00FD78D1" };
      Rsid rsid1210 = new Rsid() { Val = "00FD7910" };
      Rsid rsid1211 = new Rsid() { Val = "00FE0F99" };
      Rsid rsid1212 = new Rsid() { Val = "00FE12FC" };
      Rsid rsid1213 = new Rsid() { Val = "00FE7F8F" };
      Rsid rsid1214 = new Rsid() { Val = "00FF0ADD" };
      Rsid rsid1215 = new Rsid() { Val = "00FF6AE4" };

      rsids1.Append(rsidRoot1);
      rsids1.Append(rsid1);
      rsids1.Append(rsid2);
      rsids1.Append(rsid3);
      rsids1.Append(rsid4);
      rsids1.Append(rsid5);
      rsids1.Append(rsid6);
      rsids1.Append(rsid7);
      rsids1.Append(rsid8);
      rsids1.Append(rsid9);
      rsids1.Append(rsid10);
      rsids1.Append(rsid11);
      rsids1.Append(rsid12);
      rsids1.Append(rsid13);
      rsids1.Append(rsid14);
      rsids1.Append(rsid15);
      rsids1.Append(rsid16);
      rsids1.Append(rsid17);
      rsids1.Append(rsid18);
      rsids1.Append(rsid19);
      rsids1.Append(rsid20);
      rsids1.Append(rsid21);
      rsids1.Append(rsid22);
      rsids1.Append(rsid23);
      rsids1.Append(rsid24);
      rsids1.Append(rsid25);
      rsids1.Append(rsid26);
      rsids1.Append(rsid27);
      rsids1.Append(rsid28);
      rsids1.Append(rsid29);
      rsids1.Append(rsid30);
      rsids1.Append(rsid31);
      rsids1.Append(rsid32);
      rsids1.Append(rsid33);
      rsids1.Append(rsid34);
      rsids1.Append(rsid35);
      rsids1.Append(rsid36);
      rsids1.Append(rsid37);
      rsids1.Append(rsid38);
      rsids1.Append(rsid39);
      rsids1.Append(rsid40);
      rsids1.Append(rsid41);
      rsids1.Append(rsid42);
      rsids1.Append(rsid43);
      rsids1.Append(rsid44);
      rsids1.Append(rsid45);
      rsids1.Append(rsid46);
      rsids1.Append(rsid47);
      rsids1.Append(rsid48);
      rsids1.Append(rsid49);
      rsids1.Append(rsid50);
      rsids1.Append(rsid51);
      rsids1.Append(rsid52);
      rsids1.Append(rsid53);
      rsids1.Append(rsid54);
      rsids1.Append(rsid55);
      rsids1.Append(rsid56);
      rsids1.Append(rsid57);
      rsids1.Append(rsid58);
      rsids1.Append(rsid59);
      rsids1.Append(rsid60);
      rsids1.Append(rsid61);
      rsids1.Append(rsid62);
      rsids1.Append(rsid63);
      rsids1.Append(rsid64);
      rsids1.Append(rsid65);
      rsids1.Append(rsid66);
      rsids1.Append(rsid67);
      rsids1.Append(rsid68);
      rsids1.Append(rsid69);
      rsids1.Append(rsid70);
      rsids1.Append(rsid71);
      rsids1.Append(rsid72);
      rsids1.Append(rsid73);
      rsids1.Append(rsid74);
      rsids1.Append(rsid75);
      rsids1.Append(rsid76);
      rsids1.Append(rsid77);
      rsids1.Append(rsid78);
      rsids1.Append(rsid79);
      rsids1.Append(rsid80);
      rsids1.Append(rsid81);
      rsids1.Append(rsid82);
      rsids1.Append(rsid83);
      rsids1.Append(rsid84);
      rsids1.Append(rsid85);
      rsids1.Append(rsid86);
      rsids1.Append(rsid87);
      rsids1.Append(rsid88);
      rsids1.Append(rsid89);
      rsids1.Append(rsid90);
      rsids1.Append(rsid91);
      rsids1.Append(rsid92);
      rsids1.Append(rsid93);
      rsids1.Append(rsid94);
      rsids1.Append(rsid95);
      rsids1.Append(rsid96);
      rsids1.Append(rsid97);
      rsids1.Append(rsid98);
      rsids1.Append(rsid99);
      rsids1.Append(rsid100);
      rsids1.Append(rsid101);
      rsids1.Append(rsid102);
      rsids1.Append(rsid103);
      rsids1.Append(rsid104);
      rsids1.Append(rsid105);
      rsids1.Append(rsid106);
      rsids1.Append(rsid107);
      rsids1.Append(rsid108);
      rsids1.Append(rsid109);
      rsids1.Append(rsid110);
      rsids1.Append(rsid111);
      rsids1.Append(rsid112);
      rsids1.Append(rsid113);
      rsids1.Append(rsid114);
      rsids1.Append(rsid115);
      rsids1.Append(rsid116);
      rsids1.Append(rsid117);
      rsids1.Append(rsid118);
      rsids1.Append(rsid119);
      rsids1.Append(rsid120);
      rsids1.Append(rsid121);
      rsids1.Append(rsid122);
      rsids1.Append(rsid123);
      rsids1.Append(rsid124);
      rsids1.Append(rsid125);
      rsids1.Append(rsid126);
      rsids1.Append(rsid127);
      rsids1.Append(rsid128);
      rsids1.Append(rsid129);
      rsids1.Append(rsid130);
      rsids1.Append(rsid131);
      rsids1.Append(rsid132);
      rsids1.Append(rsid133);
      rsids1.Append(rsid134);
      rsids1.Append(rsid135);
      rsids1.Append(rsid136);
      rsids1.Append(rsid137);
      rsids1.Append(rsid138);
      rsids1.Append(rsid139);
      rsids1.Append(rsid140);
      rsids1.Append(rsid141);
      rsids1.Append(rsid142);
      rsids1.Append(rsid143);
      rsids1.Append(rsid144);
      rsids1.Append(rsid145);
      rsids1.Append(rsid146);
      rsids1.Append(rsid147);
      rsids1.Append(rsid148);
      rsids1.Append(rsid149);
      rsids1.Append(rsid150);
      rsids1.Append(rsid151);
      rsids1.Append(rsid152);
      rsids1.Append(rsid153);
      rsids1.Append(rsid154);
      rsids1.Append(rsid155);
      rsids1.Append(rsid156);
      rsids1.Append(rsid157);
      rsids1.Append(rsid158);
      rsids1.Append(rsid159);
      rsids1.Append(rsid160);
      rsids1.Append(rsid161);
      rsids1.Append(rsid162);
      rsids1.Append(rsid163);
      rsids1.Append(rsid164);
      rsids1.Append(rsid165);
      rsids1.Append(rsid166);
      rsids1.Append(rsid167);
      rsids1.Append(rsid168);
      rsids1.Append(rsid169);
      rsids1.Append(rsid170);
      rsids1.Append(rsid171);
      rsids1.Append(rsid172);
      rsids1.Append(rsid173);
      rsids1.Append(rsid174);
      rsids1.Append(rsid175);
      rsids1.Append(rsid176);
      rsids1.Append(rsid177);
      rsids1.Append(rsid178);
      rsids1.Append(rsid179);
      rsids1.Append(rsid180);
      rsids1.Append(rsid181);
      rsids1.Append(rsid182);
      rsids1.Append(rsid183);
      rsids1.Append(rsid184);
      rsids1.Append(rsid185);
      rsids1.Append(rsid186);
      rsids1.Append(rsid187);
      rsids1.Append(rsid188);
      rsids1.Append(rsid189);
      rsids1.Append(rsid190);
      rsids1.Append(rsid191);
      rsids1.Append(rsid192);
      rsids1.Append(rsid193);
      rsids1.Append(rsid194);
      rsids1.Append(rsid195);
      rsids1.Append(rsid196);
      rsids1.Append(rsid197);
      rsids1.Append(rsid198);
      rsids1.Append(rsid199);
      rsids1.Append(rsid200);
      rsids1.Append(rsid201);
      rsids1.Append(rsid202);
      rsids1.Append(rsid203);
      rsids1.Append(rsid204);
      rsids1.Append(rsid205);
      rsids1.Append(rsid206);
      rsids1.Append(rsid207);
      rsids1.Append(rsid208);
      rsids1.Append(rsid209);
      rsids1.Append(rsid210);
      rsids1.Append(rsid211);
      rsids1.Append(rsid212);
      rsids1.Append(rsid213);
      rsids1.Append(rsid214);
      rsids1.Append(rsid215);
      rsids1.Append(rsid216);
      rsids1.Append(rsid217);
      rsids1.Append(rsid218);
      rsids1.Append(rsid219);
      rsids1.Append(rsid220);
      rsids1.Append(rsid221);
      rsids1.Append(rsid222);
      rsids1.Append(rsid223);
      rsids1.Append(rsid224);
      rsids1.Append(rsid225);
      rsids1.Append(rsid226);
      rsids1.Append(rsid227);
      rsids1.Append(rsid228);
      rsids1.Append(rsid229);
      rsids1.Append(rsid230);
      rsids1.Append(rsid231);
      rsids1.Append(rsid232);
      rsids1.Append(rsid233);
      rsids1.Append(rsid234);
      rsids1.Append(rsid235);
      rsids1.Append(rsid236);
      rsids1.Append(rsid237);
      rsids1.Append(rsid238);
      rsids1.Append(rsid239);
      rsids1.Append(rsid240);
      rsids1.Append(rsid241);
      rsids1.Append(rsid242);
      rsids1.Append(rsid243);
      rsids1.Append(rsid244);
      rsids1.Append(rsid245);
      rsids1.Append(rsid246);
      rsids1.Append(rsid247);
      rsids1.Append(rsid248);
      rsids1.Append(rsid249);
      rsids1.Append(rsid250);
      rsids1.Append(rsid251);
      rsids1.Append(rsid252);
      rsids1.Append(rsid253);
      rsids1.Append(rsid254);
      rsids1.Append(rsid255);
      rsids1.Append(rsid256);
      rsids1.Append(rsid257);
      rsids1.Append(rsid258);
      rsids1.Append(rsid259);
      rsids1.Append(rsid260);
      rsids1.Append(rsid261);
      rsids1.Append(rsid262);
      rsids1.Append(rsid263);
      rsids1.Append(rsid264);
      rsids1.Append(rsid265);
      rsids1.Append(rsid266);
      rsids1.Append(rsid267);
      rsids1.Append(rsid268);
      rsids1.Append(rsid269);
      rsids1.Append(rsid270);
      rsids1.Append(rsid271);
      rsids1.Append(rsid272);
      rsids1.Append(rsid273);
      rsids1.Append(rsid274);
      rsids1.Append(rsid275);
      rsids1.Append(rsid276);
      rsids1.Append(rsid277);
      rsids1.Append(rsid278);
      rsids1.Append(rsid279);
      rsids1.Append(rsid280);
      rsids1.Append(rsid281);
      rsids1.Append(rsid282);
      rsids1.Append(rsid283);
      rsids1.Append(rsid284);
      rsids1.Append(rsid285);
      rsids1.Append(rsid286);
      rsids1.Append(rsid287);
      rsids1.Append(rsid288);
      rsids1.Append(rsid289);
      rsids1.Append(rsid290);
      rsids1.Append(rsid291);
      rsids1.Append(rsid292);
      rsids1.Append(rsid293);
      rsids1.Append(rsid294);
      rsids1.Append(rsid295);
      rsids1.Append(rsid296);
      rsids1.Append(rsid297);
      rsids1.Append(rsid298);
      rsids1.Append(rsid299);
      rsids1.Append(rsid300);
      rsids1.Append(rsid301);
      rsids1.Append(rsid302);
      rsids1.Append(rsid303);
      rsids1.Append(rsid304);
      rsids1.Append(rsid305);
      rsids1.Append(rsid306);
      rsids1.Append(rsid307);
      rsids1.Append(rsid308);
      rsids1.Append(rsid309);
      rsids1.Append(rsid310);
      rsids1.Append(rsid311);
      rsids1.Append(rsid312);
      rsids1.Append(rsid313);
      rsids1.Append(rsid314);
      rsids1.Append(rsid315);
      rsids1.Append(rsid316);
      rsids1.Append(rsid317);
      rsids1.Append(rsid318);
      rsids1.Append(rsid319);
      rsids1.Append(rsid320);
      rsids1.Append(rsid321);
      rsids1.Append(rsid322);
      rsids1.Append(rsid323);
      rsids1.Append(rsid324);
      rsids1.Append(rsid325);
      rsids1.Append(rsid326);
      rsids1.Append(rsid327);
      rsids1.Append(rsid328);
      rsids1.Append(rsid329);
      rsids1.Append(rsid330);
      rsids1.Append(rsid331);
      rsids1.Append(rsid332);
      rsids1.Append(rsid333);
      rsids1.Append(rsid334);
      rsids1.Append(rsid335);
      rsids1.Append(rsid336);
      rsids1.Append(rsid337);
      rsids1.Append(rsid338);
      rsids1.Append(rsid339);
      rsids1.Append(rsid340);
      rsids1.Append(rsid341);
      rsids1.Append(rsid342);
      rsids1.Append(rsid343);
      rsids1.Append(rsid344);
      rsids1.Append(rsid345);
      rsids1.Append(rsid346);
      rsids1.Append(rsid347);
      rsids1.Append(rsid348);
      rsids1.Append(rsid349);
      rsids1.Append(rsid350);
      rsids1.Append(rsid351);
      rsids1.Append(rsid352);
      rsids1.Append(rsid353);
      rsids1.Append(rsid354);
      rsids1.Append(rsid355);
      rsids1.Append(rsid356);
      rsids1.Append(rsid357);
      rsids1.Append(rsid358);
      rsids1.Append(rsid359);
      rsids1.Append(rsid360);
      rsids1.Append(rsid361);
      rsids1.Append(rsid362);
      rsids1.Append(rsid363);
      rsids1.Append(rsid364);
      rsids1.Append(rsid365);
      rsids1.Append(rsid366);
      rsids1.Append(rsid367);
      rsids1.Append(rsid368);
      rsids1.Append(rsid369);
      rsids1.Append(rsid370);
      rsids1.Append(rsid371);
      rsids1.Append(rsid372);
      rsids1.Append(rsid373);
      rsids1.Append(rsid374);
      rsids1.Append(rsid375);
      rsids1.Append(rsid376);
      rsids1.Append(rsid377);
      rsids1.Append(rsid378);
      rsids1.Append(rsid379);
      rsids1.Append(rsid380);
      rsids1.Append(rsid381);
      rsids1.Append(rsid382);
      rsids1.Append(rsid383);
      rsids1.Append(rsid384);
      rsids1.Append(rsid385);
      rsids1.Append(rsid386);
      rsids1.Append(rsid387);
      rsids1.Append(rsid388);
      rsids1.Append(rsid389);
      rsids1.Append(rsid390);
      rsids1.Append(rsid391);
      rsids1.Append(rsid392);
      rsids1.Append(rsid393);
      rsids1.Append(rsid394);
      rsids1.Append(rsid395);
      rsids1.Append(rsid396);
      rsids1.Append(rsid397);
      rsids1.Append(rsid398);
      rsids1.Append(rsid399);
      rsids1.Append(rsid400);
      rsids1.Append(rsid401);
      rsids1.Append(rsid402);
      rsids1.Append(rsid403);
      rsids1.Append(rsid404);
      rsids1.Append(rsid405);
      rsids1.Append(rsid406);
      rsids1.Append(rsid407);
      rsids1.Append(rsid408);
      rsids1.Append(rsid409);
      rsids1.Append(rsid410);
      rsids1.Append(rsid411);
      rsids1.Append(rsid412);
      rsids1.Append(rsid413);
      rsids1.Append(rsid414);
      rsids1.Append(rsid415);
      rsids1.Append(rsid416);
      rsids1.Append(rsid417);
      rsids1.Append(rsid418);
      rsids1.Append(rsid419);
      rsids1.Append(rsid420);
      rsids1.Append(rsid421);
      rsids1.Append(rsid422);
      rsids1.Append(rsid423);
      rsids1.Append(rsid424);
      rsids1.Append(rsid425);
      rsids1.Append(rsid426);
      rsids1.Append(rsid427);
      rsids1.Append(rsid428);
      rsids1.Append(rsid429);
      rsids1.Append(rsid430);
      rsids1.Append(rsid431);
      rsids1.Append(rsid432);
      rsids1.Append(rsid433);
      rsids1.Append(rsid434);
      rsids1.Append(rsid435);
      rsids1.Append(rsid436);
      rsids1.Append(rsid437);
      rsids1.Append(rsid438);
      rsids1.Append(rsid439);
      rsids1.Append(rsid440);
      rsids1.Append(rsid441);
      rsids1.Append(rsid442);
      rsids1.Append(rsid443);
      rsids1.Append(rsid444);
      rsids1.Append(rsid445);
      rsids1.Append(rsid446);
      rsids1.Append(rsid447);
      rsids1.Append(rsid448);
      rsids1.Append(rsid449);
      rsids1.Append(rsid450);
      rsids1.Append(rsid451);
      rsids1.Append(rsid452);
      rsids1.Append(rsid453);
      rsids1.Append(rsid454);
      rsids1.Append(rsid455);
      rsids1.Append(rsid456);
      rsids1.Append(rsid457);
      rsids1.Append(rsid458);
      rsids1.Append(rsid459);
      rsids1.Append(rsid460);
      rsids1.Append(rsid461);
      rsids1.Append(rsid462);
      rsids1.Append(rsid463);
      rsids1.Append(rsid464);
      rsids1.Append(rsid465);
      rsids1.Append(rsid466);
      rsids1.Append(rsid467);
      rsids1.Append(rsid468);
      rsids1.Append(rsid469);
      rsids1.Append(rsid470);
      rsids1.Append(rsid471);
      rsids1.Append(rsid472);
      rsids1.Append(rsid473);
      rsids1.Append(rsid474);
      rsids1.Append(rsid475);
      rsids1.Append(rsid476);
      rsids1.Append(rsid477);
      rsids1.Append(rsid478);
      rsids1.Append(rsid479);
      rsids1.Append(rsid480);
      rsids1.Append(rsid481);
      rsids1.Append(rsid482);
      rsids1.Append(rsid483);
      rsids1.Append(rsid484);
      rsids1.Append(rsid485);
      rsids1.Append(rsid486);
      rsids1.Append(rsid487);
      rsids1.Append(rsid488);
      rsids1.Append(rsid489);
      rsids1.Append(rsid490);
      rsids1.Append(rsid491);
      rsids1.Append(rsid492);
      rsids1.Append(rsid493);
      rsids1.Append(rsid494);
      rsids1.Append(rsid495);
      rsids1.Append(rsid496);
      rsids1.Append(rsid497);
      rsids1.Append(rsid498);
      rsids1.Append(rsid499);
      rsids1.Append(rsid500);
      rsids1.Append(rsid501);
      rsids1.Append(rsid502);
      rsids1.Append(rsid503);
      rsids1.Append(rsid504);
      rsids1.Append(rsid505);
      rsids1.Append(rsid506);
      rsids1.Append(rsid507);
      rsids1.Append(rsid508);
      rsids1.Append(rsid509);
      rsids1.Append(rsid510);
      rsids1.Append(rsid511);
      rsids1.Append(rsid512);
      rsids1.Append(rsid513);
      rsids1.Append(rsid514);
      rsids1.Append(rsid515);
      rsids1.Append(rsid516);
      rsids1.Append(rsid517);
      rsids1.Append(rsid518);
      rsids1.Append(rsid519);
      rsids1.Append(rsid520);
      rsids1.Append(rsid521);
      rsids1.Append(rsid522);
      rsids1.Append(rsid523);
      rsids1.Append(rsid524);
      rsids1.Append(rsid525);
      rsids1.Append(rsid526);
      rsids1.Append(rsid527);
      rsids1.Append(rsid528);
      rsids1.Append(rsid529);
      rsids1.Append(rsid530);
      rsids1.Append(rsid531);
      rsids1.Append(rsid532);
      rsids1.Append(rsid533);
      rsids1.Append(rsid534);
      rsids1.Append(rsid535);
      rsids1.Append(rsid536);
      rsids1.Append(rsid537);
      rsids1.Append(rsid538);
      rsids1.Append(rsid539);
      rsids1.Append(rsid540);
      rsids1.Append(rsid541);
      rsids1.Append(rsid542);
      rsids1.Append(rsid543);
      rsids1.Append(rsid544);
      rsids1.Append(rsid545);
      rsids1.Append(rsid546);
      rsids1.Append(rsid547);
      rsids1.Append(rsid548);
      rsids1.Append(rsid549);
      rsids1.Append(rsid550);
      rsids1.Append(rsid551);
      rsids1.Append(rsid552);
      rsids1.Append(rsid553);
      rsids1.Append(rsid554);
      rsids1.Append(rsid555);
      rsids1.Append(rsid556);
      rsids1.Append(rsid557);
      rsids1.Append(rsid558);
      rsids1.Append(rsid559);
      rsids1.Append(rsid560);
      rsids1.Append(rsid561);
      rsids1.Append(rsid562);
      rsids1.Append(rsid563);
      rsids1.Append(rsid564);
      rsids1.Append(rsid565);
      rsids1.Append(rsid566);
      rsids1.Append(rsid567);
      rsids1.Append(rsid568);
      rsids1.Append(rsid569);
      rsids1.Append(rsid570);
      rsids1.Append(rsid571);
      rsids1.Append(rsid572);
      rsids1.Append(rsid573);
      rsids1.Append(rsid574);
      rsids1.Append(rsid575);
      rsids1.Append(rsid576);
      rsids1.Append(rsid577);
      rsids1.Append(rsid578);
      rsids1.Append(rsid579);
      rsids1.Append(rsid580);
      rsids1.Append(rsid581);
      rsids1.Append(rsid582);
      rsids1.Append(rsid583);
      rsids1.Append(rsid584);
      rsids1.Append(rsid585);
      rsids1.Append(rsid586);
      rsids1.Append(rsid587);
      rsids1.Append(rsid588);
      rsids1.Append(rsid589);
      rsids1.Append(rsid590);
      rsids1.Append(rsid591);
      rsids1.Append(rsid592);
      rsids1.Append(rsid593);
      rsids1.Append(rsid594);
      rsids1.Append(rsid595);
      rsids1.Append(rsid596);
      rsids1.Append(rsid597);
      rsids1.Append(rsid598);
      rsids1.Append(rsid599);
      rsids1.Append(rsid600);
      rsids1.Append(rsid601);
      rsids1.Append(rsid602);
      rsids1.Append(rsid603);
      rsids1.Append(rsid604);
      rsids1.Append(rsid605);
      rsids1.Append(rsid606);
      rsids1.Append(rsid607);
      rsids1.Append(rsid608);
      rsids1.Append(rsid609);
      rsids1.Append(rsid610);
      rsids1.Append(rsid611);
      rsids1.Append(rsid612);
      rsids1.Append(rsid613);
      rsids1.Append(rsid614);
      rsids1.Append(rsid615);
      rsids1.Append(rsid616);
      rsids1.Append(rsid617);
      rsids1.Append(rsid618);
      rsids1.Append(rsid619);
      rsids1.Append(rsid620);
      rsids1.Append(rsid621);
      rsids1.Append(rsid622);
      rsids1.Append(rsid623);
      rsids1.Append(rsid624);
      rsids1.Append(rsid625);
      rsids1.Append(rsid626);
      rsids1.Append(rsid627);
      rsids1.Append(rsid628);
      rsids1.Append(rsid629);
      rsids1.Append(rsid630);
      rsids1.Append(rsid631);
      rsids1.Append(rsid632);
      rsids1.Append(rsid633);
      rsids1.Append(rsid634);
      rsids1.Append(rsid635);
      rsids1.Append(rsid636);
      rsids1.Append(rsid637);
      rsids1.Append(rsid638);
      rsids1.Append(rsid639);
      rsids1.Append(rsid640);
      rsids1.Append(rsid641);
      rsids1.Append(rsid642);
      rsids1.Append(rsid643);
      rsids1.Append(rsid644);
      rsids1.Append(rsid645);
      rsids1.Append(rsid646);
      rsids1.Append(rsid647);
      rsids1.Append(rsid648);
      rsids1.Append(rsid649);
      rsids1.Append(rsid650);
      rsids1.Append(rsid651);
      rsids1.Append(rsid652);
      rsids1.Append(rsid653);
      rsids1.Append(rsid654);
      rsids1.Append(rsid655);
      rsids1.Append(rsid656);
      rsids1.Append(rsid657);
      rsids1.Append(rsid658);
      rsids1.Append(rsid659);
      rsids1.Append(rsid660);
      rsids1.Append(rsid661);
      rsids1.Append(rsid662);
      rsids1.Append(rsid663);
      rsids1.Append(rsid664);
      rsids1.Append(rsid665);
      rsids1.Append(rsid666);
      rsids1.Append(rsid667);
      rsids1.Append(rsid668);
      rsids1.Append(rsid669);
      rsids1.Append(rsid670);
      rsids1.Append(rsid671);
      rsids1.Append(rsid672);
      rsids1.Append(rsid673);
      rsids1.Append(rsid674);
      rsids1.Append(rsid675);
      rsids1.Append(rsid676);
      rsids1.Append(rsid677);
      rsids1.Append(rsid678);
      rsids1.Append(rsid679);
      rsids1.Append(rsid680);
      rsids1.Append(rsid681);
      rsids1.Append(rsid682);
      rsids1.Append(rsid683);
      rsids1.Append(rsid684);
      rsids1.Append(rsid685);
      rsids1.Append(rsid686);
      rsids1.Append(rsid687);
      rsids1.Append(rsid688);
      rsids1.Append(rsid689);
      rsids1.Append(rsid690);
      rsids1.Append(rsid691);
      rsids1.Append(rsid692);
      rsids1.Append(rsid693);
      rsids1.Append(rsid694);
      rsids1.Append(rsid695);
      rsids1.Append(rsid696);
      rsids1.Append(rsid697);
      rsids1.Append(rsid698);
      rsids1.Append(rsid699);
      rsids1.Append(rsid700);
      rsids1.Append(rsid701);
      rsids1.Append(rsid702);
      rsids1.Append(rsid703);
      rsids1.Append(rsid704);
      rsids1.Append(rsid705);
      rsids1.Append(rsid706);
      rsids1.Append(rsid707);
      rsids1.Append(rsid708);
      rsids1.Append(rsid709);
      rsids1.Append(rsid710);
      rsids1.Append(rsid711);
      rsids1.Append(rsid712);
      rsids1.Append(rsid713);
      rsids1.Append(rsid714);
      rsids1.Append(rsid715);
      rsids1.Append(rsid716);
      rsids1.Append(rsid717);
      rsids1.Append(rsid718);
      rsids1.Append(rsid719);
      rsids1.Append(rsid720);
      rsids1.Append(rsid721);
      rsids1.Append(rsid722);
      rsids1.Append(rsid723);
      rsids1.Append(rsid724);
      rsids1.Append(rsid725);
      rsids1.Append(rsid726);
      rsids1.Append(rsid727);
      rsids1.Append(rsid728);
      rsids1.Append(rsid729);
      rsids1.Append(rsid730);
      rsids1.Append(rsid731);
      rsids1.Append(rsid732);
      rsids1.Append(rsid733);
      rsids1.Append(rsid734);
      rsids1.Append(rsid735);
      rsids1.Append(rsid736);
      rsids1.Append(rsid737);
      rsids1.Append(rsid738);
      rsids1.Append(rsid739);
      rsids1.Append(rsid740);
      rsids1.Append(rsid741);
      rsids1.Append(rsid742);
      rsids1.Append(rsid743);
      rsids1.Append(rsid744);
      rsids1.Append(rsid745);
      rsids1.Append(rsid746);
      rsids1.Append(rsid747);
      rsids1.Append(rsid748);
      rsids1.Append(rsid749);
      rsids1.Append(rsid750);
      rsids1.Append(rsid751);
      rsids1.Append(rsid752);
      rsids1.Append(rsid753);
      rsids1.Append(rsid754);
      rsids1.Append(rsid755);
      rsids1.Append(rsid756);
      rsids1.Append(rsid757);
      rsids1.Append(rsid758);
      rsids1.Append(rsid759);
      rsids1.Append(rsid760);
      rsids1.Append(rsid761);
      rsids1.Append(rsid762);
      rsids1.Append(rsid763);
      rsids1.Append(rsid764);
      rsids1.Append(rsid765);
      rsids1.Append(rsid766);
      rsids1.Append(rsid767);
      rsids1.Append(rsid768);
      rsids1.Append(rsid769);
      rsids1.Append(rsid770);
      rsids1.Append(rsid771);
      rsids1.Append(rsid772);
      rsids1.Append(rsid773);
      rsids1.Append(rsid774);
      rsids1.Append(rsid775);
      rsids1.Append(rsid776);
      rsids1.Append(rsid777);
      rsids1.Append(rsid778);
      rsids1.Append(rsid779);
      rsids1.Append(rsid780);
      rsids1.Append(rsid781);
      rsids1.Append(rsid782);
      rsids1.Append(rsid783);
      rsids1.Append(rsid784);
      rsids1.Append(rsid785);
      rsids1.Append(rsid786);
      rsids1.Append(rsid787);
      rsids1.Append(rsid788);
      rsids1.Append(rsid789);
      rsids1.Append(rsid790);
      rsids1.Append(rsid791);
      rsids1.Append(rsid792);
      rsids1.Append(rsid793);
      rsids1.Append(rsid794);
      rsids1.Append(rsid795);
      rsids1.Append(rsid796);
      rsids1.Append(rsid797);
      rsids1.Append(rsid798);
      rsids1.Append(rsid799);
      rsids1.Append(rsid800);
      rsids1.Append(rsid801);
      rsids1.Append(rsid802);
      rsids1.Append(rsid803);
      rsids1.Append(rsid804);
      rsids1.Append(rsid805);
      rsids1.Append(rsid806);
      rsids1.Append(rsid807);
      rsids1.Append(rsid808);
      rsids1.Append(rsid809);
      rsids1.Append(rsid810);
      rsids1.Append(rsid811);
      rsids1.Append(rsid812);
      rsids1.Append(rsid813);
      rsids1.Append(rsid814);
      rsids1.Append(rsid815);
      rsids1.Append(rsid816);
      rsids1.Append(rsid817);
      rsids1.Append(rsid818);
      rsids1.Append(rsid819);
      rsids1.Append(rsid820);
      rsids1.Append(rsid821);
      rsids1.Append(rsid822);
      rsids1.Append(rsid823);
      rsids1.Append(rsid824);
      rsids1.Append(rsid825);
      rsids1.Append(rsid826);
      rsids1.Append(rsid827);
      rsids1.Append(rsid828);
      rsids1.Append(rsid829);
      rsids1.Append(rsid830);
      rsids1.Append(rsid831);
      rsids1.Append(rsid832);
      rsids1.Append(rsid833);
      rsids1.Append(rsid834);
      rsids1.Append(rsid835);
      rsids1.Append(rsid836);
      rsids1.Append(rsid837);
      rsids1.Append(rsid838);
      rsids1.Append(rsid839);
      rsids1.Append(rsid840);
      rsids1.Append(rsid841);
      rsids1.Append(rsid842);
      rsids1.Append(rsid843);
      rsids1.Append(rsid844);
      rsids1.Append(rsid845);
      rsids1.Append(rsid846);
      rsids1.Append(rsid847);
      rsids1.Append(rsid848);
      rsids1.Append(rsid849);
      rsids1.Append(rsid850);
      rsids1.Append(rsid851);
      rsids1.Append(rsid852);
      rsids1.Append(rsid853);
      rsids1.Append(rsid854);
      rsids1.Append(rsid855);
      rsids1.Append(rsid856);
      rsids1.Append(rsid857);
      rsids1.Append(rsid858);
      rsids1.Append(rsid859);
      rsids1.Append(rsid860);
      rsids1.Append(rsid861);
      rsids1.Append(rsid862);
      rsids1.Append(rsid863);
      rsids1.Append(rsid864);
      rsids1.Append(rsid865);
      rsids1.Append(rsid866);
      rsids1.Append(rsid867);
      rsids1.Append(rsid868);
      rsids1.Append(rsid869);
      rsids1.Append(rsid870);
      rsids1.Append(rsid871);
      rsids1.Append(rsid872);
      rsids1.Append(rsid873);
      rsids1.Append(rsid874);
      rsids1.Append(rsid875);
      rsids1.Append(rsid876);
      rsids1.Append(rsid877);
      rsids1.Append(rsid878);
      rsids1.Append(rsid879);
      rsids1.Append(rsid880);
      rsids1.Append(rsid881);
      rsids1.Append(rsid882);
      rsids1.Append(rsid883);
      rsids1.Append(rsid884);
      rsids1.Append(rsid885);
      rsids1.Append(rsid886);
      rsids1.Append(rsid887);
      rsids1.Append(rsid888);
      rsids1.Append(rsid889);
      rsids1.Append(rsid890);
      rsids1.Append(rsid891);
      rsids1.Append(rsid892);
      rsids1.Append(rsid893);
      rsids1.Append(rsid894);
      rsids1.Append(rsid895);
      rsids1.Append(rsid896);
      rsids1.Append(rsid897);
      rsids1.Append(rsid898);
      rsids1.Append(rsid899);
      rsids1.Append(rsid900);
      rsids1.Append(rsid901);
      rsids1.Append(rsid902);
      rsids1.Append(rsid903);
      rsids1.Append(rsid904);
      rsids1.Append(rsid905);
      rsids1.Append(rsid906);
      rsids1.Append(rsid907);
      rsids1.Append(rsid908);
      rsids1.Append(rsid909);
      rsids1.Append(rsid910);
      rsids1.Append(rsid911);
      rsids1.Append(rsid912);
      rsids1.Append(rsid913);
      rsids1.Append(rsid914);
      rsids1.Append(rsid915);
      rsids1.Append(rsid916);
      rsids1.Append(rsid917);
      rsids1.Append(rsid918);
      rsids1.Append(rsid919);
      rsids1.Append(rsid920);
      rsids1.Append(rsid921);
      rsids1.Append(rsid922);
      rsids1.Append(rsid923);
      rsids1.Append(rsid924);
      rsids1.Append(rsid925);
      rsids1.Append(rsid926);
      rsids1.Append(rsid927);
      rsids1.Append(rsid928);
      rsids1.Append(rsid929);
      rsids1.Append(rsid930);
      rsids1.Append(rsid931);
      rsids1.Append(rsid932);
      rsids1.Append(rsid933);
      rsids1.Append(rsid934);
      rsids1.Append(rsid935);
      rsids1.Append(rsid936);
      rsids1.Append(rsid937);
      rsids1.Append(rsid938);
      rsids1.Append(rsid939);
      rsids1.Append(rsid940);
      rsids1.Append(rsid941);
      rsids1.Append(rsid942);
      rsids1.Append(rsid943);
      rsids1.Append(rsid944);
      rsids1.Append(rsid945);
      rsids1.Append(rsid946);
      rsids1.Append(rsid947);
      rsids1.Append(rsid948);
      rsids1.Append(rsid949);
      rsids1.Append(rsid950);
      rsids1.Append(rsid951);
      rsids1.Append(rsid952);
      rsids1.Append(rsid953);
      rsids1.Append(rsid954);
      rsids1.Append(rsid955);
      rsids1.Append(rsid956);
      rsids1.Append(rsid957);
      rsids1.Append(rsid958);
      rsids1.Append(rsid959);
      rsids1.Append(rsid960);
      rsids1.Append(rsid961);
      rsids1.Append(rsid962);
      rsids1.Append(rsid963);
      rsids1.Append(rsid964);
      rsids1.Append(rsid965);
      rsids1.Append(rsid966);
      rsids1.Append(rsid967);
      rsids1.Append(rsid968);
      rsids1.Append(rsid969);
      rsids1.Append(rsid970);
      rsids1.Append(rsid971);
      rsids1.Append(rsid972);
      rsids1.Append(rsid973);
      rsids1.Append(rsid974);
      rsids1.Append(rsid975);
      rsids1.Append(rsid976);
      rsids1.Append(rsid977);
      rsids1.Append(rsid978);
      rsids1.Append(rsid979);
      rsids1.Append(rsid980);
      rsids1.Append(rsid981);
      rsids1.Append(rsid982);
      rsids1.Append(rsid983);
      rsids1.Append(rsid984);
      rsids1.Append(rsid985);
      rsids1.Append(rsid986);
      rsids1.Append(rsid987);
      rsids1.Append(rsid988);
      rsids1.Append(rsid989);
      rsids1.Append(rsid990);
      rsids1.Append(rsid991);
      rsids1.Append(rsid992);
      rsids1.Append(rsid993);
      rsids1.Append(rsid994);
      rsids1.Append(rsid995);
      rsids1.Append(rsid996);
      rsids1.Append(rsid997);
      rsids1.Append(rsid998);
      rsids1.Append(rsid999);
      rsids1.Append(rsid1000);
      rsids1.Append(rsid1001);
      rsids1.Append(rsid1002);
      rsids1.Append(rsid1003);
      rsids1.Append(rsid1004);
      rsids1.Append(rsid1005);
      rsids1.Append(rsid1006);
      rsids1.Append(rsid1007);
      rsids1.Append(rsid1008);
      rsids1.Append(rsid1009);
      rsids1.Append(rsid1010);
      rsids1.Append(rsid1011);
      rsids1.Append(rsid1012);
      rsids1.Append(rsid1013);
      rsids1.Append(rsid1014);
      rsids1.Append(rsid1015);
      rsids1.Append(rsid1016);
      rsids1.Append(rsid1017);
      rsids1.Append(rsid1018);
      rsids1.Append(rsid1019);
      rsids1.Append(rsid1020);
      rsids1.Append(rsid1021);
      rsids1.Append(rsid1022);
      rsids1.Append(rsid1023);
      rsids1.Append(rsid1024);
      rsids1.Append(rsid1025);
      rsids1.Append(rsid1026);
      rsids1.Append(rsid1027);
      rsids1.Append(rsid1028);
      rsids1.Append(rsid1029);
      rsids1.Append(rsid1030);
      rsids1.Append(rsid1031);
      rsids1.Append(rsid1032);
      rsids1.Append(rsid1033);
      rsids1.Append(rsid1034);
      rsids1.Append(rsid1035);
      rsids1.Append(rsid1036);
      rsids1.Append(rsid1037);
      rsids1.Append(rsid1038);
      rsids1.Append(rsid1039);
      rsids1.Append(rsid1040);
      rsids1.Append(rsid1041);
      rsids1.Append(rsid1042);
      rsids1.Append(rsid1043);
      rsids1.Append(rsid1044);
      rsids1.Append(rsid1045);
      rsids1.Append(rsid1046);
      rsids1.Append(rsid1047);
      rsids1.Append(rsid1048);
      rsids1.Append(rsid1049);
      rsids1.Append(rsid1050);
      rsids1.Append(rsid1051);
      rsids1.Append(rsid1052);
      rsids1.Append(rsid1053);
      rsids1.Append(rsid1054);
      rsids1.Append(rsid1055);
      rsids1.Append(rsid1056);
      rsids1.Append(rsid1057);
      rsids1.Append(rsid1058);
      rsids1.Append(rsid1059);
      rsids1.Append(rsid1060);
      rsids1.Append(rsid1061);
      rsids1.Append(rsid1062);
      rsids1.Append(rsid1063);
      rsids1.Append(rsid1064);
      rsids1.Append(rsid1065);
      rsids1.Append(rsid1066);
      rsids1.Append(rsid1067);
      rsids1.Append(rsid1068);
      rsids1.Append(rsid1069);
      rsids1.Append(rsid1070);
      rsids1.Append(rsid1071);
      rsids1.Append(rsid1072);
      rsids1.Append(rsid1073);
      rsids1.Append(rsid1074);
      rsids1.Append(rsid1075);
      rsids1.Append(rsid1076);
      rsids1.Append(rsid1077);
      rsids1.Append(rsid1078);
      rsids1.Append(rsid1079);
      rsids1.Append(rsid1080);
      rsids1.Append(rsid1081);
      rsids1.Append(rsid1082);
      rsids1.Append(rsid1083);
      rsids1.Append(rsid1084);
      rsids1.Append(rsid1085);
      rsids1.Append(rsid1086);
      rsids1.Append(rsid1087);
      rsids1.Append(rsid1088);
      rsids1.Append(rsid1089);
      rsids1.Append(rsid1090);
      rsids1.Append(rsid1091);
      rsids1.Append(rsid1092);
      rsids1.Append(rsid1093);
      rsids1.Append(rsid1094);
      rsids1.Append(rsid1095);
      rsids1.Append(rsid1096);
      rsids1.Append(rsid1097);
      rsids1.Append(rsid1098);
      rsids1.Append(rsid1099);
      rsids1.Append(rsid1100);
      rsids1.Append(rsid1101);
      rsids1.Append(rsid1102);
      rsids1.Append(rsid1103);
      rsids1.Append(rsid1104);
      rsids1.Append(rsid1105);
      rsids1.Append(rsid1106);
      rsids1.Append(rsid1107);
      rsids1.Append(rsid1108);
      rsids1.Append(rsid1109);
      rsids1.Append(rsid1110);
      rsids1.Append(rsid1111);
      rsids1.Append(rsid1112);
      rsids1.Append(rsid1113);
      rsids1.Append(rsid1114);
      rsids1.Append(rsid1115);
      rsids1.Append(rsid1116);
      rsids1.Append(rsid1117);
      rsids1.Append(rsid1118);
      rsids1.Append(rsid1119);
      rsids1.Append(rsid1120);
      rsids1.Append(rsid1121);
      rsids1.Append(rsid1122);
      rsids1.Append(rsid1123);
      rsids1.Append(rsid1124);
      rsids1.Append(rsid1125);
      rsids1.Append(rsid1126);
      rsids1.Append(rsid1127);
      rsids1.Append(rsid1128);
      rsids1.Append(rsid1129);
      rsids1.Append(rsid1130);
      rsids1.Append(rsid1131);
      rsids1.Append(rsid1132);
      rsids1.Append(rsid1133);
      rsids1.Append(rsid1134);
      rsids1.Append(rsid1135);
      rsids1.Append(rsid1136);
      rsids1.Append(rsid1137);
      rsids1.Append(rsid1138);
      rsids1.Append(rsid1139);
      rsids1.Append(rsid1140);
      rsids1.Append(rsid1141);
      rsids1.Append(rsid1142);
      rsids1.Append(rsid1143);
      rsids1.Append(rsid1144);
      rsids1.Append(rsid1145);
      rsids1.Append(rsid1146);
      rsids1.Append(rsid1147);
      rsids1.Append(rsid1148);
      rsids1.Append(rsid1149);
      rsids1.Append(rsid1150);
      rsids1.Append(rsid1151);
      rsids1.Append(rsid1152);
      rsids1.Append(rsid1153);
      rsids1.Append(rsid1154);
      rsids1.Append(rsid1155);
      rsids1.Append(rsid1156);
      rsids1.Append(rsid1157);
      rsids1.Append(rsid1158);
      rsids1.Append(rsid1159);
      rsids1.Append(rsid1160);
      rsids1.Append(rsid1161);
      rsids1.Append(rsid1162);
      rsids1.Append(rsid1163);
      rsids1.Append(rsid1164);
      rsids1.Append(rsid1165);
      rsids1.Append(rsid1166);
      rsids1.Append(rsid1167);
      rsids1.Append(rsid1168);
      rsids1.Append(rsid1169);
      rsids1.Append(rsid1170);
      rsids1.Append(rsid1171);
      rsids1.Append(rsid1172);
      rsids1.Append(rsid1173);
      rsids1.Append(rsid1174);
      rsids1.Append(rsid1175);
      rsids1.Append(rsid1176);
      rsids1.Append(rsid1177);
      rsids1.Append(rsid1178);
      rsids1.Append(rsid1179);
      rsids1.Append(rsid1180);
      rsids1.Append(rsid1181);
      rsids1.Append(rsid1182);
      rsids1.Append(rsid1183);
      rsids1.Append(rsid1184);
      rsids1.Append(rsid1185);
      rsids1.Append(rsid1186);
      rsids1.Append(rsid1187);
      rsids1.Append(rsid1188);
      rsids1.Append(rsid1189);
      rsids1.Append(rsid1190);
      rsids1.Append(rsid1191);
      rsids1.Append(rsid1192);
      rsids1.Append(rsid1193);
      rsids1.Append(rsid1194);
      rsids1.Append(rsid1195);
      rsids1.Append(rsid1196);
      rsids1.Append(rsid1197);
      rsids1.Append(rsid1198);
      rsids1.Append(rsid1199);
      rsids1.Append(rsid1200);
      rsids1.Append(rsid1201);
      rsids1.Append(rsid1202);
      rsids1.Append(rsid1203);
      rsids1.Append(rsid1204);
      rsids1.Append(rsid1205);
      rsids1.Append(rsid1206);
      rsids1.Append(rsid1207);
      rsids1.Append(rsid1208);
      rsids1.Append(rsid1209);
      rsids1.Append(rsid1210);
      rsids1.Append(rsid1211);
      rsids1.Append(rsid1212);
      rsids1.Append(rsid1213);
      rsids1.Append(rsid1214);
      rsids1.Append(rsid1215);

      M.MathProperties mathProperties1 = new M.MathProperties();
      M.MathFont mathFont1 = new M.MathFont() { Val = "Cambria Math" };
      M.BreakBinary breakBinary1 = new M.BreakBinary() { Val = M.BreakBinaryOperatorValues.Before };
      M.BreakBinarySubtraction breakBinarySubtraction1 = new M.BreakBinarySubtraction() { Val = M.BreakBinarySubtractionValues.MinusMinus };
      M.SmallFraction smallFraction1 = new M.SmallFraction() { Val = M.BooleanValues.Zero };
      M.DisplayDefaults displayDefaults1 = new M.DisplayDefaults();
      M.LeftMargin leftMargin1 = new M.LeftMargin() { Val = (UInt32Value)0U };
      M.RightMargin rightMargin1 = new M.RightMargin() { Val = (UInt32Value)0U };
      M.DefaultJustification defaultJustification1 = new M.DefaultJustification() { Val = M.JustificationValues.CenterGroup };
      M.WrapIndent wrapIndent1 = new M.WrapIndent() { Val = (UInt32Value)1440U };
      M.IntegralLimitLocation integralLimitLocation1 = new M.IntegralLimitLocation() { Val = M.LimitLocationValues.SubscriptSuperscript };
      M.NaryLimitLocation naryLimitLocation1 = new M.NaryLimitLocation() { Val = M.LimitLocationValues.UnderOver };

      mathProperties1.Append(mathFont1);
      mathProperties1.Append(breakBinary1);
      mathProperties1.Append(breakBinarySubtraction1);
      mathProperties1.Append(smallFraction1);
      mathProperties1.Append(displayDefaults1);
      mathProperties1.Append(leftMargin1);
      mathProperties1.Append(rightMargin1);
      mathProperties1.Append(defaultJustification1);
      mathProperties1.Append(wrapIndent1);
      mathProperties1.Append(integralLimitLocation1);
      mathProperties1.Append(naryLimitLocation1);
      ThemeFontLanguages themeFontLanguages1 = new ThemeFontLanguages() { Val = "en-GB" };
      ColorSchemeMapping colorSchemeMapping1 = new ColorSchemeMapping() { Background1 = ColorSchemeIndexValues.Light1, Text1 = ColorSchemeIndexValues.Dark1, Background2 = ColorSchemeIndexValues.Light2, Text2 = ColorSchemeIndexValues.Dark2, Accent1 = ColorSchemeIndexValues.Accent1, Accent2 = ColorSchemeIndexValues.Accent2, Accent3 = ColorSchemeIndexValues.Accent3, Accent4 = ColorSchemeIndexValues.Accent4, Accent5 = ColorSchemeIndexValues.Accent5, Accent6 = ColorSchemeIndexValues.Accent6, Hyperlink = ColorSchemeIndexValues.Hyperlink, FollowedHyperlink = ColorSchemeIndexValues.FollowedHyperlink };
      DoNotIncludeSubdocsInStats doNotIncludeSubdocsInStats1 = new DoNotIncludeSubdocsInStats();
      DoNotAutoCompressPictures doNotAutoCompressPictures1 = new DoNotAutoCompressPictures();

      ShapeDefaults shapeDefaults2 = new ShapeDefaults();
      Ovml.ShapeDefaults shapeDefaults3 = new Ovml.ShapeDefaults() { Extension = V.ExtensionHandlingBehaviorValues.Edit, MaxShapeId = 2049 };

      Ovml.ShapeLayout shapeLayout1 = new Ovml.ShapeLayout() { Extension = V.ExtensionHandlingBehaviorValues.Edit };
      Ovml.ShapeIdMap shapeIdMap1 = new Ovml.ShapeIdMap() { Extension = V.ExtensionHandlingBehaviorValues.Edit, Data = "1" };

      shapeLayout1.Append(shapeIdMap1);

      shapeDefaults2.Append(shapeDefaults3);
      shapeDefaults2.Append(shapeLayout1);
      DecimalSymbol decimalSymbol1 = new DecimalSymbol() { Val = "," };
      ListSeparator listSeparator1 = new ListSeparator() { Val = ";" };
      W14.DefaultImageDpi defaultImageDpi1 = new W14.DefaultImageDpi() { Val = 96 };
      W15.ChartTrackingRefBased chartTrackingRefBased1 = new W15.ChartTrackingRefBased();
      W15.PersistentDocumentId persistentDocumentId1 = new W15.PersistentDocumentId() { Val = "{CB9D3D66-041E-447D-A44C-D160DE115B53}" };

      settings1.Append(zoom1);
      settings1.Append(embedSystemFonts1);
      settings1.Append(stylePaneFormatFilter1);
      settings1.Append(defaultTabStop1);
      settings1.Append(hyphenationZone1);
      settings1.Append(noPunctuationKerning1);
      settings1.Append(characterSpacingControl1);
      settings1.Append(headerShapeDefaults1);
      settings1.Append(footnoteDocumentWideProperties1);
      settings1.Append(endnoteDocumentWideProperties1);
      settings1.Append(compatibility1);
      settings1.Append(rsids1);
      settings1.Append(mathProperties1);
      settings1.Append(themeFontLanguages1);
      settings1.Append(colorSchemeMapping1);
      settings1.Append(doNotIncludeSubdocsInStats1);
      settings1.Append(doNotAutoCompressPictures1);
      settings1.Append(shapeDefaults2);
      settings1.Append(decimalSymbol1);
      settings1.Append(listSeparator1);
      settings1.Append(defaultImageDpi1);
      settings1.Append(chartTrackingRefBased1);
      settings1.Append(persistentDocumentId1);

      part.Settings = settings1;
    }


    #endregion

    #endregion

    //=====================================
    // FUNZIONI DI FORMATO RTF
    //=====================================
    // es   partial_rtf_text += Addcell1("C",18,false,e("Al sindaco unico"));

    public string Addcell1(string align, int size, bool bold, string content)
    {
      string strbold = "";

      if (bold)
        strbold = "\\b";


      return " \\q" + align + " \\fs" + size + " " + strbold + " " + content + " \\cell";

    }

    public string e(string content)
    {
      return content;
    }


  }
}

